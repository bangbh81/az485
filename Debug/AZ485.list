
AZ485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800885c  0800885c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008864  08008864  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800886c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cac  200000bc  08008928  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006d68  08008928  00026d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9f1  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036f8  00000000  00000000  0003badd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e8  00000000  00000000  0003f1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  000406c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000050c4  00000000  00000000  00041a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e3d  00000000  00000000  00046ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097a76  00000000  00000000  00057921  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e98  00000000  00000000  000ef414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008644 	.word	0x08008644

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	08008644 	.word	0x08008644

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 fb5a 	bl	8001c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f862 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fa90 	bl	8000ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 fa48 	bl	8000a24 <MX_DMA_Init>
  MX_CRC_Init();
 8000594:	f000 f8c6 	bl	8000724 <MX_CRC_Init>
  MX_TIM2_Init();
 8000598:	f000 f8d8 	bl	800074c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800059c:	f000 f97c 	bl	8000898 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f9b0 	bl	8000904 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005a4:	f000 f9f6 	bl	8000994 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80005a8:	f000 f922 	bl	80007f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL); //make the size of printf buffer 0
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0xa4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f007 f97b 	bl	80078b0 <setbuf>

  sQrecv = osMessageQueueNew(QUEUE_MAX_SIZE, sizeof(mQueue), NULL);
 80005ba:	2200      	movs	r2, #0
 80005bc:	210c      	movs	r1, #12
 80005be:	2014      	movs	r0, #20
 80005c0:	f004 f9cc 	bl	800495c <osMessageQueueNew>
 80005c4:	4602      	mov	r2, r0
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <main+0xa8>)
 80005c8:	601a      	str	r2, [r3, #0]
  sQsend = osMessageQueueNew(QUEUE_MAX_SIZE, sizeof(mQueue), NULL);
 80005ca:	2200      	movs	r2, #0
 80005cc:	210c      	movs	r1, #12
 80005ce:	2014      	movs	r0, #20
 80005d0:	f004 f9c4 	bl	800495c <osMessageQueueNew>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <main+0xac>)
 80005d8:	601a      	str	r2, [r3, #0]
  eQrecv = osMessageQueueNew(QUEUE_MAX_SIZE, sizeof(mQueue), NULL);
 80005da:	2200      	movs	r2, #0
 80005dc:	210c      	movs	r1, #12
 80005de:	2014      	movs	r0, #20
 80005e0:	f004 f9bc 	bl	800495c <osMessageQueueNew>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0xb0>)
 80005e8:	601a      	str	r2, [r3, #0]
  eQsend = osMessageQueueNew(QUEUE_MAX_SIZE, sizeof(mQueue), NULL);
 80005ea:	2200      	movs	r2, #0
 80005ec:	210c      	movs	r1, #12
 80005ee:	2014      	movs	r0, #20
 80005f0:	f004 f9b4 	bl	800495c <osMessageQueueNew>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <main+0xb4>)
 80005f8:	601a      	str	r2, [r3, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fa:	f004 f871 	bl	80046e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <main+0xb8>)
 8000600:	2100      	movs	r1, #0
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <main+0xbc>)
 8000604:	f004 f8d6 	bl	80047b4 <osThreadNew>
 8000608:	4602      	mov	r2, r0
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <main+0xc0>)
 800060c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  tskS2CCoreHandle = osThreadNew(tskS2CCore, NULL, &tskS2C_attributes);
 800060e:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <main+0xc4>)
 8000610:	2100      	movs	r1, #0
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <main+0xc8>)
 8000614:	f004 f8ce 	bl	80047b4 <osThreadNew>
 8000618:	4602      	mov	r2, r0
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <main+0xcc>)
 800061c:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f004 f893 	bl	8004748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0xa2>
 8000624:	20000058 	.word	0x20000058
 8000628:	20004ab8 	.word	0x20004ab8
 800062c:	20005c08 	.word	0x20005c08
 8000630:	20006cd0 	.word	0x20006cd0
 8000634:	20004ac4 	.word	0x20004ac4
 8000638:	080086f0 	.word	0x080086f0
 800063c:	08000bc1 	.word	0x08000bc1
 8000640:	200049f4 	.word	0x200049f4
 8000644:	08008714 	.word	0x08008714
 8000648:	08000c05 	.word	0x08000c05
 800064c:	20005c0c 	.word	0x20005c0c

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 ffe9 	bl	8007636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xd0>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006c8:	2390      	movs	r3, #144	; 0x90
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fff9 	bl	80026d0 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 fa86 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2102      	movs	r1, #2
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fa53 	bl	8002bb0 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000710:	f000 fa70 	bl	8000bf4 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_CRC_Init+0x20>)
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <MX_CRC_Init+0x24>)
 800072c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_CRC_Init+0x20>)
 8000730:	f001 fba8 	bl	8001e84 <HAL_CRC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800073a:	f000 fa5b 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20004abc 	.word	0x20004abc
 8000748:	40023000 	.word	0x40023000

0800074c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_TIM2_Init+0xa0>)
 800076a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800076e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_TIM2_Init+0xa0>)
 8000772:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_TIM2_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = DELIMIT_TIME_S - 1;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_TIM2_Init+0xa0>)
 8000780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_TIM2_Init+0xa0>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_TIM2_Init+0xa0>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000792:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_TIM2_Init+0xa0>)
 8000794:	f002 fc30 	bl	8002ff8 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800079e:	f000 fa29 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	4619      	mov	r1, r3
 80007ae:	480f      	ldr	r0, [pc, #60]	; (80007ec <MX_TIM2_Init+0xa0>)
 80007b0:	f002 fda4 	bl	80032fc <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007ba:	f000 fa1b 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	4808      	ldr	r0, [pc, #32]	; (80007ec <MX_TIM2_Init+0xa0>)
 80007cc:	f002 ff90 	bl	80036f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007d6:	f000 fa0d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_UPDATE);
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <MX_TIM2_Init+0xa0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f06f 0201 	mvn.w	r2, #1
 80007e2:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20005c50 	.word	0x20005c50

080007f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_TIM3_Init+0xa0>)
 800080e:	4a21      	ldr	r2, [pc, #132]	; (8000894 <MX_TIM3_Init+0xa4>)
 8000810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000814:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_TIM3_Init+0xa0>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = DELIMIT_TIME_E - 1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_TIM3_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000834:	4816      	ldr	r0, [pc, #88]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000836:	f002 fbdf 	bl	8002ff8 <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000840:	f000 f9d8 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4619      	mov	r1, r3
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000852:	f002 fd53 	bl	80032fc <HAL_TIM_ConfigClockSource>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800085c:	f000 f9ca 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_TIM3_Init+0xa0>)
 800086e:	f002 ff3f 	bl	80036f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f9bc 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim3,TIM_FLAG_UPDATE);
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <MX_TIM3_Init+0xa0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f06f 0201 	mvn.w	r2, #1
 8000884:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM3_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20004ac8 	.word	0x20004ac8
 8000894:	40000400 	.word	0x40000400

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_USART1_UART_Init+0x64>)
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <MX_USART1_UART_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008d0:	f002 ff90 	bl	80037f4 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f98b 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);//Peter Enable "Receive data register not empty" interrupt
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68da      	ldr	r2, [r3, #12]
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f042 0220 	orr.w	r2, r2, #32
 80008ec:	60da      	str	r2, [r3, #12]
  __HAL_UART_CLEAR_FLAG(&huart1,UART_FLAG_RXNE);
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <MX_USART1_UART_Init+0x64>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f06f 0220 	mvn.w	r2, #32
 80008f6:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20004bc8 	.word	0x20004bc8
 8000900:	40011000 	.word	0x40011000

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_USART2_UART_Init+0x80>)
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <MX_USART2_UART_Init+0x84>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_USART2_UART_Init+0x80>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_USART2_UART_Init+0x80>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_USART2_UART_Init+0x80>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_USART2_UART_Init+0x80>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_USART2_UART_Init+0x80>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x80>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART2_UART_Init+0x80>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <MX_USART2_UART_Init+0x80>)
 800093c:	f002 ff5a 	bl	80037f4 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f955 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);//Peter Enable "Receive data register not empty" interrupt
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x80>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x80>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f042 0220 	orr.w	r2, r2, #32
 8000958:	60da      	str	r2, [r3, #12]
  __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);//clear flag
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_USART2_UART_Init+0x80>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f06f 0220 	mvn.w	r2, #32
 8000962:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, u8S2EBuffer, E_BUFFER_SIZE);
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	4908      	ldr	r1, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x88>)
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x80>)
 800096c:	f003 f894 	bl	8003a98 <HAL_UART_Receive_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//disable HT interrupt
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_USART2_UART_Init+0x8c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART2_UART_Init+0x8c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0208 	bic.w	r2, r2, #8
 800097e:	601a      	str	r2, [r3, #0]
  //__HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx,DMA_FLAG_TCIF1_5);
  /* USER CODE END USART2_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20005c90 	.word	0x20005c90
 8000988:	40004400 	.word	0x40004400
 800098c:	20005cd0 	.word	0x20005cd0
 8000990:	200049f8 	.word	0x200049f8

08000994 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <MX_USART6_UART_Init+0x84>)
 800099c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009cc:	f002 ff12 	bl	80037f4 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f90d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);//Peter Enable "Receive data register not empty" interrupt
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f042 0220 	orr.w	r2, r2, #32
 80009e8:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);//clear flag
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f06f 0220 	mvn.w	r2, #32
 80009f2:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart6, u8E2SBuffer, E_BUFFER_SIZE);
 80009f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f8:	4908      	ldr	r1, [pc, #32]	; (8000a1c <MX_USART6_UART_Init+0x88>)
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_USART6_UART_Init+0x80>)
 80009fc:	f003 f84c 	bl	8003a98 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);//disable HT interrupt
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_USART6_UART_Init+0x8c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART6_UART_Init+0x8c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0208 	bic.w	r2, r2, #8
 8000a0e:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20005c10 	.word	0x20005c10
 8000a18:	40011400 	.word	0x40011400
 8000a1c:	20004c08 	.word	0x20004c08
 8000a20:	20004a58 	.word	0x20004a58

08000a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_DMA_Init+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a1e      	ldr	r2, [pc, #120]	; (8000aac <MX_DMA_Init+0x88>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_DMA_Init+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_DMA_Init+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <MX_DMA_Init+0x88>)
 8000a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_DMA_Init+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	2010      	movs	r0, #16
 8000a68:	f001 f9e2 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a6c:	2010      	movs	r0, #16
 8000a6e:	f001 f9fb 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2011      	movs	r0, #17
 8000a78:	f001 f9da 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a7c:	2011      	movs	r0, #17
 8000a7e:	f001 f9f3 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2105      	movs	r1, #5
 8000a86:	2039      	movs	r0, #57	; 0x39
 8000a88:	f001 f9d2 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a8c:	2039      	movs	r0, #57	; 0x39
 8000a8e:	f001 f9eb 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2105      	movs	r1, #5
 8000a96:	2045      	movs	r0, #69	; 0x45
 8000a98:	f001 f9ca 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a9c:	2045      	movs	r0, #69	; 0x45
 8000a9e:	f001 f9e3 	bl	8001e68 <HAL_NVIC_EnableIRQ>

}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a2e      	ldr	r2, [pc, #184]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RTS2_GPIO_Port, RTS2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	481b      	ldr	r0, [pc, #108]	; (8000b8c <MX_GPIO_Init+0xdc>)
 8000b20:	f001 fda2 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WizFi_Reset_Pin|LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2170      	movs	r1, #112	; 0x70
 8000b28:	4819      	ldr	r0, [pc, #100]	; (8000b90 <MX_GPIO_Init+0xe0>)
 8000b2a:	f001 fd9d 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RTS2_Pin */
  GPIO_InitStruct.Pin = RTS2_Pin;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTS2_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_GPIO_Init+0xdc>)
 8000b46:	f001 fc0d 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : WizFi_Reset_Pin LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = WizFi_Reset_Pin|LED0_Pin|LED1_Pin;
 8000b4a:	2370      	movs	r3, #112	; 0x70
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <MX_GPIO_Init+0xe0>)
 8000b62:	f001 fbff 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_GPIO_Init+0xe0>)
 8000b7a:	f001 fbf3 	bl	8002364 <HAL_GPIO_Init>

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400

08000b94 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8000ba2:	f107 010c 	add.w	r1, r7, #12
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <__io_putchar+0x28>)
 8000bac:	f002 fe6f 	bl	800388e <HAL_UART_Transmit>
 return ch;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20004bc8 	.word	0x20004bc8

08000bc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f003 fe99 	bl	8004900 <osDelay>
 8000bce:	e7fb      	b.n	8000bc8 <StartDefaultTask+0x8>

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f001 f84d 	bl	8001c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40000c00 	.word	0x40000c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <tskS2CCore>:
		0,
		0
};

void tskS2CCore(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	mQueue S2EQ,E2SQ;
	uint8_t *pMsg, pTmpMsg;
	uint32_t tmpSize;
	HAL_GPIO_TogglePin(GPIOB, WizFi_Reset_Pin);//reset GPIO
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	4860      	ldr	r0, [pc, #384]	; (8000d90 <tskS2CCore+0x18c>)
 8000c10:	f001 fd43 	bl	800269a <HAL_GPIO_TogglePin>
	tsksQSendTriggerHandle = osThreadNew(tsksQSendTrigger, NULL, &tsksQSendTrigger_attributes);//Enable S2E Queue send
 8000c14:	4a5f      	ldr	r2, [pc, #380]	; (8000d94 <tskS2CCore+0x190>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	485f      	ldr	r0, [pc, #380]	; (8000d98 <tskS2CCore+0x194>)
 8000c1a:	f003 fdcb 	bl	80047b4 <osThreadNew>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	4b5e      	ldr	r3, [pc, #376]	; (8000d9c <tskS2CCore+0x198>)
 8000c22:	601a      	str	r2, [r3, #0]
	tskeQSendTriggerHandle = osThreadNew(tskeQSendTrigger, NULL, &tskeQSendTrigger_attributes);//Enable E2S Queue send
 8000c24:	4a5e      	ldr	r2, [pc, #376]	; (8000da0 <tskS2CCore+0x19c>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	485e      	ldr	r0, [pc, #376]	; (8000da4 <tskS2CCore+0x1a0>)
 8000c2a:	f003 fdc3 	bl	80047b4 <osThreadNew>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	4b5d      	ldr	r3, [pc, #372]	; (8000da8 <tskS2CCore+0x1a4>)
 8000c32:	601a      	str	r2, [r3, #0]
	tskLEDHandle = osThreadNew(tskLED, NULL, &tskLED_attributes);//Enable E2S Queue send
 8000c34:	4a5d      	ldr	r2, [pc, #372]	; (8000dac <tskS2CCore+0x1a8>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	485d      	ldr	r0, [pc, #372]	; (8000db0 <tskS2CCore+0x1ac>)
 8000c3a:	f003 fdbb 	bl	80047b4 <osThreadNew>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4b5c      	ldr	r3, [pc, #368]	; (8000db4 <tskS2CCore+0x1b0>)
 8000c42:	601a      	str	r2, [r3, #0]
//		}

		/*
		 * WIZFI360
		 */
		if(osMessageQueueGet(eQrecv, &E2SQ, NULL, NULL) == osOK){//check if the message is in queue from wizfi360
 8000c44:	4b5c      	ldr	r3, [pc, #368]	; (8000db8 <tskS2CCore+0x1b4>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	f107 010c 	add.w	r1, r7, #12
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f003 ff7e 	bl	8004b50 <osMessageQueueGet>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d160      	bne.n	8000d1c <tskS2CCore+0x118>
			//1. copy the memory
			pMsg = pvPortMalloc(E2SQ.size);// memory allocation
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f006 facf 	bl	8007200 <pvPortMalloc>
 8000c62:	62f8      	str	r0, [r7, #44]	; 0x2c
			if(pMsg == NULL){//if fail to allocate memory
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <tskS2CCore+0x6c>
				printf("Error!!!\r\n");
 8000c6a:	4854      	ldr	r0, [pc, #336]	; (8000dbc <tskS2CCore+0x1b8>)
 8000c6c:	f006 fe08 	bl	8007880 <puts>
			}
			memcpy(pMsg, E2SQ.start, E2SQ.size);
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4619      	mov	r1, r3
 8000c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c78:	f006 fcd2 	bl	8007620 <memcpy>
			E2SQ.start = pMsg;// Queue item update
 8000c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7e:	613b      	str	r3, [r7, #16]
			//2. check if the message is splited ? re allocate the memory : break;ready
			if(E2SQ.isSplit){
 8000c80:	7d3b      	ldrb	r3, [r7, #20]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d042      	beq.n	8000d0c <tskS2CCore+0x108>
				pTmpMsg = pvPortMalloc(E2SQ.size);// memory allocation
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f006 fab9 	bl	8007200 <pvPortMalloc>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				memcpy(pTmpMsg, pMsg, E2SQ.size);// copy memory
 8000c94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c98:	4618      	mov	r0, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ca0:	f006 fcbe 	bl	8007620 <memcpy>
				vPortFree(pMsg);// free the previous memory
 8000ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ca6:	f006 fb6d 	bl	8007384 <vPortFree>
				tmpSize = E2SQ.size;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
				while(osMessageQueueGet(sQrecv, &S2EQ, NULL, NULL) != osOK){}
 8000cae:	bf00      	nop
 8000cb0:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <tskS2CCore+0x1bc>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f107 0118 	add.w	r1, r7, #24
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f003 ff48 	bl	8004b50 <osMessageQueueGet>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f4      	bne.n	8000cb0 <tskS2CCore+0xac>
				pMsg = pvPortMalloc(E2SQ.size + tmpSize);// memory allocation again
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	4413      	add	r3, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f006 fa97 	bl	8007200 <pvPortMalloc>
 8000cd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				memcpy(pMsg, pTmpMsg, tmpSize);// first one
 8000cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000cde:	f006 fc9f 	bl	8007620 <memcpy>
				memcpy(pMsg+tmpSize, E2SQ.start, E2SQ.size);// Second one
 8000ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	4413      	add	r3, r2
 8000ce8:	6939      	ldr	r1, [r7, #16]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f006 fc97 	bl	8007620 <memcpy>
				free(pTmpMsg);// Free temp memory
 8000cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f006 fc8a 	bl	8007610 <free>
				E2SQ.start = pMsg;
 8000cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfe:	613b      	str	r3, [r7, #16]
				E2SQ.size = E2SQ.size + tmpSize;
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	4413      	add	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
				E2SQ.isSplit = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	753b      	strb	r3, [r7, #20]
			}
			osMessageQueuePut(sQsend, &E2SQ, NULL, NULL);//bypass
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <tskS2CCore+0x1c0>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2300      	movs	r3, #0
 8000d16:	2200      	movs	r2, #0
 8000d18:	f003 fea6 	bl	8004a68 <osMessageQueuePut>
//			} else {//if no
//				osMessageQueuePut(sQsend, &E2SQ, NULL, NULL);//bypass
//			}
		}

		if(osMessageQueueGet(sQrecv, &S2EQ, NULL, NULL) == osOK){//Check if the message is in queue from serial
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <tskS2CCore+0x1bc>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	f107 0118 	add.w	r1, r7, #24
 8000d24:	2300      	movs	r3, #0
 8000d26:	2200      	movs	r2, #0
 8000d28:	f003 ff12 	bl	8004b50 <osMessageQueueGet>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d188      	bne.n	8000c44 <tskS2CCore+0x40>
			/*
			 * osMessageQueuePut(sQsend, &, NULL, NULL);// send *AT+WINC_PUB_EVENT={"InMsg":"*
			 * osMessageQueuePut(sQsend, &E2SQ, NULL, NULL);// send *Hello world!!*
			 * osMessageQueuePut(sQsend, &E2SQ, NULL, NULL);// send *"}}$0d$0a*
			 */
			osMessageQueuePut(eQsend, &pub_front, NULL, NULL);// send *AT+WINC_PUB_EVENT={\"InMsg\":\"*
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <tskS2CCore+0x1c4>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4924      	ldr	r1, [pc, #144]	; (8000dcc <tskS2CCore+0x1c8>)
 8000d3c:	f003 fe94 	bl	8004a68 <osMessageQueuePut>
			osMessageQueuePut(eQsend, &S2EQ, NULL, NULL);// send *Hello world!!*
 8000d40:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <tskS2CCore+0x1c4>)
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	f107 0118 	add.w	r1, r7, #24
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f003 fe8c 	bl	8004a68 <osMessageQueuePut>
			if(S2EQ.isSplit){
 8000d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d013      	beq.n	8000d80 <tskS2CCore+0x17c>
				while(osMessageQueueGet(sQrecv, &S2EQ, NULL, NULL) != osOK){}
 8000d58:	bf00      	nop
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <tskS2CCore+0x1bc>)
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	f107 0118 	add.w	r1, r7, #24
 8000d62:	2300      	movs	r3, #0
 8000d64:	2200      	movs	r2, #0
 8000d66:	f003 fef3 	bl	8004b50 <osMessageQueueGet>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f4      	bne.n	8000d5a <tskS2CCore+0x156>
				osMessageQueuePut(eQsend, &S2EQ, NULL, NULL);
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <tskS2CCore+0x1c4>)
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	f107 0118 	add.w	r1, r7, #24
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f003 fe74 	bl	8004a68 <osMessageQueuePut>
			}
			osMessageQueuePut(eQsend, &pub_end, NULL, NULL);// send *\"}}\r\n*
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <tskS2CCore+0x1c4>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	4911      	ldr	r1, [pc, #68]	; (8000dd0 <tskS2CCore+0x1cc>)
 8000d8a:	f003 fe6d 	bl	8004a68 <osMessageQueuePut>
		if(osMessageQueueGet(eQrecv, &E2SQ, NULL, NULL) == osOK){//check if the message is in queue from wizfi360
 8000d8e:	e759      	b.n	8000c44 <tskS2CCore+0x40>
 8000d90:	40020400 	.word	0x40020400
 8000d94:	08008738 	.word	0x08008738
 8000d98:	08000dd5 	.word	0x08000dd5
 8000d9c:	20006cd8 	.word	0x20006cd8
 8000da0:	0800875c 	.word	0x0800875c
 8000da4:	08000e45 	.word	0x08000e45
 8000da8:	20006cd4 	.word	0x20006cd4
 8000dac:	08008780 	.word	0x08008780
 8000db0:	08000eb5 	.word	0x08000eb5
 8000db4:	20006cdc 	.word	0x20006cdc
 8000db8:	20006cd0 	.word	0x20006cd0
 8000dbc:	0800869c 	.word	0x0800869c
 8000dc0:	20004ab8 	.word	0x20004ab8
 8000dc4:	20005c08 	.word	0x20005c08
 8000dc8:	20004ac4 	.word	0x20004ac4
 8000dcc:	20000030 	.word	0x20000030
 8000dd0:	2000003c 	.word	0x2000003c

08000dd4 <tsksQSendTrigger>:
/*
 * UART2 DMA Transmit Trigger
 * DMA1 Stream 5: RX, DMA1 Stream 6 : TX
 */
void tsksQSendTrigger(void *argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	mQueue messageQueue;

	while(1)
	{
		if(osMessageQueueGet(sQsend, &messageQueue, NULL, NULL) == osOK){
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <tsksQSendTrigger+0x60>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	f107 010c 	add.w	r1, r7, #12
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	f003 feb2 	bl	8004b50 <osMessageQueueGet>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f4      	bne.n	8000ddc <tsksQSendTrigger+0x8>
			HAL_UART_Transmit_DMA(&huart2, messageQueue.start, messageQueue.size);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	b292      	uxth	r2, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480f      	ldr	r0, [pc, #60]	; (8000e38 <tsksQSendTrigger+0x64>)
 8000dfc:	f002 fde0 	bl	80039c0 <HAL_UART_Transmit_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart2_tx, DMA_IT_HT);//disable HT interrupt
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <tsksQSendTrigger+0x68>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <tsksQSendTrigger+0x68>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0208 	bic.w	r2, r2, #8
 8000e0e:	601a      	str	r2, [r3, #0]
#ifdef __DEBUG_S2ECORE__
			printf("sQsend DMA send:%d\r\n",messageQueue.size);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4619      	mov	r1, r3
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <tsksQSendTrigger+0x6c>)
 8000e16:	f006 fcbf 	bl	8007798 <iprintf>
#endif
			while(hdma_usart2_tx.State != HAL_DMA_STATE_READY){}
 8000e1a:	bf00      	nop
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <tsksQSendTrigger+0x68>)
 8000e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d1f9      	bne.n	8000e1c <tsksQSendTrigger+0x48>
			//Free here
			vPortFree(messageQueue.start);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 faaa 	bl	8007384 <vPortFree>
		if(osMessageQueueGet(sQsend, &messageQueue, NULL, NULL) == osOK){
 8000e30:	e7d4      	b.n	8000ddc <tsksQSendTrigger+0x8>
 8000e32:	bf00      	nop
 8000e34:	20005c08 	.word	0x20005c08
 8000e38:	20005c90 	.word	0x20005c90
 8000e3c:	20004b68 	.word	0x20004b68
 8000e40:	080086a8 	.word	0x080086a8

08000e44 <tskeQSendTrigger>:
/*
 * UART6 DMA Transmit Trigger
 * DMA2 Stream 1: RX, DMA2 Stream 6 : TX
 */
void tskeQSendTrigger(void *argument)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	mQueue messageQueue;

	while(1)
	{
		if(osMessageQueueGet(eQsend, &messageQueue, NULL, NULL) == osOK){//DMA2 Stream 6 : TX
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <tskeQSendTrigger+0x60>)
 8000e4e:	6818      	ldr	r0, [r3, #0]
 8000e50:	f107 010c 	add.w	r1, r7, #12
 8000e54:	2300      	movs	r3, #0
 8000e56:	2200      	movs	r2, #0
 8000e58:	f003 fe7a 	bl	8004b50 <osMessageQueueGet>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f4      	bne.n	8000e4c <tskeQSendTrigger+0x8>
			HAL_UART_Transmit_DMA(&huart6, messageQueue.start, messageQueue.size);
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	b292      	uxth	r2, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <tskeQSendTrigger+0x64>)
 8000e6c:	f002 fda8 	bl	80039c0 <HAL_UART_Transmit_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart6_tx, DMA_IT_HT);//disable HT interrupt
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <tskeQSendTrigger+0x68>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <tskeQSendTrigger+0x68>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0208 	bic.w	r2, r2, #8
 8000e7e:	601a      	str	r2, [r3, #0]
#ifdef __DEBUG_S2ECORE__
			printf("eQsend DMA send:%d\r\n",messageQueue.size);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4619      	mov	r1, r3
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <tskeQSendTrigger+0x6c>)
 8000e86:	f006 fc87 	bl	8007798 <iprintf>
#endif
			while(hdma_usart6_tx.State != HAL_DMA_STATE_READY){}
 8000e8a:	bf00      	nop
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <tskeQSendTrigger+0x68>)
 8000e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d1f9      	bne.n	8000e8c <tskeQSendTrigger+0x48>
			//Free here
			vPortFree(messageQueue.start);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 fa72 	bl	8007384 <vPortFree>
		if(osMessageQueueGet(eQsend, &messageQueue, NULL, NULL) == osOK){//DMA2 Stream 6 : TX
 8000ea0:	e7d4      	b.n	8000e4c <tskeQSendTrigger+0x8>
 8000ea2:	bf00      	nop
 8000ea4:	20004ac4 	.word	0x20004ac4
 8000ea8:	20005c10 	.word	0x20005c10
 8000eac:	20004b08 	.word	0x20004b08
 8000eb0:	080086c0 	.word	0x080086c0

08000eb4 <tskLED>:
		}
	}
}

void tskLED(void *argument){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	while(1){
		osDelay(100);
 8000ebc:	2064      	movs	r0, #100	; 0x64
 8000ebe:	f003 fd1f 	bl	8004900 <osDelay>
		HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <tskLED+0x2c>)
 8000ec8:	f001 fbce 	bl	8002668 <HAL_GPIO_WritePin>
		osDelay(100);
 8000ecc:	2064      	movs	r0, #100	; 0x64
 8000ece:	f003 fd17 	bl	8004900 <osDelay>
		HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <tskLED+0x2c>)
 8000ed8:	f001 fbc6 	bl	8002668 <HAL_GPIO_WritePin>
		osDelay(100);
 8000edc:	e7ee      	b.n	8000ebc <tskLED+0x8>
 8000ede:	bf00      	nop
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_CRC_MspInit+0x3c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023000 	.word	0x40023000
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f88:	d116      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_TIM_Base_MspInit+0x80>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_TIM_Base_MspInit+0x80>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_TIM_Base_MspInit+0x80>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	201c      	movs	r0, #28
 8000fac:	f000 ff40 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f000 ff59 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fb6:	e01a      	b.n	8000fee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_TIM_Base_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d115      	bne.n	8000fee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_TIM_Base_MspInit+0x80>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_TIM_Base_MspInit+0x80>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_TIM_Base_MspInit+0x80>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	201d      	movs	r0, #29
 8000fe4:	f000 ff24 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe8:	201d      	movs	r0, #29
 8000fea:	f000 ff3d 	bl	8001e68 <HAL_NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40000400 	.word	0x40000400

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a64      	ldr	r2, [pc, #400]	; (80011b0 <HAL_UART_MspInit+0x1b0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12d      	bne.n	800107e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	623b      	str	r3, [r7, #32]
 800103c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a5b      	ldr	r2, [pc, #364]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 800105a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800106c:	2307      	movs	r3, #7
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	4850      	ldr	r0, [pc, #320]	; (80011b8 <HAL_UART_MspInit+0x1b8>)
 8001078:	f001 f974 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800107c:	e141      	b.n	8001302 <HAL_UART_MspInit+0x302>
  else if(huart->Instance==USART2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_UART_MspInit+0x1bc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	f040 80a3 	bne.w	80011d0 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a41      	ldr	r2, [pc, #260]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <HAL_UART_MspInit+0x1b4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Serial_TX_Pin|Serial_RX_Pin;
 80010c2:	230c      	movs	r3, #12
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d2:	2307      	movs	r3, #7
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4836      	ldr	r0, [pc, #216]	; (80011b8 <HAL_UART_MspInit+0x1b8>)
 80010de:	f001 f941 	bl	8002364 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 80010e4:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <HAL_UART_MspInit+0x1c4>)
 80010e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 80010ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001102:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 8001118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001124:	4826      	ldr	r0, [pc, #152]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 8001126:	f000 fec9 	bl	8001ebc <HAL_DMA_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8001130:	f7ff fd60 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <HAL_UART_MspInit+0x1c0>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_UART_MspInit+0x1cc>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001148:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001150:	2240      	movs	r2, #64	; 0x40
 8001152:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 800115c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001160:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001184:	f000 fe9a 	bl	8001ebc <HAL_DMA_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_UART_MspInit+0x192>
      Error_Handler();
 800118e:	f7ff fd31 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_UART_MspInit+0x1c8>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2026      	movs	r0, #38	; 0x26
 80011a4:	f000 fe44 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011a8:	2026      	movs	r0, #38	; 0x26
 80011aa:	f000 fe5d 	bl	8001e68 <HAL_NVIC_EnableIRQ>
}
 80011ae:	e0a8      	b.n	8001302 <HAL_UART_MspInit+0x302>
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40004400 	.word	0x40004400
 80011c0:	200049f8 	.word	0x200049f8
 80011c4:	40026088 	.word	0x40026088
 80011c8:	20004b68 	.word	0x20004b68
 80011cc:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART6)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4d      	ldr	r2, [pc, #308]	; (800130c <HAL_UART_MspInit+0x30c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	f040 8093 	bne.w	8001302 <HAL_UART_MspInit+0x302>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_UART_MspInit+0x310>)
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_UART_MspInit+0x310>)
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	6453      	str	r3, [r2, #68]	; 0x44
 80011ec:	4b48      	ldr	r3, [pc, #288]	; (8001310 <HAL_UART_MspInit+0x310>)
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f003 0320 	and.w	r3, r3, #32
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b44      	ldr	r3, [pc, #272]	; (8001310 <HAL_UART_MspInit+0x310>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a43      	ldr	r2, [pc, #268]	; (8001310 <HAL_UART_MspInit+0x310>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <HAL_UART_MspInit+0x310>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wizfi_TX_Pin|Wizfi_RX_Pin;
 8001214:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001226:	2308      	movs	r3, #8
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4838      	ldr	r0, [pc, #224]	; (8001314 <HAL_UART_MspInit+0x314>)
 8001232:	f001 f897 	bl	8002364 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <HAL_UART_MspInit+0x318>)
 8001238:	4a38      	ldr	r2, [pc, #224]	; (800131c <HAL_UART_MspInit+0x31c>)
 800123a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_UART_MspInit+0x318>)
 800123e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001242:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001244:	4b34      	ldr	r3, [pc, #208]	; (8001318 <HAL_UART_MspInit+0x318>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_UART_MspInit+0x318>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <HAL_UART_MspInit+0x318>)
 8001252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001256:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_UART_MspInit+0x318>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125e:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <HAL_UART_MspInit+0x318>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_UART_MspInit+0x318>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_UART_MspInit+0x318>)
 800126c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001270:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_UART_MspInit+0x318>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001278:	4827      	ldr	r0, [pc, #156]	; (8001318 <HAL_UART_MspInit+0x318>)
 800127a:	f000 fe1f 	bl	8001ebc <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_UART_MspInit+0x288>
      Error_Handler();
 8001284:	f7ff fcb6 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <HAL_UART_MspInit+0x318>)
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <HAL_UART_MspInit+0x318>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_UART_MspInit+0x320>)
 8001296:	4a23      	ldr	r2, [pc, #140]	; (8001324 <HAL_UART_MspInit+0x324>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_UART_MspInit+0x320>)
 800129c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80012a0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012a4:	2240      	movs	r2, #64	; 0x40
 80012a6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ce:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012d8:	f000 fdf0 	bl	8001ebc <HAL_DMA_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 80012e2:	f7ff fc87 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_UART_MspInit+0x320>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2047      	movs	r0, #71	; 0x47
 80012f8:	f000 fd9a 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012fc:	2047      	movs	r0, #71	; 0x47
 80012fe:	f000 fdb3 	bl	8001e68 <HAL_NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3738      	adds	r7, #56	; 0x38
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40011400 	.word	0x40011400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	20004a58 	.word	0x20004a58
 800131c:	40026428 	.word	0x40026428
 8001320:	20004b08 	.word	0x20004b08
 8001324:	400264a0 	.word	0x400264a0

08001328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	2032      	movs	r0, #50	; 0x32
 800133e:	f000 fd77 	bl	8001e30 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001342:	2032      	movs	r0, #50	; 0x32
 8001344:	f000 fd90 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_InitTick+0xa4>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_InitTick+0xa4>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_InitTick+0xa4>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001364:	f107 0210 	add.w	r2, r7, #16
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fe10 	bl	8002f94 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001374:	f001 fde6 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8001378:	4603      	mov	r3, r0
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_InitTick+0xa8>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0c9b      	lsrs	r3, r3, #18
 8001388:	3b01      	subs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_InitTick+0xac>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_InitTick+0xb0>)
 8001390:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_InitTick+0xac>)
 8001394:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001398:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_InitTick+0xac>)
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_InitTick+0xac>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_InitTick+0xac>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80013ac:	4809      	ldr	r0, [pc, #36]	; (80013d4 <HAL_InitTick+0xac>)
 80013ae:	f001 fe23 	bl	8002ff8 <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d104      	bne.n	80013c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <HAL_InitTick+0xac>)
 80013ba:	f001 fe48 	bl	800304e <HAL_TIM_Base_Start_IT>
 80013be:	4603      	mov	r3, r0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	431bde83 	.word	0x431bde83
 80013d4:	20006ce0 	.word	0x20006ce0
 80013d8:	40000c00 	.word	0x40000c00

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	//this for the UART2 RX DMA interrupt
	osStatus_t osStatus;
	mQueue qItem;
	HAL_TIM_Base_Stop_IT(&htim2);
 8001416:	484d      	ldr	r0, [pc, #308]	; (800154c <DMA1_Stream5_IRQHandler+0x13c>)
 8001418:	f001 fe3d 	bl	8003096 <HAL_TIM_Base_Stop_IT>
	qItem.size = u32S2ECurrDMASize - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <DMA1_Stream5_IRQHandler+0x140>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	603b      	str	r3, [r7, #0]
	qItem.start = u8S2EBuffer + u32S2EBufLoc;
 800142a:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a4b      	ldr	r2, [pc, #300]	; (800155c <DMA1_Stream5_IRQHandler+0x14c>)
 8001430:	4413      	add	r3, r2
 8001432:	607b      	str	r3, [r7, #4]
	qItem.isSplit = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	723b      	strb	r3, [r7, #8]
	osStatus = osMessageQueuePut(sQrecv, &qItem, NULL, NULL);
 8001438:	4b49      	ldr	r3, [pc, #292]	; (8001560 <DMA1_Stream5_IRQHandler+0x150>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	4639      	mov	r1, r7
 800143e:	2300      	movs	r3, #0
 8001440:	2200      	movs	r2, #0
 8001442:	f003 fb11 	bl	8004a68 <osMessageQueuePut>
 8001446:	60f8      	str	r0, [r7, #12]
	u32S2EBufLoc += qItem.size;
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 8001452:	6013      	str	r3, [r2, #0]
	if(u32S2EBufLoc == QUEUE_BUFFER_RX_SIZE)
 8001454:	4b40      	ldr	r3, [pc, #256]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800145c:	d102      	bne.n	8001464 <DMA1_Stream5_IRQHandler+0x54>
		u32S2EBufLoc = 0;
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

	HAL_UART_DMAStop(&huart2);
 8001464:	483f      	ldr	r0, [pc, #252]	; (8001564 <DMA1_Stream5_IRQHandler+0x154>)
 8001466:	f002 fbe8 	bl	8003c3a <HAL_UART_DMAStop>
//	huart2.RxState = HAL_UART_STATE_READY;
//	hdma_usart2_rx.State = HAL_DMA_STATE_READY;
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);//Peter Enable "Receive data register not empty" interrupt
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <DMA1_Stream5_IRQHandler+0x154>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <DMA1_Stream5_IRQHandler+0x154>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0220 	orr.w	r2, r2, #32
 8001478:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);//clear flag
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <DMA1_Stream5_IRQHandler+0x154>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0220 	mvn.w	r2, #32
 8001482:	601a      	str	r2, [r3, #0]

	if(u32S2EBufLoc + E_BUFFER_SIZE > QUEUE_BUFFER_RX_SIZE)
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800148c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001490:	d919      	bls.n	80014c6 <DMA1_Stream5_IRQHandler+0xb6>
	{
		u32S2ECurrDMASize = QUEUE_BUFFER_RX_SIZE - u32S2EBufLoc;//
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800149a:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <DMA1_Stream5_IRQHandler+0x140>)
 800149c:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart2, u8S2EBuffer + u32S2EBufLoc, u32S2ECurrDMASize);
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <DMA1_Stream5_IRQHandler+0x14c>)
 80014a4:	1899      	adds	r1, r3, r2
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <DMA1_Stream5_IRQHandler+0x140>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	482d      	ldr	r0, [pc, #180]	; (8001564 <DMA1_Stream5_IRQHandler+0x154>)
 80014b0:	f002 faf2 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//disable HT interrupt
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0208 	bic.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e016      	b.n	80014f4 <DMA1_Stream5_IRQHandler+0xe4>
//		__HAL_DMA_SET_MAR(&hdma_usart2_rx, u8S2EBuffer + u32S2EBufLoc + qItem.size);
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}
	else
	{
		u32S2ECurrDMASize = E_BUFFER_SIZE;
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <DMA1_Stream5_IRQHandler+0x140>)
 80014c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014cc:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart2, u8S2EBuffer + u32S2EBufLoc, u32S2ECurrDMASize);
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <DMA1_Stream5_IRQHandler+0x148>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a22      	ldr	r2, [pc, #136]	; (800155c <DMA1_Stream5_IRQHandler+0x14c>)
 80014d4:	1899      	adds	r1, r3, r2
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <DMA1_Stream5_IRQHandler+0x140>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	4821      	ldr	r0, [pc, #132]	; (8001564 <DMA1_Stream5_IRQHandler+0x154>)
 80014e0:	f002 fada 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//disable HT interrupt
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0208 	bic.w	r2, r2, #8
 80014f2:	601a      	str	r2, [r3, #0]
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	HAL_UART_DMAResume(&huart2);
 80014f4:	481b      	ldr	r0, [pc, #108]	; (8001564 <DMA1_Stream5_IRQHandler+0x154>)
 80014f6:	f002 fb4f 	bl	8003b98 <HAL_UART_DMAResume>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, DMA_FLAG_TCIF1_5);
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <DMA1_Stream5_IRQHandler+0x158>)
 8001502:	429a      	cmp	r2, r3
 8001504:	d904      	bls.n	8001510 <DMA1_Stream5_IRQHandler+0x100>
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <DMA1_Stream5_IRQHandler+0x15c>)
 8001508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150c:	60da      	str	r2, [r3, #12]
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800150e:	e019      	b.n	8001544 <DMA1_Stream5_IRQHandler+0x134>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, DMA_FLAG_TCIF1_5);
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <DMA1_Stream5_IRQHandler+0x160>)
 8001518:	429a      	cmp	r2, r3
 800151a:	d904      	bls.n	8001526 <DMA1_Stream5_IRQHandler+0x116>
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <DMA1_Stream5_IRQHandler+0x15c>)
 800151e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	e00e      	b.n	8001544 <DMA1_Stream5_IRQHandler+0x134>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, DMA_FLAG_TCIF1_5);
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <DMA1_Stream5_IRQHandler+0x144>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <DMA1_Stream5_IRQHandler+0x164>)
 800152e:	429a      	cmp	r2, r3
 8001530:	d904      	bls.n	800153c <DMA1_Stream5_IRQHandler+0x12c>
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <DMA1_Stream5_IRQHandler+0x168>)
 8001534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001538:	60da      	str	r2, [r3, #12]
}
 800153a:	e003      	b.n	8001544 <DMA1_Stream5_IRQHandler+0x134>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_rx, DMA_FLAG_TCIF1_5);
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <DMA1_Stream5_IRQHandler+0x168>)
 800153e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001542:	609a      	str	r2, [r3, #8]
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20005c50 	.word	0x20005c50
 8001550:	20000000 	.word	0x20000000
 8001554:	200049f8 	.word	0x200049f8
 8001558:	200000d8 	.word	0x200000d8
 800155c:	20005cd0 	.word	0x20005cd0
 8001560:	20004ab8 	.word	0x20004ab8
 8001564:	20005c90 	.word	0x20005c90
 8001568:	40026458 	.word	0x40026458
 800156c:	40026400 	.word	0x40026400
 8001570:	400260b8 	.word	0x400260b8
 8001574:	40026058 	.word	0x40026058
 8001578:	40026000 	.word	0x40026000

0800157c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	//HAL_UART_DMAStop(&huart2);
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
	huart2.gState = HAL_UART_STATE_READY;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <DMA1_Stream6_IRQHandler+0x70>)
 8001582:	2220      	movs	r2, #32
 8001584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	__HAL_UNLOCK(&hdma_usart2_tx);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <DMA1_Stream6_IRQHandler+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hdma_usart2_tx.State = HAL_DMA_STATE_READY;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <DMA1_Stream6_IRQHandler+0x74>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <DMA1_Stream6_IRQHandler+0x74>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <DMA1_Stream6_IRQHandler+0x78>)
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d904      	bls.n	80015ae <DMA1_Stream6_IRQHandler+0x32>
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <DMA1_Stream6_IRQHandler+0x7c>)
 80015a6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80015aa:	60da      	str	r2, [r3, #12]
  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015ac:	e019      	b.n	80015e2 <DMA1_Stream6_IRQHandler+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <DMA1_Stream6_IRQHandler+0x74>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <DMA1_Stream6_IRQHandler+0x80>)
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d904      	bls.n	80015c4 <DMA1_Stream6_IRQHandler+0x48>
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <DMA1_Stream6_IRQHandler+0x7c>)
 80015bc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80015c0:	609a      	str	r2, [r3, #8]
}
 80015c2:	e00e      	b.n	80015e2 <DMA1_Stream6_IRQHandler+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <DMA1_Stream6_IRQHandler+0x74>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <DMA1_Stream6_IRQHandler+0x84>)
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d904      	bls.n	80015da <DMA1_Stream6_IRQHandler+0x5e>
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <DMA1_Stream6_IRQHandler+0x88>)
 80015d2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80015d6:	60da      	str	r2, [r3, #12]
}
 80015d8:	e003      	b.n	80015e2 <DMA1_Stream6_IRQHandler+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <DMA1_Stream6_IRQHandler+0x88>)
 80015dc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80015e0:	609a      	str	r2, [r3, #8]
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20005c90 	.word	0x20005c90
 80015f0:	20004b68 	.word	0x20004b68
 80015f4:	40026458 	.word	0x40026458
 80015f8:	40026400 	.word	0x40026400
 80015fc:	400260b8 	.word	0x400260b8
 8001600:	40026058 	.word	0x40026058
 8001604:	40026000 	.word	0x40026000

08001608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	osStatus_t osStatus;
	mQueue qItem;
	HAL_TIM_Base_Stop_IT(&htim2);
 800160e:	4839      	ldr	r0, [pc, #228]	; (80016f4 <TIM2_IRQHandler+0xec>)
 8001610:	f001 fd41 	bl	8003096 <HAL_TIM_Base_Stop_IT>
	qItem.size = u32S2ECurrDMASize - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <TIM2_IRQHandler+0xf0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b38      	ldr	r3, [pc, #224]	; (80016fc <TIM2_IRQHandler+0xf4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	603b      	str	r3, [r7, #0]
	qItem.start = u8S2EBuffer + u32S2EBufLoc;
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <TIM2_IRQHandler+0xf8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <TIM2_IRQHandler+0xfc>)
 8001628:	4413      	add	r3, r2
 800162a:	607b      	str	r3, [r7, #4]
	qItem.isSplit = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	723b      	strb	r3, [r7, #8]
	osStatus = osMessageQueuePut(sQrecv, &qItem, NULL, NULL);//Need to be checked.
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <TIM2_IRQHandler+0x100>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	4639      	mov	r1, r7
 8001636:	2300      	movs	r3, #0
 8001638:	2200      	movs	r2, #0
 800163a:	f003 fa15 	bl	8004a68 <osMessageQueuePut>
 800163e:	60f8      	str	r0, [r7, #12]
	u32S2EBufLoc += qItem.size;
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <TIM2_IRQHandler+0xf8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <TIM2_IRQHandler+0xf8>)
 800164a:	6013      	str	r3, [r2, #0]

	HAL_UART_DMAStop(&huart2);
 800164c:	482f      	ldr	r0, [pc, #188]	; (800170c <TIM2_IRQHandler+0x104>)
 800164e:	f002 faf4 	bl	8003c3a <HAL_UART_DMAStop>
//	huart2.RxState = HAL_UART_STATE_READY;
//	hdma_usart2_rx.State = HAL_DMA_STATE_READY;
//	__HAL_UNLOCK(&hdma_usart2_rx);

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);//Peter Enable "Receive data register not empty" interrupt
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <TIM2_IRQHandler+0x104>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <TIM2_IRQHandler+0x104>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0220 	orr.w	r2, r2, #32
 8001660:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);//clear flag
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <TIM2_IRQHandler+0x104>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f06f 0220 	mvn.w	r2, #32
 800166a:	601a      	str	r2, [r3, #0]

	if(u32S2EBufLoc + E_BUFFER_SIZE > QUEUE_BUFFER_RX_SIZE)
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <TIM2_IRQHandler+0xf8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001678:	d919      	bls.n	80016ae <TIM2_IRQHandler+0xa6>
	{
		u32S2ECurrDMASize = QUEUE_BUFFER_RX_SIZE - u32S2EBufLoc;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <TIM2_IRQHandler+0xf8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <TIM2_IRQHandler+0xf0>)
 8001684:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart2, u8S2EBuffer + u32S2EBufLoc, u32S2ECurrDMASize);
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <TIM2_IRQHandler+0xf8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <TIM2_IRQHandler+0xfc>)
 800168c:	1899      	adds	r1, r3, r2
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <TIM2_IRQHandler+0xf0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	481d      	ldr	r0, [pc, #116]	; (800170c <TIM2_IRQHandler+0x104>)
 8001698:	f002 f9fe 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//disable HT interrupt
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <TIM2_IRQHandler+0xf4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <TIM2_IRQHandler+0xf4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0208 	bic.w	r2, r2, #8
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e016      	b.n	80016dc <TIM2_IRQHandler+0xd4>
//		__HAL_DMA_SET_MAR(&hdma_usart2_rx,u8S2EBuffer + u32S2EBufLoc);
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}
	else
	{
		u32S2ECurrDMASize = E_BUFFER_SIZE;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <TIM2_IRQHandler+0xf0>)
 80016b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b4:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart2, u8S2EBuffer + u32S2EBufLoc, u32S2ECurrDMASize);
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <TIM2_IRQHandler+0xf8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <TIM2_IRQHandler+0xfc>)
 80016bc:	1899      	adds	r1, r3, r2
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <TIM2_IRQHandler+0xf0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <TIM2_IRQHandler+0x104>)
 80016c8:	f002 f9e6 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//disable HT interrupt
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <TIM2_IRQHandler+0xf4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <TIM2_IRQHandler+0xf4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0208 	bic.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
//		__HAL_DMA_SET_MAR(&hdma_usart2_rx,u8S2EBuffer + u32S2EBufLoc);
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}
	HAL_UART_DMAResume(&huart2);
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <TIM2_IRQHandler+0x104>)
 80016de:	f002 fa5b 	bl	8003b98 <HAL_UART_DMAResume>
//	HAL_DMA_Abort(&hdma_usart2_rx);
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	__HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <TIM2_IRQHandler+0xec>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f06f 0201 	mvn.w	r2, #1
 80016ea:	611a      	str	r2, [r3, #16]
	//osKernelUnlock();
  /* USER CODE END TIM2_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20005c50 	.word	0x20005c50
 80016f8:	20000000 	.word	0x20000000
 80016fc:	200049f8 	.word	0x200049f8
 8001700:	200000d8 	.word	0x200000d8
 8001704:	20005cd0 	.word	0x20005cd0
 8001708:	20004ab8 	.word	0x20004ab8
 800170c:	20005c90 	.word	0x20005c90

08001710 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	osStatus_t osStatus;
	mQueue qItem;

	HAL_TIM_Base_Stop_IT(&htim3);
 8001716:	4839      	ldr	r0, [pc, #228]	; (80017fc <TIM3_IRQHandler+0xec>)
 8001718:	f001 fcbd 	bl	8003096 <HAL_TIM_Base_Stop_IT>

	qItem.size = u32E2SCurrDMASize - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <TIM3_IRQHandler+0xf0>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b38      	ldr	r3, [pc, #224]	; (8001804 <TIM3_IRQHandler+0xf4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	603b      	str	r3, [r7, #0]
	qItem.start = u8E2SBuffer + u32E2SBufLoc;
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <TIM3_IRQHandler+0xf8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a37      	ldr	r2, [pc, #220]	; (800180c <TIM3_IRQHandler+0xfc>)
 8001730:	4413      	add	r3, r2
 8001732:	607b      	str	r3, [r7, #4]
	qItem.isSplit = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	723b      	strb	r3, [r7, #8]
	osStatus = osMessageQueuePut(eQrecv, &qItem, NULL, NULL);//Need to be checked.
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <TIM3_IRQHandler+0x100>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	4639      	mov	r1, r7
 800173e:	2300      	movs	r3, #0
 8001740:	2200      	movs	r2, #0
 8001742:	f003 f991 	bl	8004a68 <osMessageQueuePut>
 8001746:	60f8      	str	r0, [r7, #12]
	u32E2SBufLoc += qItem.size;
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <TIM3_IRQHandler+0xf8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <TIM3_IRQHandler+0xf8>)
 8001752:	6013      	str	r3, [r2, #0]

	HAL_UART_DMAStop(&huart6);
 8001754:	482f      	ldr	r0, [pc, #188]	; (8001814 <TIM3_IRQHandler+0x104>)
 8001756:	f002 fa70 	bl	8003c3a <HAL_UART_DMAStop>
//	huart6.RxState = HAL_UART_STATE_READY;
//	hdma_usart6_rx.State = HAL_DMA_STATE_READY;
//	__HAL_UNLOCK(&hdma_usart6_rx);
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);//Peter Enable "Receive data register not empty" interrupt
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <TIM3_IRQHandler+0x104>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <TIM3_IRQHandler+0x104>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);//clear flag
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <TIM3_IRQHandler+0x104>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f06f 0220 	mvn.w	r2, #32
 8001772:	601a      	str	r2, [r3, #0]

	if(u32E2SBufLoc + E_BUFFER_SIZE > QUEUE_BUFFER_TX_SIZE)//if
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <TIM3_IRQHandler+0xf8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800177c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001780:	d919      	bls.n	80017b6 <TIM3_IRQHandler+0xa6>
	{
		u32E2SCurrDMASize = QUEUE_BUFFER_TX_SIZE - u32E2SBufLoc;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <TIM3_IRQHandler+0xf8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800178a:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <TIM3_IRQHandler+0xf0>)
 800178c:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart6, u8E2SBuffer + u32E2SBufLoc, u32E2SCurrDMASize);
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <TIM3_IRQHandler+0xf8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <TIM3_IRQHandler+0xfc>)
 8001794:	1899      	adds	r1, r3, r2
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <TIM3_IRQHandler+0xf0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	481d      	ldr	r0, [pc, #116]	; (8001814 <TIM3_IRQHandler+0x104>)
 80017a0:	f002 f97a 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);//disable HT interrupt
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <TIM3_IRQHandler+0xf4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <TIM3_IRQHandler+0xf4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0208 	bic.w	r2, r2, #8
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e016      	b.n	80017e4 <TIM3_IRQHandler+0xd4>
//		__HAL_DMA_SET_MAR(&hdma_usart2_rx,u8S2EBuffer + u32S2EBufLoc);
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}
	else
	{
		u32E2SCurrDMASize = E_BUFFER_SIZE;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <TIM3_IRQHandler+0xf0>)
 80017b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017bc:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart6, u8E2SBuffer + u32E2SBufLoc, u32E2SCurrDMASize);
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <TIM3_IRQHandler+0xf8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <TIM3_IRQHandler+0xfc>)
 80017c4:	1899      	adds	r1, r3, r2
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <TIM3_IRQHandler+0xf0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4811      	ldr	r0, [pc, #68]	; (8001814 <TIM3_IRQHandler+0x104>)
 80017d0:	f002 f962 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);//disable HT interrupt
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <TIM3_IRQHandler+0xf4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <TIM3_IRQHandler+0xf4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0208 	bic.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
//		__HAL_DMA_SET_MAR(&hdma_usart2_rx,u8S2EBuffer + u32S2EBufLoc);
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}
	HAL_UART_DMAResume(&huart6);
 80017e4:	480b      	ldr	r0, [pc, #44]	; (8001814 <TIM3_IRQHandler+0x104>)
 80017e6:	f002 f9d7 	bl	8003b98 <HAL_UART_DMAResume>


  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
	__HAL_TIM_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <TIM3_IRQHandler+0xec>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f06f 0201 	mvn.w	r2, #1
 80017f2:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM3_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20004ac8 	.word	0x20004ac8
 8001800:	20000004 	.word	0x20000004
 8001804:	20004a58 	.word	0x20004a58
 8001808:	200000dc 	.word	0x200000dc
 800180c:	20004c08 	.word	0x20004c08
 8001810:	20006cd0 	.word	0x20006cd0
 8001814:	20005c10 	.word	0x20005c10

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//osKernelLock();
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
	__HAL_TIM_SET_COUNTER(&htim2,0);	// set counter 0
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <USART2_IRQHandler+0x20>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);	// start timer
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <USART2_IRQHandler+0x20>)
 8001826:	f001 fc12 	bl	800304e <HAL_TIM_Base_Start_IT>

  __HAL_UART_CLEAR_FLAG(&huart2,UART_FLAG_RXNE|UART_FLAG_ORE);
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <USART2_IRQHandler+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f06f 0228 	mvn.w	r2, #40	; 0x28
 8001832:	601a      	str	r2, [r3, #0]
  //osKernelUnlock();
  /* USER CODE END USART2_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20005c50 	.word	0x20005c50
 800183c:	20005c90 	.word	0x20005c90

08001840 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM5_IRQHandler+0x10>)
 8001846:	f001 fc51 	bl	80030ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20006ce0 	.word	0x20006ce0

08001854 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	osStatus_t osStatus;
	mQueue qItem;
	HAL_TIM_Base_Stop_IT(&htim3);
 800185a:	484d      	ldr	r0, [pc, #308]	; (8001990 <DMA2_Stream1_IRQHandler+0x13c>)
 800185c:	f001 fc1b 	bl	8003096 <HAL_TIM_Base_Stop_IT>
	qItem.size = u32E2SCurrDMASize - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);
 8001860:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <DMA2_Stream1_IRQHandler+0x140>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	603b      	str	r3, [r7, #0]
	qItem.start = u8E2SBuffer + u32E2SBufLoc;
 800186e:	4b4b      	ldr	r3, [pc, #300]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001874:	4413      	add	r3, r2
 8001876:	607b      	str	r3, [r7, #4]
	qItem.isSplit = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	723b      	strb	r3, [r7, #8]
	osStatus = osMessageQueuePut(eQrecv, &qItem, NULL, NULL);//Need to be checked.
 800187c:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <DMA2_Stream1_IRQHandler+0x150>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	4639      	mov	r1, r7
 8001882:	2300      	movs	r3, #0
 8001884:	2200      	movs	r2, #0
 8001886:	f003 f8ef 	bl	8004a68 <osMessageQueuePut>
 800188a:	60f8      	str	r0, [r7, #12]
	u32E2SBufLoc += qItem.size;
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4b43      	ldr	r3, [pc, #268]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a41      	ldr	r2, [pc, #260]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 8001896:	6013      	str	r3, [r2, #0]
	if(u32E2SBufLoc == QUEUE_BUFFER_TX_SIZE)
 8001898:	4b40      	ldr	r3, [pc, #256]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a0:	d102      	bne.n	80018a8 <DMA2_Stream1_IRQHandler+0x54>
		u32E2SBufLoc = 0;
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

	HAL_UART_DMAStop(&huart6);
 80018a8:	483f      	ldr	r0, [pc, #252]	; (80019a8 <DMA2_Stream1_IRQHandler+0x154>)
 80018aa:	f002 f9c6 	bl	8003c3a <HAL_UART_DMAStop>
//	huart6.RxState = HAL_UART_STATE_READY;
//
//	hdma_usart6_rx.State = HAL_DMA_STATE_READY;
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);//Peter Enable "Receive data register not empty" interrupt
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <DMA2_Stream1_IRQHandler+0x154>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b3c      	ldr	r3, [pc, #240]	; (80019a8 <DMA2_Stream1_IRQHandler+0x154>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);//clear flag
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <DMA2_Stream1_IRQHandler+0x154>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f06f 0220 	mvn.w	r2, #32
 80018c6:	601a      	str	r2, [r3, #0]
//	__HAL_UNLOCK(&hdma_usart6_rx);

	if(u32E2SBufLoc + E_BUFFER_SIZE > QUEUE_BUFFER_TX_SIZE)
 80018c8:	4b34      	ldr	r3, [pc, #208]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d4:	d919      	bls.n	800190a <DMA2_Stream1_IRQHandler+0xb6>
	{
		u32E2SCurrDMASize = QUEUE_BUFFER_TX_SIZE - u32E2SBufLoc;
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80018de:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <DMA2_Stream1_IRQHandler+0x140>)
 80018e0:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart6, u8E2SBuffer + u32E2SBufLoc, u32E2SCurrDMASize);
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <DMA2_Stream1_IRQHandler+0x14c>)
 80018e8:	1899      	adds	r1, r3, r2
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <DMA2_Stream1_IRQHandler+0x140>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	482d      	ldr	r0, [pc, #180]	; (80019a8 <DMA2_Stream1_IRQHandler+0x154>)
 80018f4:	f002 f8d0 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);//disable HT interrupt
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0208 	bic.w	r2, r2, #8
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e016      	b.n	8001938 <DMA2_Stream1_IRQHandler+0xe4>
//		__HAL_DMA_SET_MAR(&hdma_usart2_rx,u8S2EBuffer + u32S2EBufLoc);
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}
	else
	{
		u32E2SCurrDMASize = E_BUFFER_SIZE;
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <DMA2_Stream1_IRQHandler+0x140>)
 800190c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001910:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart6, u8E2SBuffer + u32E2SBufLoc, u32E2SCurrDMASize);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <DMA2_Stream1_IRQHandler+0x148>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <DMA2_Stream1_IRQHandler+0x14c>)
 8001918:	1899      	adds	r1, r3, r2
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <DMA2_Stream1_IRQHandler+0x140>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	4821      	ldr	r0, [pc, #132]	; (80019a8 <DMA2_Stream1_IRQHandler+0x154>)
 8001924:	f002 f8b8 	bl	8003a98 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);//disable HT interrupt
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0208 	bic.w	r2, r2, #8
 8001936:	601a      	str	r2, [r3, #0]
//		__HAL_DMA_SET_MAR(&hdma_usart2_rx,u8S2EBuffer + u32S2EBufLoc);
//		__HAL_DMA_SET_COUNTER(&hdma_usart2_rx,u32S2ECurrDMASize);
	}
	HAL_UART_DMAResume(&huart6);
 8001938:	481b      	ldr	r0, [pc, #108]	; (80019a8 <DMA2_Stream1_IRQHandler+0x154>)
 800193a:	f002 f92d 	bl	8003b98 <HAL_UART_DMAResume>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_rx, DMA_FLAG_TCIF1_5|DMA_FLAG_HTIF1_5);
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <DMA2_Stream1_IRQHandler+0x158>)
 8001946:	429a      	cmp	r2, r3
 8001948:	d904      	bls.n	8001954 <DMA2_Stream1_IRQHandler+0x100>
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <DMA2_Stream1_IRQHandler+0x15c>)
 800194c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001950:	60da      	str	r2, [r3, #12]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001952:	e019      	b.n	8001988 <DMA2_Stream1_IRQHandler+0x134>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_rx, DMA_FLAG_TCIF1_5|DMA_FLAG_HTIF1_5);
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <DMA2_Stream1_IRQHandler+0x160>)
 800195c:	429a      	cmp	r2, r3
 800195e:	d904      	bls.n	800196a <DMA2_Stream1_IRQHandler+0x116>
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <DMA2_Stream1_IRQHandler+0x15c>)
 8001962:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	e00e      	b.n	8001988 <DMA2_Stream1_IRQHandler+0x134>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_rx, DMA_FLAG_TCIF1_5|DMA_FLAG_HTIF1_5);
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <DMA2_Stream1_IRQHandler+0x144>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <DMA2_Stream1_IRQHandler+0x164>)
 8001972:	429a      	cmp	r2, r3
 8001974:	d904      	bls.n	8001980 <DMA2_Stream1_IRQHandler+0x12c>
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <DMA2_Stream1_IRQHandler+0x168>)
 8001978:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800197c:	60da      	str	r2, [r3, #12]
}
 800197e:	e003      	b.n	8001988 <DMA2_Stream1_IRQHandler+0x134>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_rx, DMA_FLAG_TCIF1_5|DMA_FLAG_HTIF1_5);
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <DMA2_Stream1_IRQHandler+0x168>)
 8001982:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001986:	609a      	str	r2, [r3, #8]
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20004ac8 	.word	0x20004ac8
 8001994:	20000004 	.word	0x20000004
 8001998:	20004a58 	.word	0x20004a58
 800199c:	200000dc 	.word	0x200000dc
 80019a0:	20004c08 	.word	0x20004c08
 80019a4:	20006cd0 	.word	0x20006cd0
 80019a8:	20005c10 	.word	0x20005c10
 80019ac:	40026458 	.word	0x40026458
 80019b0:	40026400 	.word	0x40026400
 80019b4:	400260b8 	.word	0x400260b8
 80019b8:	40026058 	.word	0x40026058
 80019bc:	40026000 	.word	0x40026000

080019c0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	//HAL_UART_DMAStop(&huart6);
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
	//HAL_UART_DMAResume(&huart6);
	huart6.gState = HAL_UART_STATE_READY;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <DMA2_Stream6_IRQHandler+0x70>)
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	__HAL_UNLOCK(&hdma_usart6_tx);
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <DMA2_Stream6_IRQHandler+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hdma_usart6_tx.State = HAL_DMA_STATE_READY;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <DMA2_Stream6_IRQHandler+0x74>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <DMA2_Stream6_IRQHandler+0x74>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <DMA2_Stream6_IRQHandler+0x78>)
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d904      	bls.n	80019f2 <DMA2_Stream6_IRQHandler+0x32>
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <DMA2_Stream6_IRQHandler+0x7c>)
 80019ea:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80019ee:	60da      	str	r2, [r3, #12]
  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80019f0:	e019      	b.n	8001a26 <DMA2_Stream6_IRQHandler+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <DMA2_Stream6_IRQHandler+0x74>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <DMA2_Stream6_IRQHandler+0x80>)
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d904      	bls.n	8001a08 <DMA2_Stream6_IRQHandler+0x48>
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <DMA2_Stream6_IRQHandler+0x7c>)
 8001a00:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001a04:	609a      	str	r2, [r3, #8]
}
 8001a06:	e00e      	b.n	8001a26 <DMA2_Stream6_IRQHandler+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <DMA2_Stream6_IRQHandler+0x74>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <DMA2_Stream6_IRQHandler+0x84>)
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d904      	bls.n	8001a1e <DMA2_Stream6_IRQHandler+0x5e>
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <DMA2_Stream6_IRQHandler+0x88>)
 8001a16:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001a1a:	60da      	str	r2, [r3, #12]
}
 8001a1c:	e003      	b.n	8001a26 <DMA2_Stream6_IRQHandler+0x66>
	__HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6|DMA_FLAG_HTIF2_6);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <DMA2_Stream6_IRQHandler+0x88>)
 8001a20:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001a24:	609a      	str	r2, [r3, #8]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20005c10 	.word	0x20005c10
 8001a34:	20004b08 	.word	0x20004b08
 8001a38:	40026458 	.word	0x40026458
 8001a3c:	40026400 	.word	0x40026400
 8001a40:	400260b8 	.word	0x400260b8
 8001a44:	40026058 	.word	0x40026058
 8001a48:	40026000 	.word	0x40026000

08001a4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	__HAL_TIM_SET_COUNTER(&htim3,0);	// set counter 0
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <USART6_IRQHandler+0x20>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);	// start timer
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <USART6_IRQHandler+0x20>)
 8001a5a:	f001 faf8 	bl	800304e <HAL_TIM_Base_Start_IT>

	__HAL_UART_CLEAR_FLAG(&huart6,UART_FLAG_RXNE|UART_FLAG_ORE);
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <USART6_IRQHandler+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f06f 0228 	mvn.w	r2, #40	; 0x28
 8001a66:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20004ac8 	.word	0x20004ac8
 8001a70:	20005c10 	.word	0x20005c10

08001a74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
	}

return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f863 	bl	8000b94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x12>
	}
	return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_close>:

int _close(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_isatty>:

int _isatty(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return 1;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f005 fd14 	bl	80075ac <__errno>
 8001b84:	4602      	mov	r2, r0
 8001b86:	230c      	movs	r3, #12
 8001b88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20010000 	.word	0x20010000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	200000e0 	.word	0x200000e0
 8001bb8:	20006d68 	.word	0x20006d68

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <SystemInit+0x28>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <SystemInit+0x28>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SystemInit+0x28>)
 8001bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bee:	e003      	b.n	8001bf8 <LoopCopyDataInit>

08001bf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bf6:	3104      	adds	r1, #4

08001bf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c00:	d3f6      	bcc.n	8001bf0 <CopyDataInit>
  ldr  r2, =_sbss
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c04:	e002      	b.n	8001c0c <LoopFillZerobss>

08001c06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c08:	f842 3b04 	str.w	r3, [r2], #4

08001c0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c10:	d3f9      	bcc.n	8001c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c12:	f7ff ffd3 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f005 fccf 	bl	80075b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7fe fcb1 	bl	8000580 <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001c24:	0800886c 	.word	0x0800886c
  ldr  r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c2c:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8001c30:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8001c34:	20006d68 	.word	0x20006d68

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_Init+0x40>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_Init+0x40>)
 8001c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_Init+0x40>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f8d8 	bl	8001e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff fb5c 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f7ff f938 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000050 	.word	0x20000050
 8001ca4:	20006d20 	.word	0x20006d20

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20006d20 	.word	0x20006d20

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff4c 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e42:	f7ff ff61 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7ff ffb1 	bl	8001db4 <NVIC_EncodePriority>
 8001e52:	4602      	mov	r2, r0
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff80 	bl	8001d60 <__NVIC_SetPriority>
}
 8001e60:	bf00      	nop
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff54 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	795b      	ldrb	r3, [r3, #5]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff f844 	bl	8000f34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff feee 	bl	8001ca8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e099      	b.n	800200c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef8:	e00f      	b.n	8001f1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001efa:	f7ff fed5 	bl	8001ca8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d908      	bls.n	8001f1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2203      	movs	r2, #3
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e078      	b.n	800200c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e8      	bne.n	8001efa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_DMA_Init+0x158>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d107      	bne.n	8001f84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f023 0307 	bic.w	r3, r3, #7
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d117      	bne.n	8001fde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00e      	beq.n	8001fde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f955 	bl	8002270 <DMA_CheckFifoParam>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e016      	b.n	800200c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f90c 	bl	8002204 <DMA_CalcBaseAndBitshift>
 8001fec:	4603      	mov	r3, r0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	223f      	movs	r2, #63	; 0x3f
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	f010803f 	.word	0xf010803f

08002018 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_DMA_Start_IT+0x26>
 800203a:	2302      	movs	r3, #2
 800203c:	e040      	b.n	80020c0 <HAL_DMA_Start_IT+0xa8>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d12f      	bne.n	80020b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2202      	movs	r2, #2
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f89e 	bl	80021a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	223f      	movs	r2, #63	; 0x3f
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0216 	orr.w	r2, r2, #22
 8002086:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0208 	orr.w	r2, r2, #8
 800209e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e005      	b.n	80020be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
 80020bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020be:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020d6:	f7ff fde7 	bl	8001ca8 <HAL_GetTick>
 80020da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d008      	beq.n	80020fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e052      	b.n	80021a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0216 	bic.w	r2, r2, #22
 8002108:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002118:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_DMA_Abort+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0208 	bic.w	r2, r2, #8
 8002138:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214a:	e013      	b.n	8002174 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800214c:	f7ff fdac 	bl	8001ca8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b05      	cmp	r3, #5
 8002158:	d90c      	bls.n	8002174 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2203      	movs	r2, #3
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e015      	b.n	80021a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1e4      	bne.n	800214c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	223f      	movs	r2, #63	; 0x3f
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d108      	bne.n	80021e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021e6:	e007      	b.n	80021f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3b10      	subs	r3, #16
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <DMA_CalcBaseAndBitshift+0x64>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <DMA_CalcBaseAndBitshift+0x68>)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d909      	bls.n	8002246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	659a      	str	r2, [r3, #88]	; 0x58
 8002244:	e007      	b.n	8002256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	aaaaaaab 	.word	0xaaaaaaab
 800226c:	080087bc 	.word	0x080087bc

08002270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11f      	bne.n	80022ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d855      	bhi.n	800233c <DMA_CheckFifoParam+0xcc>
 8002290:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <DMA_CheckFifoParam+0x28>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022bb 	.word	0x080022bb
 80022a0:	080022a9 	.word	0x080022a9
 80022a4:	0800233d 	.word	0x0800233d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d045      	beq.n	8002340 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b8:	e042      	b.n	8002340 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c2:	d13f      	bne.n	8002344 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c8:	e03c      	b.n	8002344 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d2:	d121      	bne.n	8002318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d836      	bhi.n	8002348 <DMA_CheckFifoParam+0xd8>
 80022da:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <DMA_CheckFifoParam+0x70>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	080022f7 	.word	0x080022f7
 80022e8:	080022f1 	.word	0x080022f1
 80022ec:	08002309 	.word	0x08002309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	e02f      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d024      	beq.n	800234c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002306:	e021      	b.n	800234c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002310:	d11e      	bne.n	8002350 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002316:	e01b      	b.n	8002350 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d902      	bls.n	8002324 <DMA_CheckFifoParam+0xb4>
 800231e:	2b03      	cmp	r3, #3
 8002320:	d003      	beq.n	800232a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002322:	e018      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      break;
 8002328:	e015      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00e      	beq.n	8002354 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
      break;
 800233a:	e00b      	b.n	8002354 <DMA_CheckFifoParam+0xe4>
      break;
 800233c:	bf00      	nop
 800233e:	e00a      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;
 8002340:	bf00      	nop
 8002342:	e008      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;
 8002344:	bf00      	nop
 8002346:	e006      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;
 8002348:	bf00      	nop
 800234a:	e004      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;
 800234c:	bf00      	nop
 800234e:	e002      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;   
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;
 8002354:	bf00      	nop
    }
  } 
  
  return status; 
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d00b      	beq.n	80023be <HAL_GPIO_Init+0x5a>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b2:	2b11      	cmp	r3, #17
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b12      	cmp	r3, #18
 80023bc:	d130      	bne.n	8002420 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0xfc>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b12      	cmp	r3, #18
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_GPIO_Init+0x2e4>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a55      	ldr	r2, [pc, #340]	; (8002648 <HAL_GPIO_Init+0x2e4>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_GPIO_Init+0x2e4>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a51      	ldr	r2, [pc, #324]	; (800264c <HAL_GPIO_Init+0x2e8>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a48      	ldr	r2, [pc, #288]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_GPIO_Init+0x2f0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a46      	ldr	r2, [pc, #280]	; (8002658 <HAL_GPIO_Init+0x2f4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a45      	ldr	r2, [pc, #276]	; (800265c <HAL_GPIO_Init+0x2f8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a44      	ldr	r2, [pc, #272]	; (8002660 <HAL_GPIO_Init+0x2fc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4934      	ldr	r1, [pc, #208]	; (800264c <HAL_GPIO_Init+0x2e8>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_GPIO_Init+0x300>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025aa:	4a2e      	ldr	r2, [pc, #184]	; (8002664 <HAL_GPIO_Init+0x300>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025b0:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_GPIO_Init+0x300>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_GPIO_Init+0x300>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_GPIO_Init+0x300>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_GPIO_Init+0x300>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_GPIO_Init+0x300>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_GPIO_Init+0x300>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	3724      	adds	r7, #36	; 0x24
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40023800 	.word	0x40023800
 800264c:	40013800 	.word	0x40013800
 8002650:	40020000 	.word	0x40020000
 8002654:	40020400 	.word	0x40020400
 8002658:	40020800 	.word	0x40020800
 800265c:	40020c00 	.word	0x40020c00
 8002660:	40021000 	.word	0x40021000
 8002664:	40013c00 	.word	0x40013c00

08002668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002678:	787b      	ldrb	r3, [r7, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002684:	e003      	b.n	800268e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	041a      	lsls	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	619a      	str	r2, [r3, #24]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	401a      	ands	r2, r3
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d104      	bne.n	80026be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	041a      	lsls	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e25b      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d075      	beq.n	80027da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ee:	4ba3      	ldr	r3, [pc, #652]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d00c      	beq.n	8002714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fa:	4ba0      	ldr	r3, [pc, #640]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002702:	2b08      	cmp	r3, #8
 8002704:	d112      	bne.n	800272c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4b9d      	ldr	r3, [pc, #628]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002712:	d10b      	bne.n	800272c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	4b99      	ldr	r3, [pc, #612]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d05b      	beq.n	80027d8 <HAL_RCC_OscConfig+0x108>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d157      	bne.n	80027d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e236      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002734:	d106      	bne.n	8002744 <HAL_RCC_OscConfig+0x74>
 8002736:	4b91      	ldr	r3, [pc, #580]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a90      	ldr	r2, [pc, #576]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e01d      	b.n	8002780 <HAL_RCC_OscConfig+0xb0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x98>
 800274e:	4b8b      	ldr	r3, [pc, #556]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a8a      	ldr	r2, [pc, #552]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b88      	ldr	r3, [pc, #544]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a87      	ldr	r2, [pc, #540]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0xb0>
 8002768:	4b84      	ldr	r3, [pc, #528]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a83      	ldr	r2, [pc, #524]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b81      	ldr	r3, [pc, #516]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a80      	ldr	r2, [pc, #512]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fa8e 	bl	8001ca8 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff fa8a 	bl	8001ca8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1fb      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b76      	ldr	r3, [pc, #472]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0xc0>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fa7a 	bl	8001ca8 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff fa76 	bl	8001ca8 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1e7      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	4b6c      	ldr	r3, [pc, #432]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0xe8>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d063      	beq.n	80028ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f2:	4b62      	ldr	r3, [pc, #392]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d11c      	bne.n	8002838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b5f      	ldr	r3, [pc, #380]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d116      	bne.n	8002838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x152>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e1bb      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b56      	ldr	r3, [pc, #344]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4952      	ldr	r1, [pc, #328]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	e03a      	b.n	80028ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002840:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <HAL_RCC_OscConfig+0x2b0>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7ff fa2f 	bl	8001ca8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284e:	f7ff fa2b 	bl	8001ca8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e19c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	4b46      	ldr	r3, [pc, #280]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4940      	ldr	r1, [pc, #256]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_OscConfig+0x2b0>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7ff fa0e 	bl	8001ca8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002890:	f7ff fa0a 	bl	8001ca8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e17b      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d030      	beq.n	800291c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCC_OscConfig+0x2b4>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7ff f9ee 	bl	8001ca8 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d0:	f7ff f9ea 	bl	8001ca8 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e15b      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x200>
 80028ee:	e015      	b.n	800291c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x2b4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7ff f9d7 	bl	8001ca8 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fe:	f7ff f9d3 	bl	8001ca8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e144      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a0 	beq.w	8002a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_RCC_OscConfig+0x2ac>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x2b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d121      	bne.n	80029aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_RCC_OscConfig+0x2b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_RCC_OscConfig+0x2b8>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002972:	f7ff f999 	bl	8001ca8 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	e011      	b.n	800299e <HAL_RCC_OscConfig+0x2ce>
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	42470000 	.word	0x42470000
 8002984:	42470e80 	.word	0x42470e80
 8002988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298c:	f7ff f98c 	bl	8001ca8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0fd      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x4d4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
 80029b2:	4b7d      	ldr	r3, [pc, #500]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a7c      	ldr	r2, [pc, #496]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	e01c      	b.n	80029fa <HAL_RCC_OscConfig+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d10c      	bne.n	80029e2 <HAL_RCC_OscConfig+0x312>
 80029c8:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	4a76      	ldr	r2, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6713      	str	r3, [r2, #112]	; 0x70
 80029d4:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a73      	ldr	r2, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	e00b      	b.n	80029fa <HAL_RCC_OscConfig+0x32a>
 80029e2:	4b71      	ldr	r3, [pc, #452]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	4a70      	ldr	r2, [pc, #448]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6713      	str	r3, [r2, #112]	; 0x70
 80029ee:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a6d      	ldr	r2, [pc, #436]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d015      	beq.n	8002a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7ff f951 	bl	8001ca8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7ff f94d 	bl	8001ca8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0bc      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ee      	beq.n	8002a0a <HAL_RCC_OscConfig+0x33a>
 8002a2c:	e014      	b.n	8002a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f93b 	bl	8001ca8 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7ff f937 	bl	8001ca8 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0a6      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4c:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ee      	bne.n	8002a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a51      	ldr	r2, [pc, #324]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8092 	beq.w	8002b98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a74:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d05c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d141      	bne.n	8002b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a88:	4b48      	ldr	r3, [pc, #288]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7ff f90b 	bl	8001ca8 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7ff f907 	bl	8001ca8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e078      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	019b      	lsls	r3, r3, #6
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	061b      	lsls	r3, r3, #24
 8002ad8:	4933      	ldr	r1, [pc, #204]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ade:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f8e0 	bl	8001ca8 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7ff f8dc 	bl	8001ca8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e04d      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x41c>
 8002b0a:	e045      	b.n	8002b98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7ff f8c9 	bl	8001ca8 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7ff f8c5 	bl	8001ca8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e036      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x44a>
 8002b38:	e02e      	b.n	8002b98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e029      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_RCC_OscConfig+0x4d8>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d115      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b6e:	4013      	ands	r3, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10d      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	42470060 	.word	0x42470060

08002bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0cc      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d90c      	bls.n	8002bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0b8      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d020      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c04:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a52      	ldr	r2, [pc, #328]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	494d      	ldr	r1, [pc, #308]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d044      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d119      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e07f      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06f      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e067      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4934      	ldr	r1, [pc, #208]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca0:	f7ff f802 	bl	8001ca8 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7fe fffe 	bl	8001ca8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e04f      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 020c 	and.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1eb      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d20c      	bcs.n	8002cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e032      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4916      	ldr	r1, [pc, #88]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	490e      	ldr	r1, [pc, #56]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d36:	f000 f821 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fae6 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023c00 	.word	0x40023c00
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	080087a4 	.word	0x080087a4
 8002d74:	20000048 	.word	0x20000048
 8002d78:	2000004c 	.word	0x2000004c

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d007      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x32>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d008      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x38>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 80b4 	bne.w	8002f10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b5e      	ldr	r3, [pc, #376]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002daa:	60bb      	str	r3, [r7, #8]
       break;
 8002dac:	e0b3      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002db0:	60bb      	str	r3, [r7, #8]
      break;
 8002db2:	e0b0      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04a      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	ea03 0501 	and.w	r5, r3, r1
 8002de0:	ea04 0602 	and.w	r6, r4, r2
 8002de4:	4629      	mov	r1, r5
 8002de6:	4632      	mov	r2, r6
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	0154      	lsls	r4, r2, #5
 8002df2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002df6:	014b      	lsls	r3, r1, #5
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	1b49      	subs	r1, r1, r5
 8002dfe:	eb62 0206 	sbc.w	r2, r2, r6
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f04f 0400 	mov.w	r4, #0
 8002e0a:	0194      	lsls	r4, r2, #6
 8002e0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e10:	018b      	lsls	r3, r1, #6
 8002e12:	1a5b      	subs	r3, r3, r1
 8002e14:	eb64 0402 	sbc.w	r4, r4, r2
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	00e2      	lsls	r2, r4, #3
 8002e22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e26:	00d9      	lsls	r1, r3, #3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	195b      	adds	r3, r3, r5
 8002e2e:	eb44 0406 	adc.w	r4, r4, r6
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	0262      	lsls	r2, r4, #9
 8002e3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e40:	0259      	lsls	r1, r3, #9
 8002e42:	460b      	mov	r3, r1
 8002e44:	4614      	mov	r4, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	4621      	mov	r1, r4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f04f 0400 	mov.w	r4, #0
 8002e50:	461a      	mov	r2, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	f7fd fa14 	bl	8000280 <__aeabi_uldivmod>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e049      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	f04f 0400 	mov.w	r4, #0
 8002e6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	ea03 0501 	and.w	r5, r3, r1
 8002e76:	ea04 0602 	and.w	r6, r4, r2
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	4632      	mov	r2, r6
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	f04f 0400 	mov.w	r4, #0
 8002e86:	0154      	lsls	r4, r2, #5
 8002e88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e8c:	014b      	lsls	r3, r1, #5
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4622      	mov	r2, r4
 8002e92:	1b49      	subs	r1, r1, r5
 8002e94:	eb62 0206 	sbc.w	r2, r2, r6
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	f04f 0400 	mov.w	r4, #0
 8002ea0:	0194      	lsls	r4, r2, #6
 8002ea2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ea6:	018b      	lsls	r3, r1, #6
 8002ea8:	1a5b      	subs	r3, r3, r1
 8002eaa:	eb64 0402 	sbc.w	r4, r4, r2
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	00e2      	lsls	r2, r4, #3
 8002eb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ebc:	00d9      	lsls	r1, r3, #3
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	195b      	adds	r3, r3, r5
 8002ec4:	eb44 0406 	adc.w	r4, r4, r6
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	02a2      	lsls	r2, r4, #10
 8002ed2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ed6:	0299      	lsls	r1, r3, #10
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4614      	mov	r4, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	4621      	mov	r1, r4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f04f 0400 	mov.w	r4, #0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4623      	mov	r3, r4
 8002eea:	f7fd f9c9 	bl	8000280 <__aeabi_uldivmod>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	3301      	adds	r3, #1
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
      break;
 8002f0e:	e002      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f12:	60bb      	str	r3, [r7, #8]
      break;
 8002f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f16:	68bb      	ldr	r3, [r7, #8]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	007a1200 	.word	0x007a1200

08002f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000048 	.word	0x20000048

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f48:	f7ff fff0 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0a9b      	lsrs	r3, r3, #10
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	080087b4 	.word	0x080087b4

08002f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f70:	f7ff ffdc 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f74:	4601      	mov	r1, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0b5b      	lsrs	r3, r3, #13
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	080087b4 	.word	0x080087b4

08002f94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <HAL_RCC_GetClockConfig+0x60>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	601a      	str	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40023c00 	.word	0x40023c00

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e01d      	b.n	8003046 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd ffaa 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fa40 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d007      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a1a      	ldr	r2, [r3, #32]
 80030b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_TIM_Base_Stop_IT+0x48>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	f240 4344 	movw	r3, #1092	; 0x444
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <HAL_TIM_Base_Stop_IT+0x48>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b02      	cmp	r3, #2
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0202 	mvn.w	r2, #2
 8003118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f9a5 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f997 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f9a8 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0204 	mvn.w	r2, #4
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f97b 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f96d 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f97e 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d122      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d11b      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0208 	mvn.w	r2, #8
 80031c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2204      	movs	r2, #4
 80031c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f951 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f943 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f954 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d122      	bne.n	8003244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b10      	cmp	r3, #16
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0210 	mvn.w	r2, #16
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2208      	movs	r2, #8
 800321a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f927 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f919 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f92a 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0201 	mvn.w	r2, #1
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fcb0 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 faa2 	bl	80037e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8ef 	bl	80034a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d107      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0220 	mvn.w	r2, #32
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa6c 	bl	80037cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x18>
 8003310:	2302      	movs	r3, #2
 8003312:	e0a6      	b.n	8003462 <HAL_TIM_ConfigClockSource+0x166>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d067      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x120>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d80b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x6c>
 8003350:	2b10      	cmp	r3, #16
 8003352:	d073      	beq.n	800343c <HAL_TIM_ConfigClockSource+0x140>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d802      	bhi.n	800335e <HAL_TIM_ConfigClockSource+0x62>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d06f      	beq.n	800343c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800335c:	e078      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800335e:	2b20      	cmp	r3, #32
 8003360:	d06c      	beq.n	800343c <HAL_TIM_ConfigClockSource+0x140>
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d06a      	beq.n	800343c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003366:	e073      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003368:	2b70      	cmp	r3, #112	; 0x70
 800336a:	d00d      	beq.n	8003388 <HAL_TIM_ConfigClockSource+0x8c>
 800336c:	2b70      	cmp	r3, #112	; 0x70
 800336e:	d804      	bhi.n	800337a <HAL_TIM_ConfigClockSource+0x7e>
 8003370:	2b50      	cmp	r3, #80	; 0x50
 8003372:	d033      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0xe0>
 8003374:	2b60      	cmp	r3, #96	; 0x60
 8003376:	d041      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003378:	e06a      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d066      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x152>
 8003380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003384:	d017      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003386:	e063      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f000 f98a 	bl	80036b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
      break;
 80033b4:	e04c      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6899      	ldr	r1, [r3, #8]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f000 f973 	bl	80036b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d8:	609a      	str	r2, [r3, #8]
      break;
 80033da:	e039      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f000 f8e7 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2150      	movs	r1, #80	; 0x50
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f940 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 80033fa:	e029      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	461a      	mov	r2, r3
 800340a:	f000 f906 	bl	800361a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2160      	movs	r1, #96	; 0x60
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f930 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800341a:	e019      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	461a      	mov	r2, r3
 800342a:	f000 f8c7 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2140      	movs	r1, #64	; 0x40
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f920 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800343a:	e009      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 f917 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800344c:	e000      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800344e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a34      	ldr	r2, [pc, #208]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <TIM_Base_SetConfig+0xe8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <TIM_Base_SetConfig+0xec>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <TIM_Base_SetConfig+0xf0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01b      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d017      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <TIM_Base_SetConfig+0xe8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <TIM_Base_SetConfig+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a20      	ldr	r2, [pc, #128]	; (80035ac <TIM_Base_SetConfig+0xf0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <TIM_Base_SetConfig+0xf4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <TIM_Base_SetConfig+0xf8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <TIM_Base_SetConfig+0xfc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	615a      	str	r2, [r3, #20]
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800

080035bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 030a 	bic.w	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361a:	b480      	push	{r7}
 800361c:	b087      	sub	sp, #28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0210 	bic.w	r2, r3, #16
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	031b      	lsls	r3, r3, #12
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	f043 0307 	orr.w	r3, r3, #7
 800369c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e050      	b.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d013      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10c      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	4313      	orrs	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000

080037cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e03f      	b.n	8003886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fbf0 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fbcd 	bl	8003fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b088      	sub	sp, #32
 8003892:	af02      	add	r7, sp, #8
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	f040 8083 	bne.w	80039b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_UART_Transmit+0x2e>
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e07b      	b.n	80039b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Transmit+0x40>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e074      	b.n	80039b8 <HAL_UART_Transmit+0x12a>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2221      	movs	r2, #33	; 0x21
 80038e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038e4:	f7fe f9e0 	bl	8001ca8 <HAL_GetTick>
 80038e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80038fe:	e042      	b.n	8003986 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003916:	d122      	bne.n	800395e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fad9 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e042      	b.n	80039b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003944:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3302      	adds	r3, #2
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	e017      	b.n	8003986 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3301      	adds	r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	e013      	b.n	8003986 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fab6 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e01f      	b.n	80039b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60ba      	str	r2, [r7, #8]
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1b7      	bne.n	8003900 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2200      	movs	r2, #0
 8003998:	2140      	movs	r1, #64	; 0x40
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fa9d 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e006      	b.n	80039b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d153      	bne.n	8003a82 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_UART_Transmit_DMA+0x26>
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e04c      	b.n	8003a84 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Transmit_DMA+0x38>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e045      	b.n	8003a84 <HAL_UART_Transmit_DMA+0xc4>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2221      	movs	r2, #33	; 0x21
 8003a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_UART_Transmit_DMA+0xcc>)
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_UART_Transmit_DMA+0xd0>)
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_UART_Transmit_DMA+0xd4>)
 8003a36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003a40:	f107 0308 	add.w	r3, r7, #8
 8003a44:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3304      	adds	r3, #4
 8003a54:	461a      	mov	r2, r3
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	f7fe fade 	bl	8002018 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a64:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a7c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	08003d55 	.word	0x08003d55
 8003a90:	08003da7 	.word	0x08003da7
 8003a94:	08003e47 	.word	0x08003e47

08003a98 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d166      	bne.n	8003b80 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_UART_Receive_DMA+0x26>
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e05f      	b.n	8003b82 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Receive_DMA+0x38>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e058      	b.n	8003b82 <HAL_UART_Receive_DMA+0xea>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2222      	movs	r2, #34	; 0x22
 8003aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	4a25      	ldr	r2, [pc, #148]	; (8003b8c <HAL_UART_Receive_DMA+0xf4>)
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <HAL_UART_Receive_DMA+0xf8>)
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_UART_Receive_DMA+0xfc>)
 8003b08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	2200      	movs	r2, #0
 8003b10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	f7fe fa75 	bl	8002018 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	08003dc3 	.word	0x08003dc3
 8003b90:	08003e2b 	.word	0x08003e2b
 8003b94:	08003e47 	.word	0x08003e47

08003b98 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_DMAResume+0x16>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e03f      	b.n	8003c2e <HAL_UART_DMAResume+0x96>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b21      	cmp	r3, #33	; 0x21
 8003bc0:	d107      	bne.n	8003bd2 <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd0:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b22      	cmp	r3, #34	; 0x22
 8003bdc:	d122      	bne.n	8003c24 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c02:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c22:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b80      	cmp	r3, #128	; 0x80
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b21      	cmp	r3, #33	; 0x21
 8003c66:	d116      	bne.n	8003c96 <HAL_UART_DMAStop+0x5c>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c7c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fa1c 	bl	80020c8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f96c 	bl	8003f6e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b22      	cmp	r3, #34	; 0x22
 8003cb6:	d116      	bne.n	8003ce6 <HAL_UART_DMAStop+0xac>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ccc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe f9f4 	bl	80020c8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f95a 	bl	8003f9a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d113      	bne.n	8003d98 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d84:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d94:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d96:	e002      	b.n	8003d9e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff ffa9 	bl	8003cf0 <HAL_UART_TxCpltCallback>
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff ffa5 	bl	8003d04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11e      	bne.n	8003e1c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e12:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff ff7b 	bl	8003d18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ff77 	bl	8003d2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b21      	cmp	r3, #33	; 0x21
 8003e78:	d108      	bne.n	8003e8c <UART_DMAError+0x46>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e86:	68b8      	ldr	r0, [r7, #8]
 8003e88:	f000 f871 	bl	8003f6e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b22      	cmp	r3, #34	; 0x22
 8003eac:	d108      	bne.n	8003ec0 <UART_DMAError+0x7a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003eba:	68b8      	ldr	r0, [r7, #8]
 8003ebc:	f000 f86d 	bl	8003f9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	f043 0210 	orr.w	r2, r3, #16
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ecc:	68b8      	ldr	r0, [r7, #8]
 8003ece:	f7ff ff37 	bl	8003d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	e02c      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d028      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003efa:	f7fd fed5 	bl	8001ca8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d21d      	bcs.n	8003f46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e00f      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d0c3      	beq.n	8003eec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f84:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fb0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800401a:	f023 030c 	bic.w	r3, r3, #12
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	430b      	orrs	r3, r1
 8004026:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	f040 818b 	bne.w	8004360 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4ac1      	ldr	r2, [pc, #772]	; (8004354 <UART_SetConfig+0x37c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d005      	beq.n	8004060 <UART_SetConfig+0x88>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4abf      	ldr	r2, [pc, #764]	; (8004358 <UART_SetConfig+0x380>)
 800405a:	4293      	cmp	r3, r2
 800405c:	f040 80bd 	bne.w	80041da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7fe ff84 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 8004064:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	461d      	mov	r5, r3
 800406a:	f04f 0600 	mov.w	r6, #0
 800406e:	46a8      	mov	r8, r5
 8004070:	46b1      	mov	r9, r6
 8004072:	eb18 0308 	adds.w	r3, r8, r8
 8004076:	eb49 0409 	adc.w	r4, r9, r9
 800407a:	4698      	mov	r8, r3
 800407c:	46a1      	mov	r9, r4
 800407e:	eb18 0805 	adds.w	r8, r8, r5
 8004082:	eb49 0906 	adc.w	r9, r9, r6
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004092:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004096:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800409a:	4688      	mov	r8, r1
 800409c:	4691      	mov	r9, r2
 800409e:	eb18 0005 	adds.w	r0, r8, r5
 80040a2:	eb49 0106 	adc.w	r1, r9, r6
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	461d      	mov	r5, r3
 80040ac:	f04f 0600 	mov.w	r6, #0
 80040b0:	196b      	adds	r3, r5, r5
 80040b2:	eb46 0406 	adc.w	r4, r6, r6
 80040b6:	461a      	mov	r2, r3
 80040b8:	4623      	mov	r3, r4
 80040ba:	f7fc f8e1 	bl	8000280 <__aeabi_uldivmod>
 80040be:	4603      	mov	r3, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	461a      	mov	r2, r3
 80040c4:	4ba5      	ldr	r3, [pc, #660]	; (800435c <UART_SetConfig+0x384>)
 80040c6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	461d      	mov	r5, r3
 80040d4:	f04f 0600 	mov.w	r6, #0
 80040d8:	46a9      	mov	r9, r5
 80040da:	46b2      	mov	sl, r6
 80040dc:	eb19 0309 	adds.w	r3, r9, r9
 80040e0:	eb4a 040a 	adc.w	r4, sl, sl
 80040e4:	4699      	mov	r9, r3
 80040e6:	46a2      	mov	sl, r4
 80040e8:	eb19 0905 	adds.w	r9, r9, r5
 80040ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004100:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004104:	4689      	mov	r9, r1
 8004106:	4692      	mov	sl, r2
 8004108:	eb19 0005 	adds.w	r0, r9, r5
 800410c:	eb4a 0106 	adc.w	r1, sl, r6
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	461d      	mov	r5, r3
 8004116:	f04f 0600 	mov.w	r6, #0
 800411a:	196b      	adds	r3, r5, r5
 800411c:	eb46 0406 	adc.w	r4, r6, r6
 8004120:	461a      	mov	r2, r3
 8004122:	4623      	mov	r3, r4
 8004124:	f7fc f8ac 	bl	8000280 <__aeabi_uldivmod>
 8004128:	4603      	mov	r3, r0
 800412a:	460c      	mov	r4, r1
 800412c:	461a      	mov	r2, r3
 800412e:	4b8b      	ldr	r3, [pc, #556]	; (800435c <UART_SetConfig+0x384>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	; 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a86      	ldr	r2, [pc, #536]	; (800435c <UART_SetConfig+0x384>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004150:	4498      	add	r8, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	461d      	mov	r5, r3
 8004156:	f04f 0600 	mov.w	r6, #0
 800415a:	46a9      	mov	r9, r5
 800415c:	46b2      	mov	sl, r6
 800415e:	eb19 0309 	adds.w	r3, r9, r9
 8004162:	eb4a 040a 	adc.w	r4, sl, sl
 8004166:	4699      	mov	r9, r3
 8004168:	46a2      	mov	sl, r4
 800416a:	eb19 0905 	adds.w	r9, r9, r5
 800416e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800417e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004182:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004186:	4689      	mov	r9, r1
 8004188:	4692      	mov	sl, r2
 800418a:	eb19 0005 	adds.w	r0, r9, r5
 800418e:	eb4a 0106 	adc.w	r1, sl, r6
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	461d      	mov	r5, r3
 8004198:	f04f 0600 	mov.w	r6, #0
 800419c:	196b      	adds	r3, r5, r5
 800419e:	eb46 0406 	adc.w	r4, r6, r6
 80041a2:	461a      	mov	r2, r3
 80041a4:	4623      	mov	r3, r4
 80041a6:	f7fc f86b 	bl	8000280 <__aeabi_uldivmod>
 80041aa:	4603      	mov	r3, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b6a      	ldr	r3, [pc, #424]	; (800435c <UART_SetConfig+0x384>)
 80041b2:	fba3 1302 	umull	r1, r3, r3, r2
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2164      	movs	r1, #100	; 0x64
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	3332      	adds	r3, #50	; 0x32
 80041c4:	4a65      	ldr	r2, [pc, #404]	; (800435c <UART_SetConfig+0x384>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	f003 0207 	and.w	r2, r3, #7
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4442      	add	r2, r8
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	e26f      	b.n	80046ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041da:	f7fe feb3 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 80041de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	461d      	mov	r5, r3
 80041e4:	f04f 0600 	mov.w	r6, #0
 80041e8:	46a8      	mov	r8, r5
 80041ea:	46b1      	mov	r9, r6
 80041ec:	eb18 0308 	adds.w	r3, r8, r8
 80041f0:	eb49 0409 	adc.w	r4, r9, r9
 80041f4:	4698      	mov	r8, r3
 80041f6:	46a1      	mov	r9, r4
 80041f8:	eb18 0805 	adds.w	r8, r8, r5
 80041fc:	eb49 0906 	adc.w	r9, r9, r6
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800420c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004210:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004214:	4688      	mov	r8, r1
 8004216:	4691      	mov	r9, r2
 8004218:	eb18 0005 	adds.w	r0, r8, r5
 800421c:	eb49 0106 	adc.w	r1, r9, r6
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	461d      	mov	r5, r3
 8004226:	f04f 0600 	mov.w	r6, #0
 800422a:	196b      	adds	r3, r5, r5
 800422c:	eb46 0406 	adc.w	r4, r6, r6
 8004230:	461a      	mov	r2, r3
 8004232:	4623      	mov	r3, r4
 8004234:	f7fc f824 	bl	8000280 <__aeabi_uldivmod>
 8004238:	4603      	mov	r3, r0
 800423a:	460c      	mov	r4, r1
 800423c:	461a      	mov	r2, r3
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <UART_SetConfig+0x384>)
 8004240:	fba3 2302 	umull	r2, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	461d      	mov	r5, r3
 800424e:	f04f 0600 	mov.w	r6, #0
 8004252:	46a9      	mov	r9, r5
 8004254:	46b2      	mov	sl, r6
 8004256:	eb19 0309 	adds.w	r3, r9, r9
 800425a:	eb4a 040a 	adc.w	r4, sl, sl
 800425e:	4699      	mov	r9, r3
 8004260:	46a2      	mov	sl, r4
 8004262:	eb19 0905 	adds.w	r9, r9, r5
 8004266:	eb4a 0a06 	adc.w	sl, sl, r6
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004276:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800427a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800427e:	4689      	mov	r9, r1
 8004280:	4692      	mov	sl, r2
 8004282:	eb19 0005 	adds.w	r0, r9, r5
 8004286:	eb4a 0106 	adc.w	r1, sl, r6
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	461d      	mov	r5, r3
 8004290:	f04f 0600 	mov.w	r6, #0
 8004294:	196b      	adds	r3, r5, r5
 8004296:	eb46 0406 	adc.w	r4, r6, r6
 800429a:	461a      	mov	r2, r3
 800429c:	4623      	mov	r3, r4
 800429e:	f7fb ffef 	bl	8000280 <__aeabi_uldivmod>
 80042a2:	4603      	mov	r3, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <UART_SetConfig+0x384>)
 80042aa:	fba3 1302 	umull	r1, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2164      	movs	r1, #100	; 0x64
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	3332      	adds	r3, #50	; 0x32
 80042bc:	4a27      	ldr	r2, [pc, #156]	; (800435c <UART_SetConfig+0x384>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ca:	4498      	add	r8, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	461d      	mov	r5, r3
 80042d0:	f04f 0600 	mov.w	r6, #0
 80042d4:	46a9      	mov	r9, r5
 80042d6:	46b2      	mov	sl, r6
 80042d8:	eb19 0309 	adds.w	r3, r9, r9
 80042dc:	eb4a 040a 	adc.w	r4, sl, sl
 80042e0:	4699      	mov	r9, r3
 80042e2:	46a2      	mov	sl, r4
 80042e4:	eb19 0905 	adds.w	r9, r9, r5
 80042e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004300:	4689      	mov	r9, r1
 8004302:	4692      	mov	sl, r2
 8004304:	eb19 0005 	adds.w	r0, r9, r5
 8004308:	eb4a 0106 	adc.w	r1, sl, r6
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	461d      	mov	r5, r3
 8004312:	f04f 0600 	mov.w	r6, #0
 8004316:	196b      	adds	r3, r5, r5
 8004318:	eb46 0406 	adc.w	r4, r6, r6
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	f7fb ffae 	bl	8000280 <__aeabi_uldivmod>
 8004324:	4603      	mov	r3, r0
 8004326:	460c      	mov	r4, r1
 8004328:	461a      	mov	r2, r3
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <UART_SetConfig+0x384>)
 800432c:	fba3 1302 	umull	r1, r3, r3, r2
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	2164      	movs	r1, #100	; 0x64
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	3332      	adds	r3, #50	; 0x32
 800433e:	4a07      	ldr	r2, [pc, #28]	; (800435c <UART_SetConfig+0x384>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	f003 0207 	and.w	r2, r3, #7
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4442      	add	r2, r8
 8004350:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004352:	e1b2      	b.n	80046ba <UART_SetConfig+0x6e2>
 8004354:	40011000 	.word	0x40011000
 8004358:	40011400 	.word	0x40011400
 800435c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4ad7      	ldr	r2, [pc, #860]	; (80046c4 <UART_SetConfig+0x6ec>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d005      	beq.n	8004376 <UART_SetConfig+0x39e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4ad6      	ldr	r2, [pc, #856]	; (80046c8 <UART_SetConfig+0x6f0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	f040 80d1 	bne.w	8004518 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004376:	f7fe fdf9 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 800437a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	469a      	mov	sl, r3
 8004380:	f04f 0b00 	mov.w	fp, #0
 8004384:	46d0      	mov	r8, sl
 8004386:	46d9      	mov	r9, fp
 8004388:	eb18 0308 	adds.w	r3, r8, r8
 800438c:	eb49 0409 	adc.w	r4, r9, r9
 8004390:	4698      	mov	r8, r3
 8004392:	46a1      	mov	r9, r4
 8004394:	eb18 080a 	adds.w	r8, r8, sl
 8004398:	eb49 090b 	adc.w	r9, r9, fp
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043b0:	4688      	mov	r8, r1
 80043b2:	4691      	mov	r9, r2
 80043b4:	eb1a 0508 	adds.w	r5, sl, r8
 80043b8:	eb4b 0609 	adc.w	r6, fp, r9
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f04f 0400 	mov.w	r4, #0
 80043ce:	0094      	lsls	r4, r2, #2
 80043d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043d4:	008b      	lsls	r3, r1, #2
 80043d6:	461a      	mov	r2, r3
 80043d8:	4623      	mov	r3, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	4631      	mov	r1, r6
 80043de:	f7fb ff4f 	bl	8000280 <__aeabi_uldivmod>
 80043e2:	4603      	mov	r3, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	461a      	mov	r2, r3
 80043e8:	4bb8      	ldr	r3, [pc, #736]	; (80046cc <UART_SetConfig+0x6f4>)
 80043ea:	fba3 2302 	umull	r2, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	469b      	mov	fp, r3
 80043f8:	f04f 0c00 	mov.w	ip, #0
 80043fc:	46d9      	mov	r9, fp
 80043fe:	46e2      	mov	sl, ip
 8004400:	eb19 0309 	adds.w	r3, r9, r9
 8004404:	eb4a 040a 	adc.w	r4, sl, sl
 8004408:	4699      	mov	r9, r3
 800440a:	46a2      	mov	sl, r4
 800440c:	eb19 090b 	adds.w	r9, r9, fp
 8004410:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004428:	4689      	mov	r9, r1
 800442a:	4692      	mov	sl, r2
 800442c:	eb1b 0509 	adds.w	r5, fp, r9
 8004430:	eb4c 060a 	adc.w	r6, ip, sl
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4619      	mov	r1, r3
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	f04f 0400 	mov.w	r4, #0
 8004446:	0094      	lsls	r4, r2, #2
 8004448:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800444c:	008b      	lsls	r3, r1, #2
 800444e:	461a      	mov	r2, r3
 8004450:	4623      	mov	r3, r4
 8004452:	4628      	mov	r0, r5
 8004454:	4631      	mov	r1, r6
 8004456:	f7fb ff13 	bl	8000280 <__aeabi_uldivmod>
 800445a:	4603      	mov	r3, r0
 800445c:	460c      	mov	r4, r1
 800445e:	461a      	mov	r2, r3
 8004460:	4b9a      	ldr	r3, [pc, #616]	; (80046cc <UART_SetConfig+0x6f4>)
 8004462:	fba3 1302 	umull	r1, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2164      	movs	r1, #100	; 0x64
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a95      	ldr	r2, [pc, #596]	; (80046cc <UART_SetConfig+0x6f4>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	4498      	add	r8, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	469b      	mov	fp, r3
 8004486:	f04f 0c00 	mov.w	ip, #0
 800448a:	46d9      	mov	r9, fp
 800448c:	46e2      	mov	sl, ip
 800448e:	eb19 0309 	adds.w	r3, r9, r9
 8004492:	eb4a 040a 	adc.w	r4, sl, sl
 8004496:	4699      	mov	r9, r3
 8004498:	46a2      	mov	sl, r4
 800449a:	eb19 090b 	adds.w	r9, r9, fp
 800449e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044b6:	4689      	mov	r9, r1
 80044b8:	4692      	mov	sl, r2
 80044ba:	eb1b 0509 	adds.w	r5, fp, r9
 80044be:	eb4c 060a 	adc.w	r6, ip, sl
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	0094      	lsls	r4, r2, #2
 80044d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044da:	008b      	lsls	r3, r1, #2
 80044dc:	461a      	mov	r2, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	4631      	mov	r1, r6
 80044e4:	f7fb fecc 	bl	8000280 <__aeabi_uldivmod>
 80044e8:	4603      	mov	r3, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	461a      	mov	r2, r3
 80044ee:	4b77      	ldr	r3, [pc, #476]	; (80046cc <UART_SetConfig+0x6f4>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	; 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	3332      	adds	r3, #50	; 0x32
 8004502:	4a72      	ldr	r2, [pc, #456]	; (80046cc <UART_SetConfig+0x6f4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f003 020f 	and.w	r2, r3, #15
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4442      	add	r2, r8
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	e0d0      	b.n	80046ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7fe fd14 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 800451c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	469a      	mov	sl, r3
 8004522:	f04f 0b00 	mov.w	fp, #0
 8004526:	46d0      	mov	r8, sl
 8004528:	46d9      	mov	r9, fp
 800452a:	eb18 0308 	adds.w	r3, r8, r8
 800452e:	eb49 0409 	adc.w	r4, r9, r9
 8004532:	4698      	mov	r8, r3
 8004534:	46a1      	mov	r9, r4
 8004536:	eb18 080a 	adds.w	r8, r8, sl
 800453a:	eb49 090b 	adc.w	r9, r9, fp
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800454a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800454e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004552:	4688      	mov	r8, r1
 8004554:	4691      	mov	r9, r2
 8004556:	eb1a 0508 	adds.w	r5, sl, r8
 800455a:	eb4b 0609 	adc.w	r6, fp, r9
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4619      	mov	r1, r3
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	f04f 0400 	mov.w	r4, #0
 8004570:	0094      	lsls	r4, r2, #2
 8004572:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004576:	008b      	lsls	r3, r1, #2
 8004578:	461a      	mov	r2, r3
 800457a:	4623      	mov	r3, r4
 800457c:	4628      	mov	r0, r5
 800457e:	4631      	mov	r1, r6
 8004580:	f7fb fe7e 	bl	8000280 <__aeabi_uldivmod>
 8004584:	4603      	mov	r3, r0
 8004586:	460c      	mov	r4, r1
 8004588:	461a      	mov	r2, r3
 800458a:	4b50      	ldr	r3, [pc, #320]	; (80046cc <UART_SetConfig+0x6f4>)
 800458c:	fba3 2302 	umull	r2, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	469b      	mov	fp, r3
 800459a:	f04f 0c00 	mov.w	ip, #0
 800459e:	46d9      	mov	r9, fp
 80045a0:	46e2      	mov	sl, ip
 80045a2:	eb19 0309 	adds.w	r3, r9, r9
 80045a6:	eb4a 040a 	adc.w	r4, sl, sl
 80045aa:	4699      	mov	r9, r3
 80045ac:	46a2      	mov	sl, r4
 80045ae:	eb19 090b 	adds.w	r9, r9, fp
 80045b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ca:	4689      	mov	r9, r1
 80045cc:	4692      	mov	sl, r2
 80045ce:	eb1b 0509 	adds.w	r5, fp, r9
 80045d2:	eb4c 060a 	adc.w	r6, ip, sl
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4619      	mov	r1, r3
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	0094      	lsls	r4, r2, #2
 80045ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045ee:	008b      	lsls	r3, r1, #2
 80045f0:	461a      	mov	r2, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	4631      	mov	r1, r6
 80045f8:	f7fb fe42 	bl	8000280 <__aeabi_uldivmod>
 80045fc:	4603      	mov	r3, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	461a      	mov	r2, r3
 8004602:	4b32      	ldr	r3, [pc, #200]	; (80046cc <UART_SetConfig+0x6f4>)
 8004604:	fba3 1302 	umull	r1, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	2164      	movs	r1, #100	; 0x64
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	3332      	adds	r3, #50	; 0x32
 8004616:	4a2d      	ldr	r2, [pc, #180]	; (80046cc <UART_SetConfig+0x6f4>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004622:	4498      	add	r8, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	469b      	mov	fp, r3
 8004628:	f04f 0c00 	mov.w	ip, #0
 800462c:	46d9      	mov	r9, fp
 800462e:	46e2      	mov	sl, ip
 8004630:	eb19 0309 	adds.w	r3, r9, r9
 8004634:	eb4a 040a 	adc.w	r4, sl, sl
 8004638:	4699      	mov	r9, r3
 800463a:	46a2      	mov	sl, r4
 800463c:	eb19 090b 	adds.w	r9, r9, fp
 8004640:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004650:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004658:	4689      	mov	r9, r1
 800465a:	4692      	mov	sl, r2
 800465c:	eb1b 0509 	adds.w	r5, fp, r9
 8004660:	eb4c 060a 	adc.w	r6, ip, sl
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4619      	mov	r1, r3
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	f04f 0400 	mov.w	r4, #0
 8004676:	0094      	lsls	r4, r2, #2
 8004678:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800467c:	008b      	lsls	r3, r1, #2
 800467e:	461a      	mov	r2, r3
 8004680:	4623      	mov	r3, r4
 8004682:	4628      	mov	r0, r5
 8004684:	4631      	mov	r1, r6
 8004686:	f7fb fdfb 	bl	8000280 <__aeabi_uldivmod>
 800468a:	4603      	mov	r3, r0
 800468c:	460c      	mov	r4, r1
 800468e:	461a      	mov	r2, r3
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <UART_SetConfig+0x6f4>)
 8004692:	fba3 1302 	umull	r1, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2164      	movs	r1, #100	; 0x64
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	3332      	adds	r3, #50	; 0x32
 80046a4:	4a09      	ldr	r2, [pc, #36]	; (80046cc <UART_SetConfig+0x6f4>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f003 020f 	and.w	r2, r3, #15
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4442      	add	r2, r8
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	e7ff      	b.n	80046ba <UART_SetConfig+0x6e2>
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	40011000 	.word	0x40011000
 80046c8:	40011400 	.word	0x40011400
 80046cc:	51eb851f 	.word	0x51eb851f

080046d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e6:	f3ef 8305 	mrs	r3, IPSR
 80046ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	607b      	str	r3, [r7, #4]
  return(result);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004702:	603b      	str	r3, [r7, #0]
  return(result);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <osKernelInitialize+0x3a>
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <osKernelInitialize+0x64>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d103      	bne.n	800471a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004712:	f06f 0305 	mvn.w	r3, #5
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e00c      	b.n	8004734 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <osKernelInitialize+0x64>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <osKernelInitialize+0x64>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e002      	b.n	8004734 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	200000e4 	.word	0x200000e4

08004748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474e:	f3ef 8305 	mrs	r3, IPSR
 8004752:	60bb      	str	r3, [r7, #8]
  return(result);
 8004754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475a:	f3ef 8310 	mrs	r3, PRIMASK
 800475e:	607b      	str	r3, [r7, #4]
  return(result);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004766:	f3ef 8311 	mrs	r3, BASEPRI
 800476a:	603b      	str	r3, [r7, #0]
  return(result);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <osKernelStart+0x3a>
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <osKernelStart+0x68>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d103      	bne.n	8004782 <osKernelStart+0x3a>
    stat = osErrorISR;
 800477a:	f06f 0305 	mvn.w	r3, #5
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e010      	b.n	80047a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <osKernelStart+0x68>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d109      	bne.n	800479e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800478a:	f7ff ffa1 	bl	80046d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <osKernelStart+0x68>)
 8004790:	2202      	movs	r2, #2
 8004792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004794:	f001 fa9a 	bl	8005ccc <vTaskStartScheduler>
      stat = osOK;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e002      	b.n	80047a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047a4:	68fb      	ldr	r3, [r7, #12]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200000e4 	.word	0x200000e4

080047b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b090      	sub	sp, #64	; 0x40
 80047b8:	af04      	add	r7, sp, #16
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c4:	f3ef 8305 	mrs	r3, IPSR
 80047c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80047ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 808f 	bne.w	80048f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8310 	mrs	r3, PRIMASK
 80047d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047de:	f3ef 8311 	mrs	r3, BASEPRI
 80047e2:	617b      	str	r3, [r7, #20]
  return(result);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <osThreadNew+0x3e>
 80047ea:	4b44      	ldr	r3, [pc, #272]	; (80048fc <osThreadNew+0x148>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d07e      	beq.n	80048f0 <osThreadNew+0x13c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d07b      	beq.n	80048f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80047fc:	2318      	movs	r3, #24
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004804:	f04f 33ff 	mov.w	r3, #4294967295
 8004808:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d045      	beq.n	800489c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <osThreadNew+0x6a>
        name = attr->name;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <osThreadNew+0x90>
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2b38      	cmp	r3, #56	; 0x38
 8004836:	d805      	bhi.n	8004844 <osThreadNew+0x90>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <osThreadNew+0x94>
        return (NULL);
 8004844:	2300      	movs	r3, #0
 8004846:	e054      	b.n	80048f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <osThreadNew+0xca>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b5b      	cmp	r3, #91	; 0x5b
 8004866:	d90a      	bls.n	800487e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <osThreadNew+0xca>
        mem = 1;
 8004878:	2301      	movs	r3, #1
 800487a:	623b      	str	r3, [r7, #32]
 800487c:	e010      	b.n	80048a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10c      	bne.n	80048a0 <osThreadNew+0xec>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <osThreadNew+0xec>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <osThreadNew+0xec>
          mem = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	e001      	b.n	80048a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d110      	bne.n	80048c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048ae:	9202      	str	r2, [sp, #8]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f001 f833 	bl	8005928 <xTaskCreateStatic>
 80048c2:	4603      	mov	r3, r0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	e013      	b.n	80048f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d110      	bne.n	80048f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	f107 0310 	add.w	r3, r7, #16
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f001 f87b 	bl	80059dc <xTaskCreate>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <osThreadNew+0x13c>
          hTask = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048f0:	693b      	ldr	r3, [r7, #16]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200000e4 	.word	0x200000e4

08004900 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004908:	f3ef 8305 	mrs	r3, IPSR
 800490c:	613b      	str	r3, [r7, #16]
  return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004914:	f3ef 8310 	mrs	r3, PRIMASK
 8004918:	60fb      	str	r3, [r7, #12]
  return(result);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004920:	f3ef 8311 	mrs	r3, BASEPRI
 8004924:	60bb      	str	r3, [r7, #8]
  return(result);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <osDelay+0x3c>
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <osDelay+0x58>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d103      	bne.n	800493c <osDelay+0x3c>
    stat = osErrorISR;
 8004934:	f06f 0305 	mvn.w	r3, #5
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e007      	b.n	800494c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 f98c 	bl	8005c64 <vTaskDelay>
    }
  }

  return (stat);
 800494c:	697b      	ldr	r3, [r7, #20]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200000e4 	.word	0x200000e4

0800495c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800496c:	f3ef 8305 	mrs	r3, IPSR
 8004970:	61bb      	str	r3, [r7, #24]
  return(result);
 8004972:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004974:	2b00      	cmp	r3, #0
 8004976:	d170      	bne.n	8004a5a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	617b      	str	r3, [r7, #20]
  return(result);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004984:	f3ef 8311 	mrs	r3, BASEPRI
 8004988:	613b      	str	r3, [r7, #16]
  return(result);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <osMessageQueueNew+0x3c>
 8004990:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <osMessageQueueNew+0x108>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d060      	beq.n	8004a5a <osMessageQueueNew+0xfe>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d05d      	beq.n	8004a5a <osMessageQueueNew+0xfe>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05a      	beq.n	8004a5a <osMessageQueueNew+0xfe>
    mem = -1;
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d029      	beq.n	8004a04 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <osMessageQueueNew+0x82>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b4f      	cmp	r3, #79	; 0x4f
 80049be:	d90e      	bls.n	80049de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <osMessageQueueNew+0x82>
        mem = 1;
 80049d8:	2301      	movs	r3, #1
 80049da:	623b      	str	r3, [r7, #32]
 80049dc:	e014      	b.n	8004a08 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d110      	bne.n	8004a08 <osMessageQueueNew+0xac>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10c      	bne.n	8004a08 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d108      	bne.n	8004a08 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <osMessageQueueNew+0xac>
          mem = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	e001      	b.n	8004a08 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10c      	bne.n	8004a28 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6899      	ldr	r1, [r3, #8]
 8004a16:	2300      	movs	r3, #0
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fa58 	bl	8004ed4 <xQueueGenericCreateStatic>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24
 8004a26:	e008      	b.n	8004a3a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d105      	bne.n	8004a3a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fac1 	bl	8004fba <xQueueGenericCreate>
 8004a38:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <osMessageQueueNew+0xf2>
        name = attr->name;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e001      	b.n	8004a52 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004a52:	69f9      	ldr	r1, [r7, #28]
 8004a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a56:	f000 ff0b 	bl	8005870 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200000e4 	.word	0x200000e4

08004a68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a80:	f3ef 8305 	mrs	r3, IPSR
 8004a84:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a86:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10f      	bne.n	8004aac <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a90:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a98:	f3ef 8311 	mrs	r3, BASEPRI
 8004a9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d02c      	beq.n	8004afe <osMessageQueuePut+0x96>
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <osMessageQueuePut+0xe0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d128      	bne.n	8004afe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <osMessageQueuePut+0x56>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <osMessageQueuePut+0x56>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004abe:	f06f 0303 	mvn.w	r3, #3
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ac4:	e039      	b.n	8004b3a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004aca:	f107 0210 	add.w	r2, r7, #16
 8004ace:	2300      	movs	r3, #0
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	6a38      	ldr	r0, [r7, #32]
 8004ad4:	f000 fbce 	bl	8005274 <xQueueGenericSendFromISR>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d003      	beq.n	8004ae6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004ade:	f06f 0302 	mvn.w	r3, #2
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ae4:	e029      	b.n	8004b3a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d026      	beq.n	8004b3a <osMessageQueuePut+0xd2>
 8004aec:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <osMessageQueuePut+0xe4>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004afc:	e01d      	b.n	8004b3a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <osMessageQueuePut+0xa2>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004b0a:	f06f 0303 	mvn.w	r3, #3
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	e014      	b.n	8004b3c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b12:	2300      	movs	r3, #0
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	6a38      	ldr	r0, [r7, #32]
 8004b1a:	f000 fab1 	bl	8005080 <xQueueGenericSend>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d00b      	beq.n	8004b3c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004b2a:	f06f 0301 	mvn.w	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b30:	e004      	b.n	8004b3c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004b32:	f06f 0302 	mvn.w	r3, #2
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
 8004b38:	e000      	b.n	8004b3c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b3a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3728      	adds	r7, #40	; 0x28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	200000e4 	.word	0x200000e4
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b66:	f3ef 8305 	mrs	r3, IPSR
 8004b6a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b6c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b72:	f3ef 8310 	mrs	r3, PRIMASK
 8004b76:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d105      	bne.n	8004b8a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b82:	617b      	str	r3, [r7, #20]
  return(result);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02c      	beq.n	8004be4 <osMessageQueueGet+0x94>
 8004b8a:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <osMessageQueueGet+0xdc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d128      	bne.n	8004be4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <osMessageQueueGet+0x54>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <osMessageQueueGet+0x54>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004ba4:	f06f 0303 	mvn.w	r3, #3
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004baa:	e038      	b.n	8004c1e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004bb0:	f107 0310 	add.w	r3, r7, #16
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	6a38      	ldr	r0, [r7, #32]
 8004bba:	f000 fccb 	bl	8005554 <xQueueReceiveFromISR>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d003      	beq.n	8004bcc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004bc4:	f06f 0302 	mvn.w	r3, #2
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bca:	e028      	b.n	8004c1e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d025      	beq.n	8004c1e <osMessageQueueGet+0xce>
 8004bd2:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <osMessageQueueGet+0xe0>)
 8004bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004be2:	e01c      	b.n	8004c1e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <osMessageQueueGet+0xa0>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004bf0:	f06f 0303 	mvn.w	r3, #3
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf6:	e013      	b.n	8004c20 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	6a38      	ldr	r0, [r7, #32]
 8004bfe:	f000 fbcd 	bl	800539c <xQueueReceive>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d00b      	beq.n	8004c20 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004c0e:	f06f 0301 	mvn.w	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	e004      	b.n	8004c20 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004c16:	f06f 0302 	mvn.w	r3, #2
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	e000      	b.n	8004c20 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c1e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3728      	adds	r7, #40	; 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200000e4 	.word	0x200000e4
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a07      	ldr	r2, [pc, #28]	; (8004c60 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4a06      	ldr	r2, [pc, #24]	; (8004c64 <vApplicationGetIdleTaskMemory+0x30>)
 8004c4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2280      	movs	r2, #128	; 0x80
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	200000e8 	.word	0x200000e8
 8004c64:	20000144 	.word	0x20000144

08004c68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4a06      	ldr	r2, [pc, #24]	; (8004c98 <vApplicationGetTimerTaskMemory+0x30>)
 8004c7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c86:	601a      	str	r2, [r3, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20000344 	.word	0x20000344
 8004c98:	200003a0 	.word	0x200003a0

08004c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f103 0208 	add.w	r2, r3, #8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f103 0208 	add.w	r2, r3, #8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f103 0208 	add.w	r2, r3, #8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d103      	bne.n	8004d5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e00c      	b.n	8004d78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3308      	adds	r3, #8
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <vListInsert+0x2e>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d2f6      	bcs.n	8004d66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6892      	ldr	r2, [r2, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6852      	ldr	r2, [r2, #4]
 8004dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d103      	bne.n	8004de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	1e5a      	subs	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	e7fe      	b.n	8004e2a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004e2c:	f002 f8ce 	bl	8006fcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	441a      	add	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	22ff      	movs	r2, #255	; 0xff
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	22ff      	movs	r2, #255	; 0xff
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d114      	bne.n	8004eac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01a      	beq.n	8004ec0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3310      	adds	r3, #16
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 f99c 	bl	80061cc <xTaskRemoveFromEventList>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d012      	beq.n	8004ec0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <xQueueGenericReset+0xcc>)
 8004e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	e009      	b.n	8004ec0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3310      	adds	r3, #16
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff fef3 	bl	8004c9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3324      	adds	r3, #36	; 0x24
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff feee 	bl	8004c9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ec0:	f002 f8b2 	bl	8007028 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ec4:	2301      	movs	r3, #1
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08e      	sub	sp, #56	; 0x38
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <xQueueGenericCreateStatic+0x28>
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efa:	e7fe      	b.n	8004efa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <xQueueGenericCreateStatic+0x42>
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
 8004f14:	e7fe      	b.n	8004f14 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <xQueueGenericCreateStatic+0x4e>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <xQueueGenericCreateStatic+0x52>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueGenericCreateStatic+0x54>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <xQueueGenericCreateStatic+0x6c>
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	623b      	str	r3, [r7, #32]
 8004f3e:	e7fe      	b.n	8004f3e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <xQueueGenericCreateStatic+0x78>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <xQueueGenericCreateStatic+0x7c>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <xQueueGenericCreateStatic+0x7e>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <xQueueGenericCreateStatic+0x96>
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e7fe      	b.n	8004f68 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f6a:	2350      	movs	r3, #80	; 0x50
 8004f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d009      	beq.n	8004f88 <xQueueGenericCreateStatic+0xb4>
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	e7fe      	b.n	8004f86 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f844 	bl	8005038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3730      	adds	r7, #48	; 0x30
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b08a      	sub	sp, #40	; 0x28
 8004fbe:	af02      	add	r7, sp, #8
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <xQueueGenericCreate+0x28>
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e7fe      	b.n	8004fe0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e004      	b.n	8004ff8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3350      	adds	r3, #80	; 0x50
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f002 f8ff 	bl	8007200 <pvPortMalloc>
 8005002:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3350      	adds	r3, #80	; 0x50
 8005012:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800501c:	79fa      	ldrb	r2, [r7, #7]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f805 	bl	8005038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800502e:	69bb      	ldr	r3, [r7, #24]
	}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e002      	b.n	800505a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005066:	2101      	movs	r1, #1
 8005068:	69b8      	ldr	r0, [r7, #24]
 800506a:	f7ff fecb 	bl	8004e04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	; 0x38
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800508e:	2300      	movs	r3, #0
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <xQueueGenericSend+0x30>
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ae:	e7fe      	b.n	80050ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <xQueueGenericSend+0x3e>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <xQueueGenericSend+0x42>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <xQueueGenericSend+0x44>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <xQueueGenericSend+0x5c>
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
 80050da:	e7fe      	b.n	80050da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d103      	bne.n	80050ea <xQueueGenericSend+0x6a>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <xQueueGenericSend+0x6e>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <xQueueGenericSend+0x70>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <xQueueGenericSend+0x88>
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	623b      	str	r3, [r7, #32]
 8005106:	e7fe      	b.n	8005106 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005108:	f001 fa16 	bl	8006538 <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <xQueueGenericSend+0x98>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <xQueueGenericSend+0x9c>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <xQueueGenericSend+0x9e>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <xQueueGenericSend+0xb6>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e7fe      	b.n	8005134 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005136:	f001 ff49 	bl	8006fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <xQueueGenericSend+0xcc>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d129      	bne.n	80051a0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005152:	f000 fa7c 	bl	800564e <prvCopyDataToQueue>
 8005156:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	3324      	adds	r3, #36	; 0x24
 8005164:	4618      	mov	r0, r3
 8005166:	f001 f831 	bl	80061cc <xTaskRemoveFromEventList>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005170:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <xQueueGenericSend+0x1f0>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	e00a      	b.n	8005198 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005188:	4b39      	ldr	r3, [pc, #228]	; (8005270 <xQueueGenericSend+0x1f0>)
 800518a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005198:	f001 ff46 	bl	8007028 <vPortExitCritical>
				return pdPASS;
 800519c:	2301      	movs	r3, #1
 800519e:	e063      	b.n	8005268 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051a6:	f001 ff3f 	bl	8007028 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e05c      	b.n	8005268 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 f869 	bl	8006290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051be:	2301      	movs	r3, #1
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051c2:	f001 ff31 	bl	8007028 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051c6:	f000 fde5 	bl	8005d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ca:	f001 feff 	bl	8006fcc <vPortEnterCritical>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d103      	bne.n	80051e4 <xQueueGenericSend+0x164>
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d103      	bne.n	80051fa <xQueueGenericSend+0x17a>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051fa:	f001 ff15 	bl	8007028 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051fe:	1d3a      	adds	r2, r7, #4
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f001 f858 	bl	80062bc <xTaskCheckForTimeOut>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d124      	bne.n	800525c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005214:	f000 fb13 	bl	800583e <prvIsQueueFull>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d018      	beq.n	8005250 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	3310      	adds	r3, #16
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f000 ff82 	bl	8006130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800522c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522e:	f000 fa9e 	bl	800576e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005232:	f000 fdbd 	bl	8005db0 <xTaskResumeAll>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af7c 	bne.w	8005136 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <xQueueGenericSend+0x1f0>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	e772      	b.n	8005136 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005252:	f000 fa8c 	bl	800576e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005256:	f000 fdab 	bl	8005db0 <xTaskResumeAll>
 800525a:	e76c      	b.n	8005136 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800525c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525e:	f000 fa86 	bl	800576e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005262:	f000 fda5 	bl	8005db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005268:	4618      	mov	r0, r3
 800526a:	3738      	adds	r7, #56	; 0x38
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <xQueueGenericSendFromISR+0x2c>
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	e7fe      	b.n	800529e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <xQueueGenericSendFromISR+0x3a>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <xQueueGenericSendFromISR+0x3e>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <xQueueGenericSendFromISR+0x40>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <xQueueGenericSendFromISR+0x58>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	e7fe      	b.n	80052ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d103      	bne.n	80052da <xQueueGenericSendFromISR+0x66>
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <xQueueGenericSendFromISR+0x6a>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <xQueueGenericSendFromISR+0x6c>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <xQueueGenericSendFromISR+0x84>
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e7fe      	b.n	80052f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f8:	f001 ff44 	bl	8007184 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	61ba      	str	r2, [r7, #24]
 8005312:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005314:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <xQueueGenericSendFromISR+0xb6>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d12c      	bne.n	8005384 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533a:	f000 f988 	bl	800564e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800533e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d112      	bne.n	800536e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d016      	beq.n	800537e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	4618      	mov	r0, r3
 8005356:	f000 ff39 	bl	80061cc <xTaskRemoveFromEventList>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e007      	b.n	800537e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800536e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005372:	3301      	adds	r3, #1
 8005374:	b2db      	uxtb	r3, r3
 8005376:	b25a      	sxtb	r2, r3
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800537e:	2301      	movs	r3, #1
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005382:	e001      	b.n	8005388 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005384:	2300      	movs	r3, #0
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005394:	4618      	mov	r0, r3
 8005396:	3738      	adds	r7, #56	; 0x38
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08c      	sub	sp, #48	; 0x30
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <xQueueReceive+0x2e>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	e7fe      	b.n	80053c8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d103      	bne.n	80053d8 <xQueueReceive+0x3c>
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <xQueueReceive+0x40>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <xQueueReceive+0x42>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <xQueueReceive+0x5a>
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e7fe      	b.n	80053f4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053f6:	f001 f89f 	bl	8006538 <xTaskGetSchedulerState>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <xQueueReceive+0x6a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xQueueReceive+0x6e>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueReceive+0x70>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <xQueueReceive+0x88>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	e7fe      	b.n	8005422 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005424:	f001 fdd2 	bl	8006fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01f      	beq.n	8005474 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005438:	f000 f973 	bl	8005722 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1e5a      	subs	r2, r3, #1
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00f      	beq.n	800546c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	3310      	adds	r3, #16
 8005450:	4618      	mov	r0, r3
 8005452:	f000 febb 	bl	80061cc <xTaskRemoveFromEventList>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800545c:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <xQueueReceive+0x1b4>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800546c:	f001 fddc 	bl	8007028 <vPortExitCritical>
				return pdPASS;
 8005470:	2301      	movs	r3, #1
 8005472:	e069      	b.n	8005548 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800547a:	f001 fdd5 	bl	8007028 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800547e:	2300      	movs	r3, #0
 8005480:	e062      	b.n	8005548 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005488:	f107 0310 	add.w	r3, r7, #16
 800548c:	4618      	mov	r0, r3
 800548e:	f000 feff 	bl	8006290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005492:	2301      	movs	r3, #1
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005496:	f001 fdc7 	bl	8007028 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800549a:	f000 fc7b 	bl	8005d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800549e:	f001 fd95 	bl	8006fcc <vPortEnterCritical>
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054a8:	b25b      	sxtb	r3, r3
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d103      	bne.n	80054b8 <xQueueReceive+0x11c>
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054be:	b25b      	sxtb	r3, r3
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d103      	bne.n	80054ce <xQueueReceive+0x132>
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ce:	f001 fdab 	bl	8007028 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054d2:	1d3a      	adds	r2, r7, #4
 80054d4:	f107 0310 	add.w	r3, r7, #16
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 feee 	bl	80062bc <xTaskCheckForTimeOut>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d123      	bne.n	800552e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e8:	f000 f993 	bl	8005812 <prvIsQueueEmpty>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	3324      	adds	r3, #36	; 0x24
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fe18 	bl	8006130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005502:	f000 f934 	bl	800576e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005506:	f000 fc53 	bl	8005db0 <xTaskResumeAll>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d189      	bne.n	8005424 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005510:	4b0f      	ldr	r3, [pc, #60]	; (8005550 <xQueueReceive+0x1b4>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	e780      	b.n	8005424 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005524:	f000 f923 	bl	800576e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005528:	f000 fc42 	bl	8005db0 <xTaskResumeAll>
 800552c:	e77a      	b.n	8005424 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800552e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005530:	f000 f91d 	bl	800576e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005534:	f000 fc3c 	bl	8005db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553a:	f000 f96a 	bl	8005812 <prvIsQueueEmpty>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	f43f af6f 	beq.w	8005424 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005546:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005548:	4618      	mov	r0, r3
 800554a:	3730      	adds	r7, #48	; 0x30
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	; 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <xQueueReceiveFromISR+0x2a>
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	623b      	str	r3, [r7, #32]
 800557c:	e7fe      	b.n	800557c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d103      	bne.n	800558c <xQueueReceiveFromISR+0x38>
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <xQueueReceiveFromISR+0x3c>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <xQueueReceiveFromISR+0x3e>
 8005590:	2300      	movs	r3, #0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <xQueueReceiveFromISR+0x56>
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e7fe      	b.n	80055a8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055aa:	f001 fdeb 	bl	8007184 <vPortValidateInterruptPriority>
	__asm volatile
 80055ae:	f3ef 8211 	mrs	r2, BASEPRI
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	61ba      	str	r2, [r7, #24]
 80055c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80055c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d02f      	beq.n	8005636 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e4:	f000 f89d 	bl	8005722 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80055f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d112      	bne.n	8005620 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	3310      	adds	r3, #16
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fde0 	bl	80061cc <xTaskRemoveFromEventList>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00e      	beq.n	8005630 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e007      	b.n	8005630 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005624:	3301      	adds	r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	b25a      	sxtb	r2, r3
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005630:	2301      	movs	r3, #1
 8005632:	637b      	str	r3, [r7, #52]	; 0x34
 8005634:	e001      	b.n	800563a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005636:	2300      	movs	r3, #0
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005646:	4618      	mov	r0, r3
 8005648:	3738      	adds	r7, #56	; 0x38
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d14d      	bne.n	8005710 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 ff7b 	bl	8006574 <xTaskPriorityDisinherit>
 800567e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	e043      	b.n	8005710 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d119      	bne.n	80056c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6858      	ldr	r0, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	461a      	mov	r2, r3
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	f001 ffc1 	bl	8007620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	441a      	add	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d32b      	bcc.n	8005710 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	e026      	b.n	8005710 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68d8      	ldr	r0, [r3, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	461a      	mov	r2, r3
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	f001 ffa7 	bl	8007620 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	425b      	negs	r3, r3
 80056dc:	441a      	add	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d207      	bcs.n	80056fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	425b      	negs	r3, r3
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d105      	bne.n	8005710 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3b01      	subs	r3, #1
 800570e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005718:	697b      	ldr	r3, [r7, #20]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d018      	beq.n	8005766 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	d303      	bcc.n	8005756 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	461a      	mov	r2, r3
 8005760:	6838      	ldr	r0, [r7, #0]
 8005762:	f001 ff5d 	bl	8007620 <memcpy>
	}
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005776:	f001 fc29 	bl	8006fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005780:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005782:	e011      	b.n	80057a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d012      	beq.n	80057b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3324      	adds	r3, #36	; 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fd1b 	bl	80061cc <xTaskRemoveFromEventList>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800579c:	f000 fdee 	bl	800637c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	dce9      	bgt.n	8005784 <prvUnlockQueue+0x16>
 80057b0:	e000      	b.n	80057b4 <prvUnlockQueue+0x46>
					break;
 80057b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	22ff      	movs	r2, #255	; 0xff
 80057b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057bc:	f001 fc34 	bl	8007028 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057c0:	f001 fc04 	bl	8006fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057cc:	e011      	b.n	80057f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d012      	beq.n	80057fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3310      	adds	r3, #16
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fcf6 	bl	80061cc <xTaskRemoveFromEventList>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057e6:	f000 fdc9 	bl	800637c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057ea:	7bbb      	ldrb	r3, [r7, #14]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dce9      	bgt.n	80057ce <prvUnlockQueue+0x60>
 80057fa:	e000      	b.n	80057fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	22ff      	movs	r2, #255	; 0xff
 8005802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005806:	f001 fc0f 	bl	8007028 <vPortExitCritical>
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800581a:	f001 fbd7 	bl	8006fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e001      	b.n	8005830 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005830:	f001 fbfa 	bl	8007028 <vPortExitCritical>

	return xReturn;
 8005834:	68fb      	ldr	r3, [r7, #12]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005846:	f001 fbc1 	bl	8006fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	429a      	cmp	r2, r3
 8005854:	d102      	bne.n	800585c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e001      	b.n	8005860 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005860:	f001 fbe2 	bl	8007028 <vPortExitCritical>

	return xReturn;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e014      	b.n	80058aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005880:	4a0e      	ldr	r2, [pc, #56]	; (80058bc <vQueueAddToRegistry+0x4c>)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800588c:	490b      	ldr	r1, [pc, #44]	; (80058bc <vQueueAddToRegistry+0x4c>)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005896:	4a09      	ldr	r2, [pc, #36]	; (80058bc <vQueueAddToRegistry+0x4c>)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4413      	add	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058a2:	e005      	b.n	80058b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b07      	cmp	r3, #7
 80058ae:	d9e7      	bls.n	8005880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20006d24 	.word	0x20006d24

080058c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058d0:	f001 fb7c 	bl	8006fcc <vPortEnterCritical>
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058da:	b25b      	sxtb	r3, r3
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d103      	bne.n	80058ea <vQueueWaitForMessageRestricted+0x2a>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f0:	b25b      	sxtb	r3, r3
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d103      	bne.n	8005900 <vQueueWaitForMessageRestricted+0x40>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005900:	f001 fb92 	bl	8007028 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	3324      	adds	r3, #36	; 0x24
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fc2f 	bl	8006178 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f7ff ff27 	bl	800576e <prvUnlockQueue>
	}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08e      	sub	sp, #56	; 0x38
 800592c:	af04      	add	r7, sp, #16
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <xTaskCreateStatic+0x28>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	623b      	str	r3, [r7, #32]
 800594e:	e7fe      	b.n	800594e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <xTaskCreateStatic+0x42>
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	e7fe      	b.n	8005968 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800596a:	235c      	movs	r3, #92	; 0x5c
 800596c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b5c      	cmp	r3, #92	; 0x5c
 8005972:	d009      	beq.n	8005988 <xTaskCreateStatic+0x60>
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e7fe      	b.n	8005986 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005988:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01e      	beq.n	80059ce <xTaskCreateStatic+0xa6>
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01b      	beq.n	80059ce <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800599e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059a8:	2300      	movs	r3, #0
 80059aa:	9303      	str	r3, [sp, #12]
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	9302      	str	r3, [sp, #8]
 80059b0:	f107 0314 	add.w	r3, r7, #20
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f850 	bl	8005a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059c8:	f000 f8dc 	bl	8005b84 <prvAddNewTaskToReadyList>
 80059cc:	e001      	b.n	80059d2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059d2:	697b      	ldr	r3, [r7, #20]
	}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3728      	adds	r7, #40	; 0x28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08c      	sub	sp, #48	; 0x30
 80059e0:	af04      	add	r7, sp, #16
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fc05 	bl	8007200 <pvPortMalloc>
 80059f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059fe:	205c      	movs	r0, #92	; 0x5c
 8005a00:	f001 fbfe 	bl	8007200 <pvPortMalloc>
 8005a04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
 8005a12:	e005      	b.n	8005a20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a14:	6978      	ldr	r0, [r7, #20]
 8005a16:	f001 fcb5 	bl	8007384 <vPortFree>
 8005a1a:	e001      	b.n	8005a20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	2300      	movs	r3, #0
 8005a32:	9303      	str	r3, [sp, #12]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	9302      	str	r3, [sp, #8]
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f80e 	bl	8005a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a4a:	69f8      	ldr	r0, [r7, #28]
 8005a4c:	f000 f89a 	bl	8005b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a50:	2301      	movs	r3, #1
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e002      	b.n	8005a5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	21a5      	movs	r1, #165	; 0xa5
 8005a80:	f001 fdd9 	bl	8007636 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f023 0307 	bic.w	r3, r3, #7
 8005a9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <prvInitialiseNewTask+0x56>
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e7fe      	b.n	8005aba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01f      	beq.n	8005b02 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e012      	b.n	8005aee <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	7819      	ldrb	r1, [r3, #0]
 8005ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3334      	adds	r3, #52	; 0x34
 8005ad8:	460a      	mov	r2, r1
 8005ada:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d006      	beq.n	8005af6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	3301      	adds	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b0f      	cmp	r3, #15
 8005af2:	d9e9      	bls.n	8005ac8 <prvInitialiseNewTask+0x62>
 8005af4:	e000      	b.n	8005af8 <prvInitialiseNewTask+0x92>
			{
				break;
 8005af6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b00:	e003      	b.n	8005b0a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b37      	cmp	r3, #55	; 0x37
 8005b0e:	d901      	bls.n	8005b14 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b10:	2337      	movs	r3, #55	; 0x37
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2200      	movs	r2, #0
 8005b24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff f8d6 	bl	8004cdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	3318      	adds	r3, #24
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff f8d1 	bl	8004cdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2200      	movs	r2, #0
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	69b8      	ldr	r0, [r7, #24]
 8005b64:	f001 f90c 	bl	8006d80 <pxPortInitialiseStack>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b7a:	bf00      	nop
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b8c:	f001 fa1e 	bl	8006fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a2c      	ldr	r2, [pc, #176]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b9a:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <prvAddNewTaskToReadyList+0xc8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ba2:	4a2a      	ldr	r2, [pc, #168]	; (8005c4c <prvAddNewTaskToReadyList+0xc8>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d110      	bne.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bb0:	f000 fc08 	bl	80063c4 <prvInitialiseTaskLists>
 8005bb4:	e00d      	b.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bb6:	4b26      	ldr	r3, [pc, #152]	; (8005c50 <prvAddNewTaskToReadyList+0xcc>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bbe:	4b23      	ldr	r3, [pc, #140]	; (8005c4c <prvAddNewTaskToReadyList+0xc8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d802      	bhi.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <prvAddNewTaskToReadyList+0xc8>)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bd2:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <prvAddNewTaskToReadyList+0xd0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <prvAddNewTaskToReadyList+0xd0>)
 8005bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <prvAddNewTaskToReadyList+0xd0>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <prvAddNewTaskToReadyList+0xd4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d903      	bls.n	8005bf8 <prvAddNewTaskToReadyList+0x74>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <prvAddNewTaskToReadyList+0xd4>)
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <prvAddNewTaskToReadyList+0xd8>)
 8005c06:	441a      	add	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7ff f871 	bl	8004cf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c14:	f001 fa08 	bl	8007028 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <prvAddNewTaskToReadyList+0xcc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00e      	beq.n	8005c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <prvAddNewTaskToReadyList+0xc8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d207      	bcs.n	8005c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <prvAddNewTaskToReadyList+0xdc>)
 8005c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000c74 	.word	0x20000c74
 8005c4c:	200007a0 	.word	0x200007a0
 8005c50:	20000c80 	.word	0x20000c80
 8005c54:	20000c90 	.word	0x20000c90
 8005c58:	20000c7c 	.word	0x20000c7c
 8005c5c:	200007a4 	.word	0x200007a4
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <vTaskDelay+0x60>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <vTaskDelay+0x2e>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	e7fe      	b.n	8005c90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005c92:	f000 f87f 	bl	8005d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c96:	2100      	movs	r1, #0
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fcd7 	bl	800664c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c9e:	f000 f887 	bl	8005db0 <xTaskResumeAll>
 8005ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d107      	bne.n	8005cba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005caa:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <vTaskDelay+0x64>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000c9c 	.word	0x20000c9c
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cda:	463a      	mov	r2, r7
 8005cdc:	1d39      	adds	r1, r7, #4
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe ffa6 	bl	8004c34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	460a      	mov	r2, r1
 8005cfa:	4920      	ldr	r1, [pc, #128]	; (8005d7c <vTaskStartScheduler+0xb0>)
 8005cfc:	4820      	ldr	r0, [pc, #128]	; (8005d80 <vTaskStartScheduler+0xb4>)
 8005cfe:	f7ff fe13 	bl	8005928 <xTaskCreateStatic>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <vTaskStartScheduler+0xb8>)
 8005d06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d08:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <vTaskStartScheduler+0xb8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e001      	b.n	8005d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d102      	bne.n	8005d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d20:	f000 fce8 	bl	80066f4 <xTimerCreateTimerTask>
 8005d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d115      	bne.n	8005d58 <vTaskStartScheduler+0x8c>
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <vTaskStartScheduler+0xbc>)
 8005d40:	f04f 32ff 	mov.w	r2, #4294967295
 8005d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <vTaskStartScheduler+0xc0>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d4c:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <vTaskStartScheduler+0xc4>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d52:	f001 f89d 	bl	8006e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d56:	e00d      	b.n	8005d74 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d109      	bne.n	8005d74 <vTaskStartScheduler+0xa8>
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e7fe      	b.n	8005d72 <vTaskStartScheduler+0xa6>
}
 8005d74:	bf00      	nop
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	080086d8 	.word	0x080086d8
 8005d80:	08006395 	.word	0x08006395
 8005d84:	20000c98 	.word	0x20000c98
 8005d88:	20000c94 	.word	0x20000c94
 8005d8c:	20000c80 	.word	0x20000c80
 8005d90:	20000c78 	.word	0x20000c78

08005d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <vTaskSuspendAll+0x18>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	4a03      	ldr	r2, [pc, #12]	; (8005dac <vTaskSuspendAll+0x18>)
 8005da0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005da2:	bf00      	nop
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20000c9c 	.word	0x20000c9c

08005db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <xTaskResumeAll+0x114>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <xTaskResumeAll+0x2a>
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	e7fe      	b.n	8005dd8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dda:	f001 f8f7 	bl	8006fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dde:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <xTaskResumeAll+0x114>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	4a37      	ldr	r2, [pc, #220]	; (8005ec4 <xTaskResumeAll+0x114>)
 8005de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <xTaskResumeAll+0x114>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d162      	bne.n	8005eb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005df0:	4b35      	ldr	r3, [pc, #212]	; (8005ec8 <xTaskResumeAll+0x118>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d05e      	beq.n	8005eb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df8:	e02f      	b.n	8005e5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfa:	4b34      	ldr	r3, [pc, #208]	; (8005ecc <xTaskResumeAll+0x11c>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3318      	adds	r3, #24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe ffd2 	bl	8004db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe ffcd 	bl	8004db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <xTaskResumeAll+0x120>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d903      	bls.n	8005e2a <xTaskResumeAll+0x7a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	4a2a      	ldr	r2, [pc, #168]	; (8005ed0 <xTaskResumeAll+0x120>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <xTaskResumeAll+0x124>)
 8005e38:	441a      	add	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7fe ff58 	bl	8004cf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4a:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <xTaskResumeAll+0x128>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d302      	bcc.n	8005e5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <xTaskResumeAll+0x12c>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <xTaskResumeAll+0x11c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1cb      	bne.n	8005dfa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e68:	f000 fb46 	bl	80064f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <xTaskResumeAll+0x130>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d010      	beq.n	8005e9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e78:	f000 f846 	bl	8005f08 <xTaskIncrementTick>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e82:	4b16      	ldr	r3, [pc, #88]	; (8005edc <xTaskResumeAll+0x12c>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f1      	bne.n	8005e78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005e94:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <xTaskResumeAll+0x130>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <xTaskResumeAll+0x12c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <xTaskResumeAll+0x134>)
 8005ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eb6:	f001 f8b7 	bl	8007028 <vPortExitCritical>

	return xAlreadyYielded;
 8005eba:	68bb      	ldr	r3, [r7, #8]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000c9c 	.word	0x20000c9c
 8005ec8:	20000c74 	.word	0x20000c74
 8005ecc:	20000c34 	.word	0x20000c34
 8005ed0:	20000c7c 	.word	0x20000c7c
 8005ed4:	200007a4 	.word	0x200007a4
 8005ed8:	200007a0 	.word	0x200007a0
 8005edc:	20000c88 	.word	0x20000c88
 8005ee0:	20000c84 	.word	0x20000c84
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <xTaskGetTickCount+0x1c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ef4:	687b      	ldr	r3, [r7, #4]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000c78 	.word	0x20000c78

08005f08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f12:	4b4e      	ldr	r3, [pc, #312]	; (800604c <xTaskIncrementTick+0x144>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 8088 	bne.w	800602c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f1c:	4b4c      	ldr	r3, [pc, #304]	; (8006050 <xTaskIncrementTick+0x148>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f24:	4a4a      	ldr	r2, [pc, #296]	; (8006050 <xTaskIncrementTick+0x148>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11f      	bne.n	8005f70 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f30:	4b48      	ldr	r3, [pc, #288]	; (8006054 <xTaskIncrementTick+0x14c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <xTaskIncrementTick+0x46>
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	e7fe      	b.n	8005f4c <xTaskIncrementTick+0x44>
 8005f4e:	4b41      	ldr	r3, [pc, #260]	; (8006054 <xTaskIncrementTick+0x14c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	4b40      	ldr	r3, [pc, #256]	; (8006058 <xTaskIncrementTick+0x150>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a3e      	ldr	r2, [pc, #248]	; (8006054 <xTaskIncrementTick+0x14c>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	4a3e      	ldr	r2, [pc, #248]	; (8006058 <xTaskIncrementTick+0x150>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	4b3e      	ldr	r3, [pc, #248]	; (800605c <xTaskIncrementTick+0x154>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	4a3c      	ldr	r2, [pc, #240]	; (800605c <xTaskIncrementTick+0x154>)
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	f000 fac4 	bl	80064f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f70:	4b3b      	ldr	r3, [pc, #236]	; (8006060 <xTaskIncrementTick+0x158>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d349      	bcc.n	800600e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <xTaskIncrementTick+0x14c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f84:	4b36      	ldr	r3, [pc, #216]	; (8006060 <xTaskIncrementTick+0x158>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	601a      	str	r2, [r3, #0]
					break;
 8005f8c:	e03f      	b.n	800600e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8e:	4b31      	ldr	r3, [pc, #196]	; (8006054 <xTaskIncrementTick+0x14c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d203      	bcs.n	8005fae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fa6:	4a2e      	ldr	r2, [pc, #184]	; (8006060 <xTaskIncrementTick+0x158>)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fac:	e02f      	b.n	800600e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fefc 	bl	8004db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d004      	beq.n	8005fca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	3318      	adds	r3, #24
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fef3 	bl	8004db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	4b25      	ldr	r3, [pc, #148]	; (8006064 <xTaskIncrementTick+0x15c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d903      	bls.n	8005fde <xTaskIncrementTick+0xd6>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	4a22      	ldr	r2, [pc, #136]	; (8006064 <xTaskIncrementTick+0x15c>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <xTaskIncrementTick+0x160>)
 8005fec:	441a      	add	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fe fe7e 	bl	8004cf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <xTaskIncrementTick+0x164>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	429a      	cmp	r2, r3
 8006006:	d3b8      	bcc.n	8005f7a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006008:	2301      	movs	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600c:	e7b5      	b.n	8005f7a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800600e:	4b17      	ldr	r3, [pc, #92]	; (800606c <xTaskIncrementTick+0x164>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4914      	ldr	r1, [pc, #80]	; (8006068 <xTaskIncrementTick+0x160>)
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d907      	bls.n	8006036 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006026:	2301      	movs	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e004      	b.n	8006036 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <xTaskIncrementTick+0x168>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	4a0f      	ldr	r2, [pc, #60]	; (8006070 <xTaskIncrementTick+0x168>)
 8006034:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <xTaskIncrementTick+0x16c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800603e:	2301      	movs	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006042:	697b      	ldr	r3, [r7, #20]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000c9c 	.word	0x20000c9c
 8006050:	20000c78 	.word	0x20000c78
 8006054:	20000c2c 	.word	0x20000c2c
 8006058:	20000c30 	.word	0x20000c30
 800605c:	20000c8c 	.word	0x20000c8c
 8006060:	20000c94 	.word	0x20000c94
 8006064:	20000c7c 	.word	0x20000c7c
 8006068:	200007a4 	.word	0x200007a4
 800606c:	200007a0 	.word	0x200007a0
 8006070:	20000c84 	.word	0x20000c84
 8006074:	20000c88 	.word	0x20000c88

08006078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800607e:	4b27      	ldr	r3, [pc, #156]	; (800611c <vTaskSwitchContext+0xa4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006086:	4b26      	ldr	r3, [pc, #152]	; (8006120 <vTaskSwitchContext+0xa8>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800608c:	e040      	b.n	8006110 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <vTaskSwitchContext+0xa8>)
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <vTaskSwitchContext+0xac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e00f      	b.n	80060bc <vTaskSwitchContext+0x44>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <vTaskSwitchContext+0x3e>
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	607b      	str	r3, [r7, #4]
 80060b4:	e7fe      	b.n	80060b4 <vTaskSwitchContext+0x3c>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	491a      	ldr	r1, [pc, #104]	; (8006128 <vTaskSwitchContext+0xb0>)
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0e5      	beq.n	800609c <vTaskSwitchContext+0x24>
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4a13      	ldr	r2, [pc, #76]	; (8006128 <vTaskSwitchContext+0xb0>)
 80060dc:	4413      	add	r3, r2
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	3308      	adds	r3, #8
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d104      	bne.n	8006100 <vTaskSwitchContext+0x88>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <vTaskSwitchContext+0xb4>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4a06      	ldr	r2, [pc, #24]	; (8006124 <vTaskSwitchContext+0xac>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000c9c 	.word	0x20000c9c
 8006120:	20000c88 	.word	0x20000c88
 8006124:	20000c7c 	.word	0x20000c7c
 8006128:	200007a4 	.word	0x200007a4
 800612c:	200007a0 	.word	0x200007a0

08006130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <vTaskPlaceOnEventList+0x24>
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e7fe      	b.n	8006152 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <vTaskPlaceOnEventList+0x44>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3318      	adds	r3, #24
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fe fdee 	bl	8004d3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006162:	2101      	movs	r1, #1
 8006164:	6838      	ldr	r0, [r7, #0]
 8006166:	f000 fa71 	bl	800664c <prvAddCurrentTaskToDelayedList>
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200007a0 	.word	0x200007a0

08006178 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <vTaskPlaceOnEventListRestricted+0x26>
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e7fe      	b.n	800619c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3318      	adds	r3, #24
 80061a4:	4619      	mov	r1, r3
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7fe fda5 	bl	8004cf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295
 80061b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	68b8      	ldr	r0, [r7, #8]
 80061bc:	f000 fa46 	bl	800664c <prvAddCurrentTaskToDelayedList>
	}
 80061c0:	bf00      	nop
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	200007a0 	.word	0x200007a0

080061cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <xTaskRemoveFromEventList+0x2a>
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e7fe      	b.n	80061f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3318      	adds	r3, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fdd8 	bl	8004db0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006200:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <xTaskRemoveFromEventList+0xac>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11d      	bne.n	8006244 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	3304      	adds	r3, #4
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fdcf 	bl	8004db0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	4b19      	ldr	r3, [pc, #100]	; (800627c <xTaskRemoveFromEventList+0xb0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <xTaskRemoveFromEventList+0x5a>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	4a16      	ldr	r2, [pc, #88]	; (800627c <xTaskRemoveFromEventList+0xb0>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a13      	ldr	r2, [pc, #76]	; (8006280 <xTaskRemoveFromEventList+0xb4>)
 8006234:	441a      	add	r2, r3
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fe fd5a 	bl	8004cf6 <vListInsertEnd>
 8006242:	e005      	b.n	8006250 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	3318      	adds	r3, #24
 8006248:	4619      	mov	r1, r3
 800624a:	480e      	ldr	r0, [pc, #56]	; (8006284 <xTaskRemoveFromEventList+0xb8>)
 800624c:	f7fe fd53 	bl	8004cf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <xTaskRemoveFromEventList+0xbc>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	429a      	cmp	r2, r3
 800625c:	d905      	bls.n	800626a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <xTaskRemoveFromEventList+0xc0>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e001      	b.n	800626e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800626e:	697b      	ldr	r3, [r7, #20]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000c9c 	.word	0x20000c9c
 800627c:	20000c7c 	.word	0x20000c7c
 8006280:	200007a4 	.word	0x200007a4
 8006284:	20000c34 	.word	0x20000c34
 8006288:	200007a0 	.word	0x200007a0
 800628c:	20000c88 	.word	0x20000c88

08006290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <vTaskInternalSetTimeOutState+0x24>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <vTaskInternalSetTimeOutState+0x28>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	20000c8c 	.word	0x20000c8c
 80062b8:	20000c78 	.word	0x20000c78

080062bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <xTaskCheckForTimeOut+0x24>
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	e7fe      	b.n	80062de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <xTaskCheckForTimeOut+0x3e>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e7fe      	b.n	80062f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80062fa:	f000 fe67 	bl	8006fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062fe:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <xTaskCheckForTimeOut+0xb8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d102      	bne.n	800631e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e023      	b.n	8006366 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <xTaskCheckForTimeOut+0xbc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d007      	beq.n	800633a <xTaskCheckForTimeOut+0x7e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	d302      	bcc.n	800633a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	e015      	b.n	8006366 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	429a      	cmp	r2, r3
 8006342:	d20b      	bcs.n	800635c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff ff9d 	bl	8006290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e004      	b.n	8006366 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006362:	2301      	movs	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006366:	f000 fe5f 	bl	8007028 <vPortExitCritical>

	return xReturn;
 800636a:	69fb      	ldr	r3, [r7, #28]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3720      	adds	r7, #32
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000c78 	.word	0x20000c78
 8006378:	20000c8c 	.word	0x20000c8c

0800637c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006380:	4b03      	ldr	r3, [pc, #12]	; (8006390 <vTaskMissedYield+0x14>)
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	20000c88 	.word	0x20000c88

08006394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800639c:	f000 f852 	bl	8006444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063a0:	4b06      	ldr	r3, [pc, #24]	; (80063bc <prvIdleTask+0x28>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d9f9      	bls.n	800639c <prvIdleTask+0x8>
			{
				taskYIELD();
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <prvIdleTask+0x2c>)
 80063aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063b8:	e7f0      	b.n	800639c <prvIdleTask+0x8>
 80063ba:	bf00      	nop
 80063bc:	200007a4 	.word	0x200007a4
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
 80063ce:	e00c      	b.n	80063ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4a12      	ldr	r2, [pc, #72]	; (8006424 <prvInitialiseTaskLists+0x60>)
 80063dc:	4413      	add	r3, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fc5c 	bl	8004c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3301      	adds	r3, #1
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b37      	cmp	r3, #55	; 0x37
 80063ee:	d9ef      	bls.n	80063d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063f0:	480d      	ldr	r0, [pc, #52]	; (8006428 <prvInitialiseTaskLists+0x64>)
 80063f2:	f7fe fc53 	bl	8004c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063f6:	480d      	ldr	r0, [pc, #52]	; (800642c <prvInitialiseTaskLists+0x68>)
 80063f8:	f7fe fc50 	bl	8004c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063fc:	480c      	ldr	r0, [pc, #48]	; (8006430 <prvInitialiseTaskLists+0x6c>)
 80063fe:	f7fe fc4d 	bl	8004c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006402:	480c      	ldr	r0, [pc, #48]	; (8006434 <prvInitialiseTaskLists+0x70>)
 8006404:	f7fe fc4a 	bl	8004c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006408:	480b      	ldr	r0, [pc, #44]	; (8006438 <prvInitialiseTaskLists+0x74>)
 800640a:	f7fe fc47 	bl	8004c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <prvInitialiseTaskLists+0x78>)
 8006410:	4a05      	ldr	r2, [pc, #20]	; (8006428 <prvInitialiseTaskLists+0x64>)
 8006412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <prvInitialiseTaskLists+0x7c>)
 8006416:	4a05      	ldr	r2, [pc, #20]	; (800642c <prvInitialiseTaskLists+0x68>)
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	200007a4 	.word	0x200007a4
 8006428:	20000c04 	.word	0x20000c04
 800642c:	20000c18 	.word	0x20000c18
 8006430:	20000c34 	.word	0x20000c34
 8006434:	20000c48 	.word	0x20000c48
 8006438:	20000c60 	.word	0x20000c60
 800643c:	20000c2c 	.word	0x20000c2c
 8006440:	20000c30 	.word	0x20000c30

08006444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800644a:	e019      	b.n	8006480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800644c:	f000 fdbe 	bl	8006fcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <prvCheckTasksWaitingTermination+0x4c>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe fca7 	bl	8004db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <prvCheckTasksWaitingTermination+0x50>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3b01      	subs	r3, #1
 8006468:	4a0a      	ldr	r2, [pc, #40]	; (8006494 <prvCheckTasksWaitingTermination+0x50>)
 800646a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <prvCheckTasksWaitingTermination+0x54>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3b01      	subs	r3, #1
 8006472:	4a09      	ldr	r2, [pc, #36]	; (8006498 <prvCheckTasksWaitingTermination+0x54>)
 8006474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006476:	f000 fdd7 	bl	8007028 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f80e 	bl	800649c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <prvCheckTasksWaitingTermination+0x54>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e1      	bne.n	800644c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20000c48 	.word	0x20000c48
 8006494:	20000c74 	.word	0x20000c74
 8006498:	20000c5c 	.word	0x20000c5c

0800649c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d108      	bne.n	80064c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 ff66 	bl	8007384 <vPortFree>
				vPortFree( pxTCB );
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 ff63 	bl	8007384 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064be:	e017      	b.n	80064f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d103      	bne.n	80064d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 ff5a 	bl	8007384 <vPortFree>
	}
 80064d0:	e00e      	b.n	80064f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d009      	beq.n	80064f0 <prvDeleteTCB+0x54>
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e7fe      	b.n	80064ee <prvDeleteTCB+0x52>
	}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064fe:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <prvResetNextTaskUnblockTime+0x38>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <prvResetNextTaskUnblockTime+0x3c>)
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006510:	e008      	b.n	8006524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006512:	4b07      	ldr	r3, [pc, #28]	; (8006530 <prvResetNextTaskUnblockTime+0x38>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4a04      	ldr	r2, [pc, #16]	; (8006534 <prvResetNextTaskUnblockTime+0x3c>)
 8006522:	6013      	str	r3, [r2, #0]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000c2c 	.word	0x20000c2c
 8006534:	20000c94 	.word	0x20000c94

08006538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <xTaskGetSchedulerState+0x34>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006546:	2301      	movs	r3, #1
 8006548:	607b      	str	r3, [r7, #4]
 800654a:	e008      	b.n	800655e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654c:	4b08      	ldr	r3, [pc, #32]	; (8006570 <xTaskGetSchedulerState+0x38>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006554:	2302      	movs	r3, #2
 8006556:	607b      	str	r3, [r7, #4]
 8006558:	e001      	b.n	800655e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800655e:	687b      	ldr	r3, [r7, #4]
	}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000c80 	.word	0x20000c80
 8006570:	20000c9c 	.word	0x20000c9c

08006574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d054      	beq.n	8006634 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800658a:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <xTaskPriorityDisinherit+0xcc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	429a      	cmp	r2, r3
 8006592:	d009      	beq.n	80065a8 <xTaskPriorityDisinherit+0x34>
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	e7fe      	b.n	80065a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d109      	bne.n	80065c4 <xTaskPriorityDisinherit+0x50>
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	e7fe      	b.n	80065c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c8:	1e5a      	subs	r2, r3, #1
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d02c      	beq.n	8006634 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d128      	bne.n	8006634 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fbe2 	bl	8004db0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <xTaskPriorityDisinherit+0xd0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d903      	bls.n	8006614 <xTaskPriorityDisinherit+0xa0>
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <xTaskPriorityDisinherit+0xd0>)
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4a09      	ldr	r2, [pc, #36]	; (8006648 <xTaskPriorityDisinherit+0xd4>)
 8006622:	441a      	add	r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f7fe fb63 	bl	8004cf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006634:	697b      	ldr	r3, [r7, #20]
	}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200007a0 	.word	0x200007a0
 8006644:	20000c7c 	.word	0x20000c7c
 8006648:	200007a4 	.word	0x200007a4

0800664c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006656:	4b21      	ldr	r3, [pc, #132]	; (80066dc <prvAddCurrentTaskToDelayedList+0x90>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665c:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fba4 	bl	8004db0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d10a      	bne.n	8006686 <prvAddCurrentTaskToDelayedList+0x3a>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006676:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4819      	ldr	r0, [pc, #100]	; (80066e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006680:	f7fe fb39 	bl	8004cf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006684:	e026      	b.n	80066d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4413      	add	r3, r2
 800668c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800668e:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	429a      	cmp	r2, r3
 800669c:	d209      	bcs.n	80066b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f7fe fb47 	bl	8004d3e <vListInsert>
}
 80066b0:	e010      	b.n	80066d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b2:	4b0e      	ldr	r3, [pc, #56]	; (80066ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f7fe fb3d 	bl	8004d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066c4:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d202      	bcs.n	80066d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066ce:	4a08      	ldr	r2, [pc, #32]	; (80066f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	6013      	str	r3, [r2, #0]
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000c78 	.word	0x20000c78
 80066e0:	200007a0 	.word	0x200007a0
 80066e4:	20000c60 	.word	0x20000c60
 80066e8:	20000c30 	.word	0x20000c30
 80066ec:	20000c2c 	.word	0x20000c2c
 80066f0:	20000c94 	.word	0x20000c94

080066f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066fe:	f000 faff 	bl	8006d00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <xTimerCreateTimerTask+0x80>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d021      	beq.n	800674e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006712:	1d3a      	adds	r2, r7, #4
 8006714:	f107 0108 	add.w	r1, r7, #8
 8006718:	f107 030c 	add.w	r3, r7, #12
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe faa3 	bl	8004c68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	9202      	str	r2, [sp, #8]
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	2302      	movs	r3, #2
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2300      	movs	r3, #0
 8006732:	460a      	mov	r2, r1
 8006734:	4910      	ldr	r1, [pc, #64]	; (8006778 <xTimerCreateTimerTask+0x84>)
 8006736:	4811      	ldr	r0, [pc, #68]	; (800677c <xTimerCreateTimerTask+0x88>)
 8006738:	f7ff f8f6 	bl	8005928 <xTaskCreateStatic>
 800673c:	4602      	mov	r2, r0
 800673e:	4b10      	ldr	r3, [pc, #64]	; (8006780 <xTimerCreateTimerTask+0x8c>)
 8006740:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006742:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <xTimerCreateTimerTask+0x8c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800674a:	2301      	movs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <xTimerCreateTimerTask+0x74>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e7fe      	b.n	8006766 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006768:	697b      	ldr	r3, [r7, #20]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000cd0 	.word	0x20000cd0
 8006778:	080086e0 	.word	0x080086e0
 800677c:	080068b5 	.word	0x080068b5
 8006780:	20000cd4 	.word	0x20000cd4

08006784 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006792:	2300      	movs	r3, #0
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d109      	bne.n	80067b0 <xTimerGenericCommand+0x2c>
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	e7fe      	b.n	80067ae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067b0:	4b19      	ldr	r3, [pc, #100]	; (8006818 <xTimerGenericCommand+0x94>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02a      	beq.n	800680e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b05      	cmp	r3, #5
 80067c8:	dc18      	bgt.n	80067fc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067ca:	f7ff feb5 	bl	8006538 <xTaskGetSchedulerState>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d109      	bne.n	80067e8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067d4:	4b10      	ldr	r3, [pc, #64]	; (8006818 <xTimerGenericCommand+0x94>)
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	f107 0110 	add.w	r1, r7, #16
 80067dc:	2300      	movs	r3, #0
 80067de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e0:	f7fe fc4e 	bl	8005080 <xQueueGenericSend>
 80067e4:	6278      	str	r0, [r7, #36]	; 0x24
 80067e6:	e012      	b.n	800680e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <xTimerGenericCommand+0x94>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	f107 0110 	add.w	r1, r7, #16
 80067f0:	2300      	movs	r3, #0
 80067f2:	2200      	movs	r2, #0
 80067f4:	f7fe fc44 	bl	8005080 <xQueueGenericSend>
 80067f8:	6278      	str	r0, [r7, #36]	; 0x24
 80067fa:	e008      	b.n	800680e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <xTimerGenericCommand+0x94>)
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	f107 0110 	add.w	r1, r7, #16
 8006804:	2300      	movs	r3, #0
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	f7fe fd34 	bl	8005274 <xQueueGenericSendFromISR>
 800680c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006810:	4618      	mov	r0, r3
 8006812:	3728      	adds	r7, #40	; 0x28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000cd0 	.word	0x20000cd0

0800681c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af02      	add	r7, sp, #8
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006826:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <prvProcessExpiredTimer+0x94>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	3304      	adds	r3, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fabb 	bl	8004db0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	d021      	beq.n	800688c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	699a      	ldr	r2, [r3, #24]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	18d1      	adds	r1, r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	6978      	ldr	r0, [r7, #20]
 8006856:	f000 f8d1 	bl	80069fc <prvInsertTimerInActiveList>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01e      	beq.n	800689e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006860:	2300      	movs	r3, #0
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	2300      	movs	r3, #0
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	2100      	movs	r1, #0
 800686a:	6978      	ldr	r0, [r7, #20]
 800686c:	f7ff ff8a 	bl	8006784 <xTimerGenericCommand>
 8006870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d112      	bne.n	800689e <prvProcessExpiredTimer+0x82>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e7fe      	b.n	800688a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	b2da      	uxtb	r2, r3
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	6978      	ldr	r0, [r7, #20]
 80068a4:	4798      	blx	r3
}
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000cc8 	.word	0x20000cc8

080068b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068bc:	f107 0308 	add.w	r3, r7, #8
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 f857 	bl	8006974 <prvGetNextExpireTime>
 80068c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4619      	mov	r1, r3
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f803 	bl	80068d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068d2:	f000 f8d5 	bl	8006a80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068d6:	e7f1      	b.n	80068bc <prvTimerTask+0x8>

080068d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068e2:	f7ff fa57 	bl	8005d94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068e6:	f107 0308 	add.w	r3, r7, #8
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 f866 	bl	80069bc <prvSampleTimeNow>
 80068f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d130      	bne.n	800695a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <prvProcessTimerOrBlockTask+0x3c>
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d806      	bhi.n	8006914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006906:	f7ff fa53 	bl	8005db0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ff85 	bl	800681c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006912:	e024      	b.n	800695e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d008      	beq.n	800692c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <prvProcessTimerOrBlockTask+0x90>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <prvProcessTimerOrBlockTask+0x50>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <prvProcessTimerOrBlockTask+0x52>
 8006928:	2300      	movs	r3, #0
 800692a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800692c:	4b0f      	ldr	r3, [pc, #60]	; (800696c <prvProcessTimerOrBlockTask+0x94>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	4619      	mov	r1, r3
 800693a:	f7fe ffc1 	bl	80058c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800693e:	f7ff fa37 	bl	8005db0 <xTaskResumeAll>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <prvProcessTimerOrBlockTask+0x98>)
 800694a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	f3bf 8f6f 	isb	sy
}
 8006958:	e001      	b.n	800695e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800695a:	f7ff fa29 	bl	8005db0 <xTaskResumeAll>
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000ccc 	.word	0x20000ccc
 800696c:	20000cd0 	.word	0x20000cd0
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800697c:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <prvGetNextExpireTime+0x44>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <prvGetNextExpireTime+0x16>
 8006986:	2201      	movs	r2, #1
 8006988:	e000      	b.n	800698c <prvGetNextExpireTime+0x18>
 800698a:	2200      	movs	r2, #0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <prvGetNextExpireTime+0x44>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e001      	b.n	80069a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069a8:	68fb      	ldr	r3, [r7, #12]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000cc8 	.word	0x20000cc8

080069bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069c4:	f7ff fa90 	bl	8005ee8 <xTaskGetTickCount>
 80069c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069ca:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <prvSampleTimeNow+0x3c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d205      	bcs.n	80069e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069d4:	f000 f930 	bl	8006c38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e002      	b.n	80069e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069e6:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <prvSampleTimeNow+0x3c>)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000cd8 	.word	0x20000cd8

080069fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d812      	bhi.n	8006a48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d302      	bcc.n	8006a36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e01b      	b.n	8006a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <prvInsertTimerInActiveList+0x7c>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f7fe f97c 	bl	8004d3e <vListInsert>
 8006a46:	e012      	b.n	8006a6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d206      	bcs.n	8006a5e <prvInsertTimerInActiveList+0x62>
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d302      	bcc.n	8006a5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e007      	b.n	8006a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a5e:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <prvInsertTimerInActiveList+0x80>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f7fe f968 	bl	8004d3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a6e:	697b      	ldr	r3, [r7, #20]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000ccc 	.word	0x20000ccc
 8006a7c:	20000cc8 	.word	0x20000cc8

08006a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a86:	e0c6      	b.n	8006c16 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da17      	bge.n	8006abe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a8e:	1d3b      	adds	r3, r7, #4
 8006a90:	3304      	adds	r3, #4
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <prvProcessReceivedCommands+0x2e>
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	e7fe      	b.n	8006aac <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab4:	6850      	ldr	r0, [r2, #4]
 8006ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab8:	6892      	ldr	r2, [r2, #8]
 8006aba:	4611      	mov	r1, r2
 8006abc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f2c0 80a7 	blt.w	8006c14 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe f96a 	bl	8004db0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006adc:	463b      	mov	r3, r7
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff ff6c 	bl	80069bc <prvSampleTimeNow>
 8006ae4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	f200 8094 	bhi.w	8006c16 <prvProcessReceivedCommands+0x196>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <prvProcessReceivedCommands+0x74>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b1d 	.word	0x08006b1d
 8006b00:	08006b8f 	.word	0x08006b8f
 8006b04:	08006ba3 	.word	0x08006ba3
 8006b08:	08006beb 	.word	0x08006beb
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b1d 	.word	0x08006b1d
 8006b14:	08006b8f 	.word	0x08006b8f
 8006b18:	08006ba3 	.word	0x08006ba3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	18d1      	adds	r1, r2, r3
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3c:	f7ff ff5e 	bl	80069fc <prvInsertTimerInActiveList>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d067      	beq.n	8006c16 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d05c      	beq.n	8006c16 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	441a      	add	r2, r3
 8006b64:	2300      	movs	r3, #0
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b6e:	f7ff fe09 	bl	8006784 <xTimerGenericCommand>
 8006b72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d14d      	bne.n	8006c16 <prvProcessReceivedCommands+0x196>
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e7fe      	b.n	8006b8c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ba0:	e039      	b.n	8006c16 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvProcessReceivedCommands+0x156>
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e7fe      	b.n	8006bd4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	18d1      	adds	r1, r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006be4:	f7ff ff0a 	bl	80069fc <prvInsertTimerInActiveList>
					break;
 8006be8:	e015      	b.n	8006c16 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfa:	f000 fbc3 	bl	8007384 <vPortFree>
 8006bfe:	e00a      	b.n	8006c16 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c12:	e000      	b.n	8006c16 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <prvProcessReceivedCommands+0x1b4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	1d39      	adds	r1, r7, #4
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fbbc 	bl	800539c <xQueueReceive>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f47f af2e 	bne.w	8006a88 <prvProcessReceivedCommands+0x8>
	}
}
 8006c2c:	bf00      	nop
 8006c2e:	3730      	adds	r7, #48	; 0x30
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000cd0 	.word	0x20000cd0

08006c38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c3e:	e047      	b.n	8006cd0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c40:	4b2d      	ldr	r3, [pc, #180]	; (8006cf8 <prvSwitchTimerLists+0xc0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4a:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <prvSwitchTimerLists+0xc0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe f8a9 	bl	8004db0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d02d      	beq.n	8006cd0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d90e      	bls.n	8006ca4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c92:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <prvSwitchTimerLists+0xc0>)
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fe f84e 	bl	8004d3e <vListInsert>
 8006ca2:	e015      	b.n	8006cd0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	2100      	movs	r1, #0
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff fd68 	bl	8006784 <xTimerGenericCommand>
 8006cb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <prvSwitchTimerLists+0x98>
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	e7fe      	b.n	8006cce <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cd0:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <prvSwitchTimerLists+0xc0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1b2      	bne.n	8006c40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <prvSwitchTimerLists+0xc0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <prvSwitchTimerLists+0xc4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <prvSwitchTimerLists+0xc0>)
 8006ce6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ce8:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <prvSwitchTimerLists+0xc4>)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6013      	str	r3, [r2, #0]
}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000cc8 	.word	0x20000cc8
 8006cfc:	20000ccc 	.word	0x20000ccc

08006d00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d06:	f000 f961 	bl	8006fcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d0a:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d120      	bne.n	8006d54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d12:	4814      	ldr	r0, [pc, #80]	; (8006d64 <prvCheckForValidListAndQueue+0x64>)
 8006d14:	f7fd ffc2 	bl	8004c9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d18:	4813      	ldr	r0, [pc, #76]	; (8006d68 <prvCheckForValidListAndQueue+0x68>)
 8006d1a:	f7fd ffbf 	bl	8004c9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <prvCheckForValidListAndQueue+0x6c>)
 8006d20:	4a10      	ldr	r2, [pc, #64]	; (8006d64 <prvCheckForValidListAndQueue+0x64>)
 8006d22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d24:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <prvCheckForValidListAndQueue+0x70>)
 8006d26:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <prvCheckForValidListAndQueue+0x68>)
 8006d28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <prvCheckForValidListAndQueue+0x74>)
 8006d30:	4a11      	ldr	r2, [pc, #68]	; (8006d78 <prvCheckForValidListAndQueue+0x78>)
 8006d32:	2110      	movs	r1, #16
 8006d34:	200a      	movs	r0, #10
 8006d36:	f7fe f8cd 	bl	8004ed4 <xQueueGenericCreateStatic>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d3e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	490b      	ldr	r1, [pc, #44]	; (8006d7c <prvCheckForValidListAndQueue+0x7c>)
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fd8e 	bl	8005870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d54:	f000 f968 	bl	8007028 <vPortExitCritical>
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000cd0 	.word	0x20000cd0
 8006d64:	20000ca0 	.word	0x20000ca0
 8006d68:	20000cb4 	.word	0x20000cb4
 8006d6c:	20000cc8 	.word	0x20000cc8
 8006d70:	20000ccc 	.word	0x20000ccc
 8006d74:	20000d7c 	.word	0x20000d7c
 8006d78:	20000cdc 	.word	0x20000cdc
 8006d7c:	080086e8 	.word	0x080086e8

08006d80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3b04      	subs	r3, #4
 8006d90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3b04      	subs	r3, #4
 8006d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f023 0201 	bic.w	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3b04      	subs	r3, #4
 8006dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006db0:	4a0c      	ldr	r2, [pc, #48]	; (8006de4 <pxPortInitialiseStack+0x64>)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3b14      	subs	r3, #20
 8006dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f06f 0202 	mvn.w	r2, #2
 8006dce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3b20      	subs	r3, #32
 8006dd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	08006de9 	.word	0x08006de9

08006de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <prvTaskExitError+0x50>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d009      	beq.n	8006e10 <prvTaskExitError+0x28>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e7fe      	b.n	8006e0e <prvTaskExitError+0x26>
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e22:	bf00      	nop
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0fc      	beq.n	8006e24 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000054 	.word	0x20000054
 8006e3c:	00000000 	.word	0x00000000

08006e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <pxCurrentTCBConst2>)
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6808      	ldr	r0, [r1, #0]
 8006e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f380 8809 	msr	PSP, r0
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f380 8811 	msr	BASEPRI, r0
 8006e5a:	4770      	bx	lr
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst2>:
 8006e60:	200007a0 	.word	0x200007a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e68:	4808      	ldr	r0, [pc, #32]	; (8006e8c <prvPortStartFirstTask+0x24>)
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	6800      	ldr	r0, [r0, #0]
 8006e6e:	f380 8808 	msr	MSP, r0
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8814 	msr	CONTROL, r0
 8006e7a:	b662      	cpsie	i
 8006e7c:	b661      	cpsie	f
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	df00      	svc	0
 8006e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e8a:	bf00      	nop
 8006e8c:	e000ed08 	.word	0xe000ed08

08006e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e96:	4b44      	ldr	r3, [pc, #272]	; (8006fa8 <xPortStartScheduler+0x118>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a44      	ldr	r2, [pc, #272]	; (8006fac <xPortStartScheduler+0x11c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d109      	bne.n	8006eb4 <xPortStartScheduler+0x24>
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	e7fe      	b.n	8006eb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006eb4:	4b3c      	ldr	r3, [pc, #240]	; (8006fa8 <xPortStartScheduler+0x118>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a3d      	ldr	r2, [pc, #244]	; (8006fb0 <xPortStartScheduler+0x120>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d109      	bne.n	8006ed2 <xPortStartScheduler+0x42>
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e7fe      	b.n	8006ed0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ed2:	4b38      	ldr	r3, [pc, #224]	; (8006fb4 <xPortStartScheduler+0x124>)
 8006ed4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	22ff      	movs	r2, #255	; 0xff
 8006ee2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	4b30      	ldr	r3, [pc, #192]	; (8006fb8 <xPortStartScheduler+0x128>)
 8006ef8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006efc:	2207      	movs	r2, #7
 8006efe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f00:	e009      	b.n	8006f16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006f02:	4b2e      	ldr	r3, [pc, #184]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006f0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f16:	78fb      	ldrb	r3, [r7, #3]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b80      	cmp	r3, #128	; 0x80
 8006f20:	d0ef      	beq.n	8006f02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f22:	4b26      	ldr	r3, [pc, #152]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1c3 0307 	rsb	r3, r3, #7
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d009      	beq.n	8006f42 <xPortStartScheduler+0xb2>
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	e7fe      	b.n	8006f40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f42:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	4a1c      	ldr	r2, [pc, #112]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006f4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f4c:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <xPortStartScheduler+0x12c>)
 8006f56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f60:	4b17      	ldr	r3, [pc, #92]	; (8006fc0 <xPortStartScheduler+0x130>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a16      	ldr	r2, [pc, #88]	; (8006fc0 <xPortStartScheduler+0x130>)
 8006f66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <xPortStartScheduler+0x130>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a13      	ldr	r2, [pc, #76]	; (8006fc0 <xPortStartScheduler+0x130>)
 8006f72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f78:	f000 f8d6 	bl	8007128 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <xPortStartScheduler+0x134>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f82:	f000 f8f5 	bl	8007170 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <xPortStartScheduler+0x138>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a0f      	ldr	r2, [pc, #60]	; (8006fc8 <xPortStartScheduler+0x138>)
 8006f8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f92:	f7ff ff69 	bl	8006e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f96:	f7ff f86f 	bl	8006078 <vTaskSwitchContext>
	prvTaskExitError();
 8006f9a:	f7ff ff25 	bl	8006de8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	e000ed00 	.word	0xe000ed00
 8006fac:	410fc271 	.word	0x410fc271
 8006fb0:	410fc270 	.word	0x410fc270
 8006fb4:	e000e400 	.word	0xe000e400
 8006fb8:	20000dcc 	.word	0x20000dcc
 8006fbc:	20000dd0 	.word	0x20000dd0
 8006fc0:	e000ed20 	.word	0xe000ed20
 8006fc4:	20000054 	.word	0x20000054
 8006fc8:	e000ef34 	.word	0xe000ef34

08006fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <vPortEnterCritical+0x54>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	4a0d      	ldr	r2, [pc, #52]	; (8007020 <vPortEnterCritical+0x54>)
 8006fec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <vPortEnterCritical+0x54>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10e      	bne.n	8007014 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <vPortEnterCritical+0x58>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <vPortEnterCritical+0x48>
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	e7fe      	b.n	8007012 <vPortEnterCritical+0x46>
	}
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20000054 	.word	0x20000054
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800702e:	4b11      	ldr	r3, [pc, #68]	; (8007074 <vPortExitCritical+0x4c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <vPortExitCritical+0x22>
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	e7fe      	b.n	8007048 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800704a:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <vPortExitCritical+0x4c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3b01      	subs	r3, #1
 8007050:	4a08      	ldr	r2, [pc, #32]	; (8007074 <vPortExitCritical+0x4c>)
 8007052:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <vPortExitCritical+0x4c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <vPortExitCritical+0x3e>
 800705c:	2300      	movs	r3, #0
 800705e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000054 	.word	0x20000054
	...

08007080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007080:	f3ef 8009 	mrs	r0, PSP
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <pxCurrentTCBConst>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f01e 0f10 	tst.w	lr, #16
 8007090:	bf08      	it	eq
 8007092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	6010      	str	r0, [r2, #0]
 800709c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070a4:	f380 8811 	msr	BASEPRI, r0
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f7fe ffe2 	bl	8006078 <vTaskSwitchContext>
 80070b4:	f04f 0000 	mov.w	r0, #0
 80070b8:	f380 8811 	msr	BASEPRI, r0
 80070bc:	bc09      	pop	{r0, r3}
 80070be:	6819      	ldr	r1, [r3, #0]
 80070c0:	6808      	ldr	r0, [r1, #0]
 80070c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c6:	f01e 0f10 	tst.w	lr, #16
 80070ca:	bf08      	it	eq
 80070cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070d0:	f380 8809 	msr	PSP, r0
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	f3af 8000 	nop.w

080070e0 <pxCurrentTCBConst>:
 80070e0:	200007a0 	.word	0x200007a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop

080070e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007100:	f7fe ff02 	bl	8005f08 <xTaskIncrementTick>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800710a:	4b06      	ldr	r3, [pc, #24]	; (8007124 <SysTick_Handler+0x3c>)
 800710c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	2300      	movs	r3, #0
 8007114:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <vPortSetupTimerInterrupt+0x34>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <vPortSetupTimerInterrupt+0x38>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <vPortSetupTimerInterrupt+0x3c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <vPortSetupTimerInterrupt+0x40>)
 800713e:	fba2 2303 	umull	r2, r3, r2, r3
 8007142:	099b      	lsrs	r3, r3, #6
 8007144:	4a09      	ldr	r2, [pc, #36]	; (800716c <vPortSetupTimerInterrupt+0x44>)
 8007146:	3b01      	subs	r3, #1
 8007148:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800714a:	4b04      	ldr	r3, [pc, #16]	; (800715c <vPortSetupTimerInterrupt+0x34>)
 800714c:	2207      	movs	r2, #7
 800714e:	601a      	str	r2, [r3, #0]
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	e000e010 	.word	0xe000e010
 8007160:	e000e018 	.word	0xe000e018
 8007164:	20000048 	.word	0x20000048
 8007168:	10624dd3 	.word	0x10624dd3
 800716c:	e000e014 	.word	0xe000e014

08007170 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007170:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007180 <vPortEnableVFP+0x10>
 8007174:	6801      	ldr	r1, [r0, #0]
 8007176:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800717a:	6001      	str	r1, [r0, #0]
 800717c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800717e:	bf00      	nop
 8007180:	e000ed88 	.word	0xe000ed88

08007184 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800718a:	f3ef 8305 	mrs	r3, IPSR
 800718e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b0f      	cmp	r3, #15
 8007194:	d913      	bls.n	80071be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007196:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <vPortValidateInterruptPriority+0x6c>)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071a0:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <vPortValidateInterruptPriority+0x70>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	7afa      	ldrb	r2, [r7, #11]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d209      	bcs.n	80071be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	e7fe      	b.n	80071bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071be:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <vPortValidateInterruptPriority+0x74>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <vPortValidateInterruptPriority+0x78>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d909      	bls.n	80071e2 <vPortValidateInterruptPriority+0x5e>
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	e7fe      	b.n	80071e0 <vPortValidateInterruptPriority+0x5c>
	}
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	e000e3f0 	.word	0xe000e3f0
 80071f4:	20000dcc 	.word	0x20000dcc
 80071f8:	e000ed0c 	.word	0xe000ed0c
 80071fc:	20000dd0 	.word	0x20000dd0

08007200 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	; 0x28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800720c:	f7fe fdc2 	bl	8005d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007210:	4b57      	ldr	r3, [pc, #348]	; (8007370 <pvPortMalloc+0x170>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007218:	f000 f90c 	bl	8007434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800721c:	4b55      	ldr	r3, [pc, #340]	; (8007374 <pvPortMalloc+0x174>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4013      	ands	r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 808c 	bne.w	8007342 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01c      	beq.n	800726a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007230:	2208      	movs	r2, #8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	2b00      	cmp	r3, #0
 8007240:	d013      	beq.n	800726a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f023 0307 	bic.w	r3, r3, #7
 8007248:	3308      	adds	r3, #8
 800724a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <pvPortMalloc+0x6a>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e7fe      	b.n	8007268 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d068      	beq.n	8007342 <pvPortMalloc+0x142>
 8007270:	4b41      	ldr	r3, [pc, #260]	; (8007378 <pvPortMalloc+0x178>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d863      	bhi.n	8007342 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800727a:	4b40      	ldr	r3, [pc, #256]	; (800737c <pvPortMalloc+0x17c>)
 800727c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800727e:	4b3f      	ldr	r3, [pc, #252]	; (800737c <pvPortMalloc+0x17c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007284:	e004      	b.n	8007290 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	429a      	cmp	r2, r3
 8007298:	d903      	bls.n	80072a2 <pvPortMalloc+0xa2>
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f1      	bne.n	8007286 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072a2:	4b33      	ldr	r3, [pc, #204]	; (8007370 <pvPortMalloc+0x170>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d04a      	beq.n	8007342 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2208      	movs	r2, #8
 80072b2:	4413      	add	r3, r2
 80072b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	1ad2      	subs	r2, r2, r3
 80072c6:	2308      	movs	r3, #8
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d91e      	bls.n	800730c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4413      	add	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d009      	beq.n	80072f4 <pvPortMalloc+0xf4>
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	e7fe      	b.n	80072f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007306:	69b8      	ldr	r0, [r7, #24]
 8007308:	f000 f8f6 	bl	80074f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800730c:	4b1a      	ldr	r3, [pc, #104]	; (8007378 <pvPortMalloc+0x178>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	4a18      	ldr	r2, [pc, #96]	; (8007378 <pvPortMalloc+0x178>)
 8007318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800731a:	4b17      	ldr	r3, [pc, #92]	; (8007378 <pvPortMalloc+0x178>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b18      	ldr	r3, [pc, #96]	; (8007380 <pvPortMalloc+0x180>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d203      	bcs.n	800732e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <pvPortMalloc+0x178>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a15      	ldr	r2, [pc, #84]	; (8007380 <pvPortMalloc+0x180>)
 800732c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <pvPortMalloc+0x174>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	431a      	orrs	r2, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007342:	f7fe fd35 	bl	8005db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <pvPortMalloc+0x164>
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e7fe      	b.n	8007362 <pvPortMalloc+0x162>
	return pvReturn;
 8007364:	69fb      	ldr	r3, [r7, #28]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3728      	adds	r7, #40	; 0x28
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200049dc 	.word	0x200049dc
 8007374:	200049e8 	.word	0x200049e8
 8007378:	200049e0 	.word	0x200049e0
 800737c:	200049d4 	.word	0x200049d4
 8007380:	200049e4 	.word	0x200049e4

08007384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d046      	beq.n	8007424 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007396:	2308      	movs	r3, #8
 8007398:	425b      	negs	r3, r3
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4413      	add	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	4b20      	ldr	r3, [pc, #128]	; (800742c <vPortFree+0xa8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d109      	bne.n	80073c6 <vPortFree+0x42>
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e7fe      	b.n	80073c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <vPortFree+0x5e>
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	60bb      	str	r3, [r7, #8]
 80073e0:	e7fe      	b.n	80073e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	4b11      	ldr	r3, [pc, #68]	; (800742c <vPortFree+0xa8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d019      	beq.n	8007424 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d115      	bne.n	8007424 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4b0b      	ldr	r3, [pc, #44]	; (800742c <vPortFree+0xa8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007408:	f7fe fcc4 	bl	8005d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <vPortFree+0xac>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4413      	add	r3, r2
 8007416:	4a06      	ldr	r2, [pc, #24]	; (8007430 <vPortFree+0xac>)
 8007418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800741a:	6938      	ldr	r0, [r7, #16]
 800741c:	f000 f86c 	bl	80074f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007420:	f7fe fcc6 	bl	8005db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007424:	bf00      	nop
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200049e8 	.word	0x200049e8
 8007430:	200049e0 	.word	0x200049e0

08007434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800743a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800743e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007440:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <prvHeapInit+0xac>)
 8007442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00c      	beq.n	8007468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3307      	adds	r3, #7
 8007452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0307 	bic.w	r3, r3, #7
 800745a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	4a1f      	ldr	r2, [pc, #124]	; (80074e0 <prvHeapInit+0xac>)
 8007464:	4413      	add	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800746c:	4a1d      	ldr	r2, [pc, #116]	; (80074e4 <prvHeapInit+0xb0>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <prvHeapInit+0xb0>)
 8007474:	2200      	movs	r2, #0
 8007476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	4413      	add	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007480:	2208      	movs	r2, #8
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <prvHeapInit+0xb4>)
 8007494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <prvHeapInit+0xb4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800749e:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <prvHeapInit+0xb4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074b4:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <prvHeapInit+0xb4>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <prvHeapInit+0xb8>)
 80074c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <prvHeapInit+0xbc>)
 80074ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <prvHeapInit+0xc0>)
 80074ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20000dd4 	.word	0x20000dd4
 80074e4:	200049d4 	.word	0x200049d4
 80074e8:	200049dc 	.word	0x200049dc
 80074ec:	200049e4 	.word	0x200049e4
 80074f0:	200049e0 	.word	0x200049e0
 80074f4:	200049e8 	.word	0x200049e8

080074f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007500:	4b28      	ldr	r3, [pc, #160]	; (80075a4 <prvInsertBlockIntoFreeList+0xac>)
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e002      	b.n	800750c <prvInsertBlockIntoFreeList+0x14>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d8f7      	bhi.n	8007506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4413      	add	r3, r2
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d108      	bne.n	800753a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	441a      	add	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	441a      	add	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d118      	bne.n	8007580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d00d      	beq.n	8007576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	441a      	add	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	e008      	b.n	8007588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e003      	b.n	8007588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d002      	beq.n	8007596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	200049d4 	.word	0x200049d4
 80075a8:	200049dc 	.word	0x200049dc

080075ac <__errno>:
 80075ac:	4b01      	ldr	r3, [pc, #4]	; (80075b4 <__errno+0x8>)
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000058 	.word	0x20000058

080075b8 <__libc_init_array>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	4e0d      	ldr	r6, [pc, #52]	; (80075f0 <__libc_init_array+0x38>)
 80075bc:	4c0d      	ldr	r4, [pc, #52]	; (80075f4 <__libc_init_array+0x3c>)
 80075be:	1ba4      	subs	r4, r4, r6
 80075c0:	10a4      	asrs	r4, r4, #2
 80075c2:	2500      	movs	r5, #0
 80075c4:	42a5      	cmp	r5, r4
 80075c6:	d109      	bne.n	80075dc <__libc_init_array+0x24>
 80075c8:	4e0b      	ldr	r6, [pc, #44]	; (80075f8 <__libc_init_array+0x40>)
 80075ca:	4c0c      	ldr	r4, [pc, #48]	; (80075fc <__libc_init_array+0x44>)
 80075cc:	f001 f83a 	bl	8008644 <_init>
 80075d0:	1ba4      	subs	r4, r4, r6
 80075d2:	10a4      	asrs	r4, r4, #2
 80075d4:	2500      	movs	r5, #0
 80075d6:	42a5      	cmp	r5, r4
 80075d8:	d105      	bne.n	80075e6 <__libc_init_array+0x2e>
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075e0:	4798      	blx	r3
 80075e2:	3501      	adds	r5, #1
 80075e4:	e7ee      	b.n	80075c4 <__libc_init_array+0xc>
 80075e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075ea:	4798      	blx	r3
 80075ec:	3501      	adds	r5, #1
 80075ee:	e7f2      	b.n	80075d6 <__libc_init_array+0x1e>
 80075f0:	08008864 	.word	0x08008864
 80075f4:	08008864 	.word	0x08008864
 80075f8:	08008864 	.word	0x08008864
 80075fc:	08008868 	.word	0x08008868

08007600 <malloc>:
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <malloc+0xc>)
 8007602:	4601      	mov	r1, r0
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	f000 b86d 	b.w	80076e4 <_malloc_r>
 800760a:	bf00      	nop
 800760c:	20000058 	.word	0x20000058

08007610 <free>:
 8007610:	4b02      	ldr	r3, [pc, #8]	; (800761c <free+0xc>)
 8007612:	4601      	mov	r1, r0
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f000 b817 	b.w	8007648 <_free_r>
 800761a:	bf00      	nop
 800761c:	20000058 	.word	0x20000058

08007620 <memcpy>:
 8007620:	b510      	push	{r4, lr}
 8007622:	1e43      	subs	r3, r0, #1
 8007624:	440a      	add	r2, r1
 8007626:	4291      	cmp	r1, r2
 8007628:	d100      	bne.n	800762c <memcpy+0xc>
 800762a:	bd10      	pop	{r4, pc}
 800762c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007634:	e7f7      	b.n	8007626 <memcpy+0x6>

08007636 <memset>:
 8007636:	4402      	add	r2, r0
 8007638:	4603      	mov	r3, r0
 800763a:	4293      	cmp	r3, r2
 800763c:	d100      	bne.n	8007640 <memset+0xa>
 800763e:	4770      	bx	lr
 8007640:	f803 1b01 	strb.w	r1, [r3], #1
 8007644:	e7f9      	b.n	800763a <memset+0x4>
	...

08007648 <_free_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4605      	mov	r5, r0
 800764c:	2900      	cmp	r1, #0
 800764e:	d045      	beq.n	80076dc <_free_r+0x94>
 8007650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007654:	1f0c      	subs	r4, r1, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfb8      	it	lt
 800765a:	18e4      	addlt	r4, r4, r3
 800765c:	f000 fc7c 	bl	8007f58 <__malloc_lock>
 8007660:	4a1f      	ldr	r2, [pc, #124]	; (80076e0 <_free_r+0x98>)
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	4610      	mov	r0, r2
 8007666:	b933      	cbnz	r3, 8007676 <_free_r+0x2e>
 8007668:	6063      	str	r3, [r4, #4]
 800766a:	6014      	str	r4, [r2, #0]
 800766c:	4628      	mov	r0, r5
 800766e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007672:	f000 bc72 	b.w	8007f5a <__malloc_unlock>
 8007676:	42a3      	cmp	r3, r4
 8007678:	d90c      	bls.n	8007694 <_free_r+0x4c>
 800767a:	6821      	ldr	r1, [r4, #0]
 800767c:	1862      	adds	r2, r4, r1
 800767e:	4293      	cmp	r3, r2
 8007680:	bf04      	itt	eq
 8007682:	681a      	ldreq	r2, [r3, #0]
 8007684:	685b      	ldreq	r3, [r3, #4]
 8007686:	6063      	str	r3, [r4, #4]
 8007688:	bf04      	itt	eq
 800768a:	1852      	addeq	r2, r2, r1
 800768c:	6022      	streq	r2, [r4, #0]
 800768e:	6004      	str	r4, [r0, #0]
 8007690:	e7ec      	b.n	800766c <_free_r+0x24>
 8007692:	4613      	mov	r3, r2
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	b10a      	cbz	r2, 800769c <_free_r+0x54>
 8007698:	42a2      	cmp	r2, r4
 800769a:	d9fa      	bls.n	8007692 <_free_r+0x4a>
 800769c:	6819      	ldr	r1, [r3, #0]
 800769e:	1858      	adds	r0, r3, r1
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d10b      	bne.n	80076bc <_free_r+0x74>
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	4401      	add	r1, r0
 80076a8:	1858      	adds	r0, r3, r1
 80076aa:	4282      	cmp	r2, r0
 80076ac:	6019      	str	r1, [r3, #0]
 80076ae:	d1dd      	bne.n	800766c <_free_r+0x24>
 80076b0:	6810      	ldr	r0, [r2, #0]
 80076b2:	6852      	ldr	r2, [r2, #4]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	4401      	add	r1, r0
 80076b8:	6019      	str	r1, [r3, #0]
 80076ba:	e7d7      	b.n	800766c <_free_r+0x24>
 80076bc:	d902      	bls.n	80076c4 <_free_r+0x7c>
 80076be:	230c      	movs	r3, #12
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	e7d3      	b.n	800766c <_free_r+0x24>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	1821      	adds	r1, r4, r0
 80076c8:	428a      	cmp	r2, r1
 80076ca:	bf04      	itt	eq
 80076cc:	6811      	ldreq	r1, [r2, #0]
 80076ce:	6852      	ldreq	r2, [r2, #4]
 80076d0:	6062      	str	r2, [r4, #4]
 80076d2:	bf04      	itt	eq
 80076d4:	1809      	addeq	r1, r1, r0
 80076d6:	6021      	streq	r1, [r4, #0]
 80076d8:	605c      	str	r4, [r3, #4]
 80076da:	e7c7      	b.n	800766c <_free_r+0x24>
 80076dc:	bd38      	pop	{r3, r4, r5, pc}
 80076de:	bf00      	nop
 80076e0:	200049ec 	.word	0x200049ec

080076e4 <_malloc_r>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	1ccd      	adds	r5, r1, #3
 80076e8:	f025 0503 	bic.w	r5, r5, #3
 80076ec:	3508      	adds	r5, #8
 80076ee:	2d0c      	cmp	r5, #12
 80076f0:	bf38      	it	cc
 80076f2:	250c      	movcc	r5, #12
 80076f4:	2d00      	cmp	r5, #0
 80076f6:	4606      	mov	r6, r0
 80076f8:	db01      	blt.n	80076fe <_malloc_r+0x1a>
 80076fa:	42a9      	cmp	r1, r5
 80076fc:	d903      	bls.n	8007706 <_malloc_r+0x22>
 80076fe:	230c      	movs	r3, #12
 8007700:	6033      	str	r3, [r6, #0]
 8007702:	2000      	movs	r0, #0
 8007704:	bd70      	pop	{r4, r5, r6, pc}
 8007706:	f000 fc27 	bl	8007f58 <__malloc_lock>
 800770a:	4a21      	ldr	r2, [pc, #132]	; (8007790 <_malloc_r+0xac>)
 800770c:	6814      	ldr	r4, [r2, #0]
 800770e:	4621      	mov	r1, r4
 8007710:	b991      	cbnz	r1, 8007738 <_malloc_r+0x54>
 8007712:	4c20      	ldr	r4, [pc, #128]	; (8007794 <_malloc_r+0xb0>)
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	b91b      	cbnz	r3, 8007720 <_malloc_r+0x3c>
 8007718:	4630      	mov	r0, r6
 800771a:	f000 f8b9 	bl	8007890 <_sbrk_r>
 800771e:	6020      	str	r0, [r4, #0]
 8007720:	4629      	mov	r1, r5
 8007722:	4630      	mov	r0, r6
 8007724:	f000 f8b4 	bl	8007890 <_sbrk_r>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d124      	bne.n	8007776 <_malloc_r+0x92>
 800772c:	230c      	movs	r3, #12
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	4630      	mov	r0, r6
 8007732:	f000 fc12 	bl	8007f5a <__malloc_unlock>
 8007736:	e7e4      	b.n	8007702 <_malloc_r+0x1e>
 8007738:	680b      	ldr	r3, [r1, #0]
 800773a:	1b5b      	subs	r3, r3, r5
 800773c:	d418      	bmi.n	8007770 <_malloc_r+0x8c>
 800773e:	2b0b      	cmp	r3, #11
 8007740:	d90f      	bls.n	8007762 <_malloc_r+0x7e>
 8007742:	600b      	str	r3, [r1, #0]
 8007744:	50cd      	str	r5, [r1, r3]
 8007746:	18cc      	adds	r4, r1, r3
 8007748:	4630      	mov	r0, r6
 800774a:	f000 fc06 	bl	8007f5a <__malloc_unlock>
 800774e:	f104 000b 	add.w	r0, r4, #11
 8007752:	1d23      	adds	r3, r4, #4
 8007754:	f020 0007 	bic.w	r0, r0, #7
 8007758:	1ac3      	subs	r3, r0, r3
 800775a:	d0d3      	beq.n	8007704 <_malloc_r+0x20>
 800775c:	425a      	negs	r2, r3
 800775e:	50e2      	str	r2, [r4, r3]
 8007760:	e7d0      	b.n	8007704 <_malloc_r+0x20>
 8007762:	428c      	cmp	r4, r1
 8007764:	684b      	ldr	r3, [r1, #4]
 8007766:	bf16      	itet	ne
 8007768:	6063      	strne	r3, [r4, #4]
 800776a:	6013      	streq	r3, [r2, #0]
 800776c:	460c      	movne	r4, r1
 800776e:	e7eb      	b.n	8007748 <_malloc_r+0x64>
 8007770:	460c      	mov	r4, r1
 8007772:	6849      	ldr	r1, [r1, #4]
 8007774:	e7cc      	b.n	8007710 <_malloc_r+0x2c>
 8007776:	1cc4      	adds	r4, r0, #3
 8007778:	f024 0403 	bic.w	r4, r4, #3
 800777c:	42a0      	cmp	r0, r4
 800777e:	d005      	beq.n	800778c <_malloc_r+0xa8>
 8007780:	1a21      	subs	r1, r4, r0
 8007782:	4630      	mov	r0, r6
 8007784:	f000 f884 	bl	8007890 <_sbrk_r>
 8007788:	3001      	adds	r0, #1
 800778a:	d0cf      	beq.n	800772c <_malloc_r+0x48>
 800778c:	6025      	str	r5, [r4, #0]
 800778e:	e7db      	b.n	8007748 <_malloc_r+0x64>
 8007790:	200049ec 	.word	0x200049ec
 8007794:	200049f0 	.word	0x200049f0

08007798 <iprintf>:
 8007798:	b40f      	push	{r0, r1, r2, r3}
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <iprintf+0x2c>)
 800779c:	b513      	push	{r0, r1, r4, lr}
 800779e:	681c      	ldr	r4, [r3, #0]
 80077a0:	b124      	cbz	r4, 80077ac <iprintf+0x14>
 80077a2:	69a3      	ldr	r3, [r4, #24]
 80077a4:	b913      	cbnz	r3, 80077ac <iprintf+0x14>
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fae8 	bl	8007d7c <__sinit>
 80077ac:	ab05      	add	r3, sp, #20
 80077ae:	9a04      	ldr	r2, [sp, #16]
 80077b0:	68a1      	ldr	r1, [r4, #8]
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 fbfb 	bl	8007fb0 <_vfiprintf_r>
 80077ba:	b002      	add	sp, #8
 80077bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c0:	b004      	add	sp, #16
 80077c2:	4770      	bx	lr
 80077c4:	20000058 	.word	0x20000058

080077c8 <_puts_r>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	460e      	mov	r6, r1
 80077cc:	4605      	mov	r5, r0
 80077ce:	b118      	cbz	r0, 80077d8 <_puts_r+0x10>
 80077d0:	6983      	ldr	r3, [r0, #24]
 80077d2:	b90b      	cbnz	r3, 80077d8 <_puts_r+0x10>
 80077d4:	f000 fad2 	bl	8007d7c <__sinit>
 80077d8:	69ab      	ldr	r3, [r5, #24]
 80077da:	68ac      	ldr	r4, [r5, #8]
 80077dc:	b913      	cbnz	r3, 80077e4 <_puts_r+0x1c>
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 facc 	bl	8007d7c <__sinit>
 80077e4:	4b23      	ldr	r3, [pc, #140]	; (8007874 <_puts_r+0xac>)
 80077e6:	429c      	cmp	r4, r3
 80077e8:	d117      	bne.n	800781a <_puts_r+0x52>
 80077ea:	686c      	ldr	r4, [r5, #4]
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	071b      	lsls	r3, r3, #28
 80077f0:	d51d      	bpl.n	800782e <_puts_r+0x66>
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	b1db      	cbz	r3, 800782e <_puts_r+0x66>
 80077f6:	3e01      	subs	r6, #1
 80077f8:	68a3      	ldr	r3, [r4, #8]
 80077fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077fe:	3b01      	subs	r3, #1
 8007800:	60a3      	str	r3, [r4, #8]
 8007802:	b9e9      	cbnz	r1, 8007840 <_puts_r+0x78>
 8007804:	2b00      	cmp	r3, #0
 8007806:	da2e      	bge.n	8007866 <_puts_r+0x9e>
 8007808:	4622      	mov	r2, r4
 800780a:	210a      	movs	r1, #10
 800780c:	4628      	mov	r0, r5
 800780e:	f000 f905 	bl	8007a1c <__swbuf_r>
 8007812:	3001      	adds	r0, #1
 8007814:	d011      	beq.n	800783a <_puts_r+0x72>
 8007816:	200a      	movs	r0, #10
 8007818:	e011      	b.n	800783e <_puts_r+0x76>
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <_puts_r+0xb0>)
 800781c:	429c      	cmp	r4, r3
 800781e:	d101      	bne.n	8007824 <_puts_r+0x5c>
 8007820:	68ac      	ldr	r4, [r5, #8]
 8007822:	e7e3      	b.n	80077ec <_puts_r+0x24>
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <_puts_r+0xb4>)
 8007826:	429c      	cmp	r4, r3
 8007828:	bf08      	it	eq
 800782a:	68ec      	ldreq	r4, [r5, #12]
 800782c:	e7de      	b.n	80077ec <_puts_r+0x24>
 800782e:	4621      	mov	r1, r4
 8007830:	4628      	mov	r0, r5
 8007832:	f000 f945 	bl	8007ac0 <__swsetup_r>
 8007836:	2800      	cmp	r0, #0
 8007838:	d0dd      	beq.n	80077f6 <_puts_r+0x2e>
 800783a:	f04f 30ff 	mov.w	r0, #4294967295
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	2b00      	cmp	r3, #0
 8007842:	da04      	bge.n	800784e <_puts_r+0x86>
 8007844:	69a2      	ldr	r2, [r4, #24]
 8007846:	429a      	cmp	r2, r3
 8007848:	dc06      	bgt.n	8007858 <_puts_r+0x90>
 800784a:	290a      	cmp	r1, #10
 800784c:	d004      	beq.n	8007858 <_puts_r+0x90>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	6022      	str	r2, [r4, #0]
 8007854:	7019      	strb	r1, [r3, #0]
 8007856:	e7cf      	b.n	80077f8 <_puts_r+0x30>
 8007858:	4622      	mov	r2, r4
 800785a:	4628      	mov	r0, r5
 800785c:	f000 f8de 	bl	8007a1c <__swbuf_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d1c9      	bne.n	80077f8 <_puts_r+0x30>
 8007864:	e7e9      	b.n	800783a <_puts_r+0x72>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	200a      	movs	r0, #10
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	6022      	str	r2, [r4, #0]
 800786e:	7018      	strb	r0, [r3, #0]
 8007870:	e7e5      	b.n	800783e <_puts_r+0x76>
 8007872:	bf00      	nop
 8007874:	080087e8 	.word	0x080087e8
 8007878:	08008808 	.word	0x08008808
 800787c:	080087c8 	.word	0x080087c8

08007880 <puts>:
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <puts+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f7ff bf9f 	b.w	80077c8 <_puts_r>
 800788a:	bf00      	nop
 800788c:	20000058 	.word	0x20000058

08007890 <_sbrk_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4c06      	ldr	r4, [pc, #24]	; (80078ac <_sbrk_r+0x1c>)
 8007894:	2300      	movs	r3, #0
 8007896:	4605      	mov	r5, r0
 8007898:	4608      	mov	r0, r1
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	f7fa f958 	bl	8001b50 <_sbrk>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_sbrk_r+0x1a>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_sbrk_r+0x1a>
 80078a8:	602b      	str	r3, [r5, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20006d64 	.word	0x20006d64

080078b0 <setbuf>:
 80078b0:	2900      	cmp	r1, #0
 80078b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b6:	bf0c      	ite	eq
 80078b8:	2202      	moveq	r2, #2
 80078ba:	2200      	movne	r2, #0
 80078bc:	f000 b800 	b.w	80078c0 <setvbuf>

080078c0 <setvbuf>:
 80078c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078c4:	461d      	mov	r5, r3
 80078c6:	4b51      	ldr	r3, [pc, #324]	; (8007a0c <setvbuf+0x14c>)
 80078c8:	681e      	ldr	r6, [r3, #0]
 80078ca:	4604      	mov	r4, r0
 80078cc:	460f      	mov	r7, r1
 80078ce:	4690      	mov	r8, r2
 80078d0:	b126      	cbz	r6, 80078dc <setvbuf+0x1c>
 80078d2:	69b3      	ldr	r3, [r6, #24]
 80078d4:	b913      	cbnz	r3, 80078dc <setvbuf+0x1c>
 80078d6:	4630      	mov	r0, r6
 80078d8:	f000 fa50 	bl	8007d7c <__sinit>
 80078dc:	4b4c      	ldr	r3, [pc, #304]	; (8007a10 <setvbuf+0x150>)
 80078de:	429c      	cmp	r4, r3
 80078e0:	d152      	bne.n	8007988 <setvbuf+0xc8>
 80078e2:	6874      	ldr	r4, [r6, #4]
 80078e4:	f1b8 0f02 	cmp.w	r8, #2
 80078e8:	d006      	beq.n	80078f8 <setvbuf+0x38>
 80078ea:	f1b8 0f01 	cmp.w	r8, #1
 80078ee:	f200 8089 	bhi.w	8007a04 <setvbuf+0x144>
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	f2c0 8086 	blt.w	8007a04 <setvbuf+0x144>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 f9d4 	bl	8007ca8 <_fflush_r>
 8007900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007902:	b141      	cbz	r1, 8007916 <setvbuf+0x56>
 8007904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007908:	4299      	cmp	r1, r3
 800790a:	d002      	beq.n	8007912 <setvbuf+0x52>
 800790c:	4630      	mov	r0, r6
 800790e:	f7ff fe9b 	bl	8007648 <_free_r>
 8007912:	2300      	movs	r3, #0
 8007914:	6363      	str	r3, [r4, #52]	; 0x34
 8007916:	2300      	movs	r3, #0
 8007918:	61a3      	str	r3, [r4, #24]
 800791a:	6063      	str	r3, [r4, #4]
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	061b      	lsls	r3, r3, #24
 8007920:	d503      	bpl.n	800792a <setvbuf+0x6a>
 8007922:	6921      	ldr	r1, [r4, #16]
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff fe8f 	bl	8007648 <_free_r>
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	f1b8 0f02 	cmp.w	r8, #2
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	d05d      	beq.n	80079f8 <setvbuf+0x138>
 800793c:	ab01      	add	r3, sp, #4
 800793e:	466a      	mov	r2, sp
 8007940:	4621      	mov	r1, r4
 8007942:	4630      	mov	r0, r6
 8007944:	f000 faa4 	bl	8007e90 <__swhatbuf_r>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	4318      	orrs	r0, r3
 800794c:	81a0      	strh	r0, [r4, #12]
 800794e:	bb2d      	cbnz	r5, 800799c <setvbuf+0xdc>
 8007950:	9d00      	ldr	r5, [sp, #0]
 8007952:	4628      	mov	r0, r5
 8007954:	f7ff fe54 	bl	8007600 <malloc>
 8007958:	4607      	mov	r7, r0
 800795a:	2800      	cmp	r0, #0
 800795c:	d14e      	bne.n	80079fc <setvbuf+0x13c>
 800795e:	f8dd 9000 	ldr.w	r9, [sp]
 8007962:	45a9      	cmp	r9, r5
 8007964:	d13c      	bne.n	80079e0 <setvbuf+0x120>
 8007966:	f04f 30ff 	mov.w	r0, #4294967295
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	f043 0302 	orr.w	r3, r3, #2
 8007970:	81a3      	strh	r3, [r4, #12]
 8007972:	2300      	movs	r3, #0
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	2301      	movs	r3, #1
 8007980:	6163      	str	r3, [r4, #20]
 8007982:	b003      	add	sp, #12
 8007984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007988:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <setvbuf+0x154>)
 800798a:	429c      	cmp	r4, r3
 800798c:	d101      	bne.n	8007992 <setvbuf+0xd2>
 800798e:	68b4      	ldr	r4, [r6, #8]
 8007990:	e7a8      	b.n	80078e4 <setvbuf+0x24>
 8007992:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <setvbuf+0x158>)
 8007994:	429c      	cmp	r4, r3
 8007996:	bf08      	it	eq
 8007998:	68f4      	ldreq	r4, [r6, #12]
 800799a:	e7a3      	b.n	80078e4 <setvbuf+0x24>
 800799c:	2f00      	cmp	r7, #0
 800799e:	d0d8      	beq.n	8007952 <setvbuf+0x92>
 80079a0:	69b3      	ldr	r3, [r6, #24]
 80079a2:	b913      	cbnz	r3, 80079aa <setvbuf+0xea>
 80079a4:	4630      	mov	r0, r6
 80079a6:	f000 f9e9 	bl	8007d7c <__sinit>
 80079aa:	f1b8 0f01 	cmp.w	r8, #1
 80079ae:	bf08      	it	eq
 80079b0:	89a3      	ldrheq	r3, [r4, #12]
 80079b2:	6027      	str	r7, [r4, #0]
 80079b4:	bf04      	itt	eq
 80079b6:	f043 0301 	orreq.w	r3, r3, #1
 80079ba:	81a3      	strheq	r3, [r4, #12]
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f013 0008 	ands.w	r0, r3, #8
 80079c2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80079c6:	d01b      	beq.n	8007a00 <setvbuf+0x140>
 80079c8:	f013 0001 	ands.w	r0, r3, #1
 80079cc:	bf18      	it	ne
 80079ce:	426d      	negne	r5, r5
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	bf1d      	ittte	ne
 80079d6:	60a3      	strne	r3, [r4, #8]
 80079d8:	61a5      	strne	r5, [r4, #24]
 80079da:	4618      	movne	r0, r3
 80079dc:	60a5      	streq	r5, [r4, #8]
 80079de:	e7d0      	b.n	8007982 <setvbuf+0xc2>
 80079e0:	4648      	mov	r0, r9
 80079e2:	f7ff fe0d 	bl	8007600 <malloc>
 80079e6:	4607      	mov	r7, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d0bc      	beq.n	8007966 <setvbuf+0xa6>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	464d      	mov	r5, r9
 80079f6:	e7d3      	b.n	80079a0 <setvbuf+0xe0>
 80079f8:	2000      	movs	r0, #0
 80079fa:	e7b6      	b.n	800796a <setvbuf+0xaa>
 80079fc:	46a9      	mov	r9, r5
 80079fe:	e7f5      	b.n	80079ec <setvbuf+0x12c>
 8007a00:	60a0      	str	r0, [r4, #8]
 8007a02:	e7be      	b.n	8007982 <setvbuf+0xc2>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	e7bb      	b.n	8007982 <setvbuf+0xc2>
 8007a0a:	bf00      	nop
 8007a0c:	20000058 	.word	0x20000058
 8007a10:	080087e8 	.word	0x080087e8
 8007a14:	08008808 	.word	0x08008808
 8007a18:	080087c8 	.word	0x080087c8

08007a1c <__swbuf_r>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	460e      	mov	r6, r1
 8007a20:	4614      	mov	r4, r2
 8007a22:	4605      	mov	r5, r0
 8007a24:	b118      	cbz	r0, 8007a2e <__swbuf_r+0x12>
 8007a26:	6983      	ldr	r3, [r0, #24]
 8007a28:	b90b      	cbnz	r3, 8007a2e <__swbuf_r+0x12>
 8007a2a:	f000 f9a7 	bl	8007d7c <__sinit>
 8007a2e:	4b21      	ldr	r3, [pc, #132]	; (8007ab4 <__swbuf_r+0x98>)
 8007a30:	429c      	cmp	r4, r3
 8007a32:	d12a      	bne.n	8007a8a <__swbuf_r+0x6e>
 8007a34:	686c      	ldr	r4, [r5, #4]
 8007a36:	69a3      	ldr	r3, [r4, #24]
 8007a38:	60a3      	str	r3, [r4, #8]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	071a      	lsls	r2, r3, #28
 8007a3e:	d52e      	bpl.n	8007a9e <__swbuf_r+0x82>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	b363      	cbz	r3, 8007a9e <__swbuf_r+0x82>
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	6820      	ldr	r0, [r4, #0]
 8007a48:	1ac0      	subs	r0, r0, r3
 8007a4a:	6963      	ldr	r3, [r4, #20]
 8007a4c:	b2f6      	uxtb	r6, r6
 8007a4e:	4283      	cmp	r3, r0
 8007a50:	4637      	mov	r7, r6
 8007a52:	dc04      	bgt.n	8007a5e <__swbuf_r+0x42>
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 f926 	bl	8007ca8 <_fflush_r>
 8007a5c:	bb28      	cbnz	r0, 8007aaa <__swbuf_r+0x8e>
 8007a5e:	68a3      	ldr	r3, [r4, #8]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	60a3      	str	r3, [r4, #8]
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	701e      	strb	r6, [r3, #0]
 8007a6c:	6963      	ldr	r3, [r4, #20]
 8007a6e:	3001      	adds	r0, #1
 8007a70:	4283      	cmp	r3, r0
 8007a72:	d004      	beq.n	8007a7e <__swbuf_r+0x62>
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	07db      	lsls	r3, r3, #31
 8007a78:	d519      	bpl.n	8007aae <__swbuf_r+0x92>
 8007a7a:	2e0a      	cmp	r6, #10
 8007a7c:	d117      	bne.n	8007aae <__swbuf_r+0x92>
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 f911 	bl	8007ca8 <_fflush_r>
 8007a86:	b190      	cbz	r0, 8007aae <__swbuf_r+0x92>
 8007a88:	e00f      	b.n	8007aaa <__swbuf_r+0x8e>
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <__swbuf_r+0x9c>)
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d101      	bne.n	8007a94 <__swbuf_r+0x78>
 8007a90:	68ac      	ldr	r4, [r5, #8]
 8007a92:	e7d0      	b.n	8007a36 <__swbuf_r+0x1a>
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <__swbuf_r+0xa0>)
 8007a96:	429c      	cmp	r4, r3
 8007a98:	bf08      	it	eq
 8007a9a:	68ec      	ldreq	r4, [r5, #12]
 8007a9c:	e7cb      	b.n	8007a36 <__swbuf_r+0x1a>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f80d 	bl	8007ac0 <__swsetup_r>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d0cc      	beq.n	8007a44 <__swbuf_r+0x28>
 8007aaa:	f04f 37ff 	mov.w	r7, #4294967295
 8007aae:	4638      	mov	r0, r7
 8007ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	080087e8 	.word	0x080087e8
 8007ab8:	08008808 	.word	0x08008808
 8007abc:	080087c8 	.word	0x080087c8

08007ac0 <__swsetup_r>:
 8007ac0:	4b32      	ldr	r3, [pc, #200]	; (8007b8c <__swsetup_r+0xcc>)
 8007ac2:	b570      	push	{r4, r5, r6, lr}
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460c      	mov	r4, r1
 8007aca:	b125      	cbz	r5, 8007ad6 <__swsetup_r+0x16>
 8007acc:	69ab      	ldr	r3, [r5, #24]
 8007ace:	b913      	cbnz	r3, 8007ad6 <__swsetup_r+0x16>
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 f953 	bl	8007d7c <__sinit>
 8007ad6:	4b2e      	ldr	r3, [pc, #184]	; (8007b90 <__swsetup_r+0xd0>)
 8007ad8:	429c      	cmp	r4, r3
 8007ada:	d10f      	bne.n	8007afc <__swsetup_r+0x3c>
 8007adc:	686c      	ldr	r4, [r5, #4]
 8007ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	0715      	lsls	r5, r2, #28
 8007ae6:	d42c      	bmi.n	8007b42 <__swsetup_r+0x82>
 8007ae8:	06d0      	lsls	r0, r2, #27
 8007aea:	d411      	bmi.n	8007b10 <__swsetup_r+0x50>
 8007aec:	2209      	movs	r2, #9
 8007aee:	6032      	str	r2, [r6, #0]
 8007af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	f04f 30ff 	mov.w	r0, #4294967295
 8007afa:	e03e      	b.n	8007b7a <__swsetup_r+0xba>
 8007afc:	4b25      	ldr	r3, [pc, #148]	; (8007b94 <__swsetup_r+0xd4>)
 8007afe:	429c      	cmp	r4, r3
 8007b00:	d101      	bne.n	8007b06 <__swsetup_r+0x46>
 8007b02:	68ac      	ldr	r4, [r5, #8]
 8007b04:	e7eb      	b.n	8007ade <__swsetup_r+0x1e>
 8007b06:	4b24      	ldr	r3, [pc, #144]	; (8007b98 <__swsetup_r+0xd8>)
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	bf08      	it	eq
 8007b0c:	68ec      	ldreq	r4, [r5, #12]
 8007b0e:	e7e6      	b.n	8007ade <__swsetup_r+0x1e>
 8007b10:	0751      	lsls	r1, r2, #29
 8007b12:	d512      	bpl.n	8007b3a <__swsetup_r+0x7a>
 8007b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b16:	b141      	cbz	r1, 8007b2a <__swsetup_r+0x6a>
 8007b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <__swsetup_r+0x66>
 8007b20:	4630      	mov	r0, r6
 8007b22:	f7ff fd91 	bl	8007648 <_free_r>
 8007b26:	2300      	movs	r3, #0
 8007b28:	6363      	str	r3, [r4, #52]	; 0x34
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	2300      	movs	r3, #0
 8007b34:	6063      	str	r3, [r4, #4]
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f043 0308 	orr.w	r3, r3, #8
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	b94b      	cbnz	r3, 8007b5a <__swsetup_r+0x9a>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b50:	d003      	beq.n	8007b5a <__swsetup_r+0x9a>
 8007b52:	4621      	mov	r1, r4
 8007b54:	4630      	mov	r0, r6
 8007b56:	f000 f9bf 	bl	8007ed8 <__smakebuf_r>
 8007b5a:	89a2      	ldrh	r2, [r4, #12]
 8007b5c:	f012 0301 	ands.w	r3, r2, #1
 8007b60:	d00c      	beq.n	8007b7c <__swsetup_r+0xbc>
 8007b62:	2300      	movs	r3, #0
 8007b64:	60a3      	str	r3, [r4, #8]
 8007b66:	6963      	ldr	r3, [r4, #20]
 8007b68:	425b      	negs	r3, r3
 8007b6a:	61a3      	str	r3, [r4, #24]
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	b953      	cbnz	r3, 8007b86 <__swsetup_r+0xc6>
 8007b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b78:	d1ba      	bne.n	8007af0 <__swsetup_r+0x30>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	0792      	lsls	r2, r2, #30
 8007b7e:	bf58      	it	pl
 8007b80:	6963      	ldrpl	r3, [r4, #20]
 8007b82:	60a3      	str	r3, [r4, #8]
 8007b84:	e7f2      	b.n	8007b6c <__swsetup_r+0xac>
 8007b86:	2000      	movs	r0, #0
 8007b88:	e7f7      	b.n	8007b7a <__swsetup_r+0xba>
 8007b8a:	bf00      	nop
 8007b8c:	20000058 	.word	0x20000058
 8007b90:	080087e8 	.word	0x080087e8
 8007b94:	08008808 	.word	0x08008808
 8007b98:	080087c8 	.word	0x080087c8

08007b9c <__sflush_r>:
 8007b9c:	898a      	ldrh	r2, [r1, #12]
 8007b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	0710      	lsls	r0, r2, #28
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	d458      	bmi.n	8007c5c <__sflush_r+0xc0>
 8007baa:	684b      	ldr	r3, [r1, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc05      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dc02      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d0f9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bc8:	682f      	ldr	r7, [r5, #0]
 8007bca:	6a21      	ldr	r1, [r4, #32]
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	d032      	beq.n	8007c36 <__sflush_r+0x9a>
 8007bd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	075a      	lsls	r2, r3, #29
 8007bd6:	d505      	bpl.n	8007be4 <__sflush_r+0x48>
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	1ac0      	subs	r0, r0, r3
 8007bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bde:	b10b      	cbz	r3, 8007be4 <__sflush_r+0x48>
 8007be0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be2:	1ac0      	subs	r0, r0, r3
 8007be4:	2300      	movs	r3, #0
 8007be6:	4602      	mov	r2, r0
 8007be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bea:	6a21      	ldr	r1, [r4, #32]
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b0      	blx	r6
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	d106      	bne.n	8007c04 <__sflush_r+0x68>
 8007bf6:	6829      	ldr	r1, [r5, #0]
 8007bf8:	291d      	cmp	r1, #29
 8007bfa:	d848      	bhi.n	8007c8e <__sflush_r+0xf2>
 8007bfc:	4a29      	ldr	r2, [pc, #164]	; (8007ca4 <__sflush_r+0x108>)
 8007bfe:	40ca      	lsrs	r2, r1
 8007c00:	07d6      	lsls	r6, r2, #31
 8007c02:	d544      	bpl.n	8007c8e <__sflush_r+0xf2>
 8007c04:	2200      	movs	r2, #0
 8007c06:	6062      	str	r2, [r4, #4]
 8007c08:	04d9      	lsls	r1, r3, #19
 8007c0a:	6922      	ldr	r2, [r4, #16]
 8007c0c:	6022      	str	r2, [r4, #0]
 8007c0e:	d504      	bpl.n	8007c1a <__sflush_r+0x7e>
 8007c10:	1c42      	adds	r2, r0, #1
 8007c12:	d101      	bne.n	8007c18 <__sflush_r+0x7c>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b903      	cbnz	r3, 8007c1a <__sflush_r+0x7e>
 8007c18:	6560      	str	r0, [r4, #84]	; 0x54
 8007c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c1c:	602f      	str	r7, [r5, #0]
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	d0c9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c26:	4299      	cmp	r1, r3
 8007c28:	d002      	beq.n	8007c30 <__sflush_r+0x94>
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f7ff fd0c 	bl	8007648 <_free_r>
 8007c30:	2000      	movs	r0, #0
 8007c32:	6360      	str	r0, [r4, #52]	; 0x34
 8007c34:	e7c0      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c36:	2301      	movs	r3, #1
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b0      	blx	r6
 8007c3c:	1c41      	adds	r1, r0, #1
 8007c3e:	d1c8      	bne.n	8007bd2 <__sflush_r+0x36>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c5      	beq.n	8007bd2 <__sflush_r+0x36>
 8007c46:	2b1d      	cmp	r3, #29
 8007c48:	d001      	beq.n	8007c4e <__sflush_r+0xb2>
 8007c4a:	2b16      	cmp	r3, #22
 8007c4c:	d101      	bne.n	8007c52 <__sflush_r+0xb6>
 8007c4e:	602f      	str	r7, [r5, #0]
 8007c50:	e7b1      	b.n	8007bb6 <__sflush_r+0x1a>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	e7ad      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c5c:	690f      	ldr	r7, [r1, #16]
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	d0a9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c62:	0793      	lsls	r3, r2, #30
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	bf08      	it	eq
 8007c68:	694b      	ldreq	r3, [r1, #20]
 8007c6a:	600f      	str	r7, [r1, #0]
 8007c6c:	bf18      	it	ne
 8007c6e:	2300      	movne	r3, #0
 8007c70:	eba6 0807 	sub.w	r8, r6, r7
 8007c74:	608b      	str	r3, [r1, #8]
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	dd9c      	ble.n	8007bb6 <__sflush_r+0x1a>
 8007c7c:	4643      	mov	r3, r8
 8007c7e:	463a      	mov	r2, r7
 8007c80:	6a21      	ldr	r1, [r4, #32]
 8007c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b0      	blx	r6
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	dc06      	bgt.n	8007c9a <__sflush_r+0xfe>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e78e      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c9a:	4407      	add	r7, r0
 8007c9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ca0:	e7e9      	b.n	8007c76 <__sflush_r+0xda>
 8007ca2:	bf00      	nop
 8007ca4:	20400001 	.word	0x20400001

08007ca8 <_fflush_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	690b      	ldr	r3, [r1, #16]
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	b1db      	cbz	r3, 8007cea <_fflush_r+0x42>
 8007cb2:	b118      	cbz	r0, 8007cbc <_fflush_r+0x14>
 8007cb4:	6983      	ldr	r3, [r0, #24]
 8007cb6:	b90b      	cbnz	r3, 8007cbc <_fflush_r+0x14>
 8007cb8:	f000 f860 	bl	8007d7c <__sinit>
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <_fflush_r+0x48>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	d109      	bne.n	8007cd6 <_fflush_r+0x2e>
 8007cc2:	686c      	ldr	r4, [r5, #4]
 8007cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc8:	b17b      	cbz	r3, 8007cea <_fflush_r+0x42>
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4628      	mov	r0, r5
 8007cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd2:	f7ff bf63 	b.w	8007b9c <__sflush_r>
 8007cd6:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <_fflush_r+0x4c>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d101      	bne.n	8007ce0 <_fflush_r+0x38>
 8007cdc:	68ac      	ldr	r4, [r5, #8]
 8007cde:	e7f1      	b.n	8007cc4 <_fflush_r+0x1c>
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <_fflush_r+0x50>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	bf08      	it	eq
 8007ce6:	68ec      	ldreq	r4, [r5, #12]
 8007ce8:	e7ec      	b.n	8007cc4 <_fflush_r+0x1c>
 8007cea:	2000      	movs	r0, #0
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	bf00      	nop
 8007cf0:	080087e8 	.word	0x080087e8
 8007cf4:	08008808 	.word	0x08008808
 8007cf8:	080087c8 	.word	0x080087c8

08007cfc <std>:
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	b510      	push	{r4, lr}
 8007d00:	4604      	mov	r4, r0
 8007d02:	e9c0 3300 	strd	r3, r3, [r0]
 8007d06:	6083      	str	r3, [r0, #8]
 8007d08:	8181      	strh	r1, [r0, #12]
 8007d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d0c:	81c2      	strh	r2, [r0, #14]
 8007d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d12:	6183      	str	r3, [r0, #24]
 8007d14:	4619      	mov	r1, r3
 8007d16:	2208      	movs	r2, #8
 8007d18:	305c      	adds	r0, #92	; 0x5c
 8007d1a:	f7ff fc8c 	bl	8007636 <memset>
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <std+0x38>)
 8007d20:	6263      	str	r3, [r4, #36]	; 0x24
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <std+0x3c>)
 8007d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d26:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <std+0x40>)
 8007d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d2a:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <std+0x44>)
 8007d2c:	6224      	str	r4, [r4, #32]
 8007d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	080084ed 	.word	0x080084ed
 8007d38:	0800850f 	.word	0x0800850f
 8007d3c:	08008547 	.word	0x08008547
 8007d40:	0800856b 	.word	0x0800856b

08007d44 <_cleanup_r>:
 8007d44:	4901      	ldr	r1, [pc, #4]	; (8007d4c <_cleanup_r+0x8>)
 8007d46:	f000 b885 	b.w	8007e54 <_fwalk_reent>
 8007d4a:	bf00      	nop
 8007d4c:	08007ca9 	.word	0x08007ca9

08007d50 <__sfmoreglue>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	1e4a      	subs	r2, r1, #1
 8007d54:	2568      	movs	r5, #104	; 0x68
 8007d56:	4355      	muls	r5, r2
 8007d58:	460e      	mov	r6, r1
 8007d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d5e:	f7ff fcc1 	bl	80076e4 <_malloc_r>
 8007d62:	4604      	mov	r4, r0
 8007d64:	b140      	cbz	r0, 8007d78 <__sfmoreglue+0x28>
 8007d66:	2100      	movs	r1, #0
 8007d68:	e9c0 1600 	strd	r1, r6, [r0]
 8007d6c:	300c      	adds	r0, #12
 8007d6e:	60a0      	str	r0, [r4, #8]
 8007d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d74:	f7ff fc5f 	bl	8007636 <memset>
 8007d78:	4620      	mov	r0, r4
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}

08007d7c <__sinit>:
 8007d7c:	6983      	ldr	r3, [r0, #24]
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	4604      	mov	r4, r0
 8007d82:	bb33      	cbnz	r3, 8007dd2 <__sinit+0x56>
 8007d84:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d88:	6503      	str	r3, [r0, #80]	; 0x50
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <__sinit+0x58>)
 8007d8c:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <__sinit+0x5c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6282      	str	r2, [r0, #40]	; 0x28
 8007d92:	4298      	cmp	r0, r3
 8007d94:	bf04      	itt	eq
 8007d96:	2301      	moveq	r3, #1
 8007d98:	6183      	streq	r3, [r0, #24]
 8007d9a:	f000 f81f 	bl	8007ddc <__sfp>
 8007d9e:	6060      	str	r0, [r4, #4]
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 f81b 	bl	8007ddc <__sfp>
 8007da6:	60a0      	str	r0, [r4, #8]
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 f817 	bl	8007ddc <__sfp>
 8007dae:	2200      	movs	r2, #0
 8007db0:	60e0      	str	r0, [r4, #12]
 8007db2:	2104      	movs	r1, #4
 8007db4:	6860      	ldr	r0, [r4, #4]
 8007db6:	f7ff ffa1 	bl	8007cfc <std>
 8007dba:	2201      	movs	r2, #1
 8007dbc:	2109      	movs	r1, #9
 8007dbe:	68a0      	ldr	r0, [r4, #8]
 8007dc0:	f7ff ff9c 	bl	8007cfc <std>
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	2112      	movs	r1, #18
 8007dc8:	68e0      	ldr	r0, [r4, #12]
 8007dca:	f7ff ff97 	bl	8007cfc <std>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	61a3      	str	r3, [r4, #24]
 8007dd2:	bd10      	pop	{r4, pc}
 8007dd4:	080087c4 	.word	0x080087c4
 8007dd8:	08007d45 	.word	0x08007d45

08007ddc <__sfp>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	4b1b      	ldr	r3, [pc, #108]	; (8007e4c <__sfp+0x70>)
 8007de0:	681e      	ldr	r6, [r3, #0]
 8007de2:	69b3      	ldr	r3, [r6, #24]
 8007de4:	4607      	mov	r7, r0
 8007de6:	b913      	cbnz	r3, 8007dee <__sfp+0x12>
 8007de8:	4630      	mov	r0, r6
 8007dea:	f7ff ffc7 	bl	8007d7c <__sinit>
 8007dee:	3648      	adds	r6, #72	; 0x48
 8007df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	d503      	bpl.n	8007e00 <__sfp+0x24>
 8007df8:	6833      	ldr	r3, [r6, #0]
 8007dfa:	b133      	cbz	r3, 8007e0a <__sfp+0x2e>
 8007dfc:	6836      	ldr	r6, [r6, #0]
 8007dfe:	e7f7      	b.n	8007df0 <__sfp+0x14>
 8007e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e04:	b16d      	cbz	r5, 8007e22 <__sfp+0x46>
 8007e06:	3468      	adds	r4, #104	; 0x68
 8007e08:	e7f4      	b.n	8007df4 <__sfp+0x18>
 8007e0a:	2104      	movs	r1, #4
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff ff9f 	bl	8007d50 <__sfmoreglue>
 8007e12:	6030      	str	r0, [r6, #0]
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d1f1      	bne.n	8007dfc <__sfp+0x20>
 8007e18:	230c      	movs	r3, #12
 8007e1a:	603b      	str	r3, [r7, #0]
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	4620      	mov	r0, r4
 8007e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e22:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <__sfp+0x74>)
 8007e24:	6665      	str	r5, [r4, #100]	; 0x64
 8007e26:	e9c4 5500 	strd	r5, r5, [r4]
 8007e2a:	60a5      	str	r5, [r4, #8]
 8007e2c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007e30:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007e34:	2208      	movs	r2, #8
 8007e36:	4629      	mov	r1, r5
 8007e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e3c:	f7ff fbfb 	bl	8007636 <memset>
 8007e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e48:	e7e9      	b.n	8007e1e <__sfp+0x42>
 8007e4a:	bf00      	nop
 8007e4c:	080087c4 	.word	0x080087c4
 8007e50:	ffff0001 	.word	0xffff0001

08007e54 <_fwalk_reent>:
 8007e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e58:	4680      	mov	r8, r0
 8007e5a:	4689      	mov	r9, r1
 8007e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e60:	2600      	movs	r6, #0
 8007e62:	b914      	cbnz	r4, 8007e6a <_fwalk_reent+0x16>
 8007e64:	4630      	mov	r0, r6
 8007e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e6e:	3f01      	subs	r7, #1
 8007e70:	d501      	bpl.n	8007e76 <_fwalk_reent+0x22>
 8007e72:	6824      	ldr	r4, [r4, #0]
 8007e74:	e7f5      	b.n	8007e62 <_fwalk_reent+0xe>
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d907      	bls.n	8007e8c <_fwalk_reent+0x38>
 8007e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e80:	3301      	adds	r3, #1
 8007e82:	d003      	beq.n	8007e8c <_fwalk_reent+0x38>
 8007e84:	4629      	mov	r1, r5
 8007e86:	4640      	mov	r0, r8
 8007e88:	47c8      	blx	r9
 8007e8a:	4306      	orrs	r6, r0
 8007e8c:	3568      	adds	r5, #104	; 0x68
 8007e8e:	e7ee      	b.n	8007e6e <_fwalk_reent+0x1a>

08007e90 <__swhatbuf_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	460e      	mov	r6, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	b096      	sub	sp, #88	; 0x58
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	da07      	bge.n	8007eb2 <__swhatbuf_r+0x22>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	89b3      	ldrh	r3, [r6, #12]
 8007ea8:	061a      	lsls	r2, r3, #24
 8007eaa:	d410      	bmi.n	8007ece <__swhatbuf_r+0x3e>
 8007eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb0:	e00e      	b.n	8007ed0 <__swhatbuf_r+0x40>
 8007eb2:	466a      	mov	r2, sp
 8007eb4:	f000 fb80 	bl	80085b8 <_fstat_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	dbf2      	blt.n	8007ea2 <__swhatbuf_r+0x12>
 8007ebc:	9a01      	ldr	r2, [sp, #4]
 8007ebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ec6:	425a      	negs	r2, r3
 8007ec8:	415a      	adcs	r2, r3
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	e7ee      	b.n	8007eac <__swhatbuf_r+0x1c>
 8007ece:	2340      	movs	r3, #64	; 0x40
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	b016      	add	sp, #88	; 0x58
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}

08007ed8 <__smakebuf_r>:
 8007ed8:	898b      	ldrh	r3, [r1, #12]
 8007eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007edc:	079d      	lsls	r5, r3, #30
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	d507      	bpl.n	8007ef4 <__smakebuf_r+0x1c>
 8007ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	6123      	str	r3, [r4, #16]
 8007eec:	2301      	movs	r3, #1
 8007eee:	6163      	str	r3, [r4, #20]
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	ab01      	add	r3, sp, #4
 8007ef6:	466a      	mov	r2, sp
 8007ef8:	f7ff ffca 	bl	8007e90 <__swhatbuf_r>
 8007efc:	9900      	ldr	r1, [sp, #0]
 8007efe:	4605      	mov	r5, r0
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7ff fbef 	bl	80076e4 <_malloc_r>
 8007f06:	b948      	cbnz	r0, 8007f1c <__smakebuf_r+0x44>
 8007f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0c:	059a      	lsls	r2, r3, #22
 8007f0e:	d4ef      	bmi.n	8007ef0 <__smakebuf_r+0x18>
 8007f10:	f023 0303 	bic.w	r3, r3, #3
 8007f14:	f043 0302 	orr.w	r3, r3, #2
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	e7e3      	b.n	8007ee4 <__smakebuf_r+0xc>
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <__smakebuf_r+0x7c>)
 8007f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	6020      	str	r0, [r4, #0]
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	6163      	str	r3, [r4, #20]
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	6120      	str	r0, [r4, #16]
 8007f32:	b15b      	cbz	r3, 8007f4c <__smakebuf_r+0x74>
 8007f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 fb4f 	bl	80085dc <_isatty_r>
 8007f3e:	b128      	cbz	r0, 8007f4c <__smakebuf_r+0x74>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	431d      	orrs	r5, r3
 8007f50:	81a5      	strh	r5, [r4, #12]
 8007f52:	e7cd      	b.n	8007ef0 <__smakebuf_r+0x18>
 8007f54:	08007d45 	.word	0x08007d45

08007f58 <__malloc_lock>:
 8007f58:	4770      	bx	lr

08007f5a <__malloc_unlock>:
 8007f5a:	4770      	bx	lr

08007f5c <__sfputc_r>:
 8007f5c:	6893      	ldr	r3, [r2, #8]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	b410      	push	{r4}
 8007f64:	6093      	str	r3, [r2, #8]
 8007f66:	da08      	bge.n	8007f7a <__sfputc_r+0x1e>
 8007f68:	6994      	ldr	r4, [r2, #24]
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	db01      	blt.n	8007f72 <__sfputc_r+0x16>
 8007f6e:	290a      	cmp	r1, #10
 8007f70:	d103      	bne.n	8007f7a <__sfputc_r+0x1e>
 8007f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f76:	f7ff bd51 	b.w	8007a1c <__swbuf_r>
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	1c58      	adds	r0, r3, #1
 8007f7e:	6010      	str	r0, [r2, #0]
 8007f80:	7019      	strb	r1, [r3, #0]
 8007f82:	4608      	mov	r0, r1
 8007f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <__sfputs_r>:
 8007f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	460f      	mov	r7, r1
 8007f90:	4614      	mov	r4, r2
 8007f92:	18d5      	adds	r5, r2, r3
 8007f94:	42ac      	cmp	r4, r5
 8007f96:	d101      	bne.n	8007f9c <__sfputs_r+0x12>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e007      	b.n	8007fac <__sfputs_r+0x22>
 8007f9c:	463a      	mov	r2, r7
 8007f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffda 	bl	8007f5c <__sfputc_r>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d1f3      	bne.n	8007f94 <__sfputs_r+0xa>
 8007fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fb0 <_vfiprintf_r>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	b09d      	sub	sp, #116	; 0x74
 8007fb8:	4617      	mov	r7, r2
 8007fba:	461d      	mov	r5, r3
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	b118      	cbz	r0, 8007fc8 <_vfiprintf_r+0x18>
 8007fc0:	6983      	ldr	r3, [r0, #24]
 8007fc2:	b90b      	cbnz	r3, 8007fc8 <_vfiprintf_r+0x18>
 8007fc4:	f7ff feda 	bl	8007d7c <__sinit>
 8007fc8:	4b7c      	ldr	r3, [pc, #496]	; (80081bc <_vfiprintf_r+0x20c>)
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d158      	bne.n	8008080 <_vfiprintf_r+0xd0>
 8007fce:	6874      	ldr	r4, [r6, #4]
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	0718      	lsls	r0, r3, #28
 8007fd4:	d55e      	bpl.n	8008094 <_vfiprintf_r+0xe4>
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d05b      	beq.n	8008094 <_vfiprintf_r+0xe4>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fe6:	2330      	movs	r3, #48	; 0x30
 8007fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fec:	9503      	str	r5, [sp, #12]
 8007fee:	f04f 0b01 	mov.w	fp, #1
 8007ff2:	46b8      	mov	r8, r7
 8007ff4:	4645      	mov	r5, r8
 8007ff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ffa:	b10b      	cbz	r3, 8008000 <_vfiprintf_r+0x50>
 8007ffc:	2b25      	cmp	r3, #37	; 0x25
 8007ffe:	d154      	bne.n	80080aa <_vfiprintf_r+0xfa>
 8008000:	ebb8 0a07 	subs.w	sl, r8, r7
 8008004:	d00b      	beq.n	800801e <_vfiprintf_r+0x6e>
 8008006:	4653      	mov	r3, sl
 8008008:	463a      	mov	r2, r7
 800800a:	4621      	mov	r1, r4
 800800c:	4630      	mov	r0, r6
 800800e:	f7ff ffbc 	bl	8007f8a <__sfputs_r>
 8008012:	3001      	adds	r0, #1
 8008014:	f000 80c2 	beq.w	800819c <_vfiprintf_r+0x1ec>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	4453      	add	r3, sl
 800801c:	9309      	str	r3, [sp, #36]	; 0x24
 800801e:	f898 3000 	ldrb.w	r3, [r8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80ba 	beq.w	800819c <_vfiprintf_r+0x1ec>
 8008028:	2300      	movs	r3, #0
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	9307      	str	r3, [sp, #28]
 8008036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800803a:	931a      	str	r3, [sp, #104]	; 0x68
 800803c:	46a8      	mov	r8, r5
 800803e:	2205      	movs	r2, #5
 8008040:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008044:	485e      	ldr	r0, [pc, #376]	; (80081c0 <_vfiprintf_r+0x210>)
 8008046:	f7f8 f8cb 	bl	80001e0 <memchr>
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	bb78      	cbnz	r0, 80080ae <_vfiprintf_r+0xfe>
 800804e:	06d9      	lsls	r1, r3, #27
 8008050:	bf44      	itt	mi
 8008052:	2220      	movmi	r2, #32
 8008054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008058:	071a      	lsls	r2, r3, #28
 800805a:	bf44      	itt	mi
 800805c:	222b      	movmi	r2, #43	; 0x2b
 800805e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008062:	782a      	ldrb	r2, [r5, #0]
 8008064:	2a2a      	cmp	r2, #42	; 0x2a
 8008066:	d02a      	beq.n	80080be <_vfiprintf_r+0x10e>
 8008068:	9a07      	ldr	r2, [sp, #28]
 800806a:	46a8      	mov	r8, r5
 800806c:	2000      	movs	r0, #0
 800806e:	250a      	movs	r5, #10
 8008070:	4641      	mov	r1, r8
 8008072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008076:	3b30      	subs	r3, #48	; 0x30
 8008078:	2b09      	cmp	r3, #9
 800807a:	d969      	bls.n	8008150 <_vfiprintf_r+0x1a0>
 800807c:	b360      	cbz	r0, 80080d8 <_vfiprintf_r+0x128>
 800807e:	e024      	b.n	80080ca <_vfiprintf_r+0x11a>
 8008080:	4b50      	ldr	r3, [pc, #320]	; (80081c4 <_vfiprintf_r+0x214>)
 8008082:	429c      	cmp	r4, r3
 8008084:	d101      	bne.n	800808a <_vfiprintf_r+0xda>
 8008086:	68b4      	ldr	r4, [r6, #8]
 8008088:	e7a2      	b.n	8007fd0 <_vfiprintf_r+0x20>
 800808a:	4b4f      	ldr	r3, [pc, #316]	; (80081c8 <_vfiprintf_r+0x218>)
 800808c:	429c      	cmp	r4, r3
 800808e:	bf08      	it	eq
 8008090:	68f4      	ldreq	r4, [r6, #12]
 8008092:	e79d      	b.n	8007fd0 <_vfiprintf_r+0x20>
 8008094:	4621      	mov	r1, r4
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff fd12 	bl	8007ac0 <__swsetup_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	d09d      	beq.n	8007fdc <_vfiprintf_r+0x2c>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b01d      	add	sp, #116	; 0x74
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080aa:	46a8      	mov	r8, r5
 80080ac:	e7a2      	b.n	8007ff4 <_vfiprintf_r+0x44>
 80080ae:	4a44      	ldr	r2, [pc, #272]	; (80081c0 <_vfiprintf_r+0x210>)
 80080b0:	1a80      	subs	r0, r0, r2
 80080b2:	fa0b f000 	lsl.w	r0, fp, r0
 80080b6:	4318      	orrs	r0, r3
 80080b8:	9004      	str	r0, [sp, #16]
 80080ba:	4645      	mov	r5, r8
 80080bc:	e7be      	b.n	800803c <_vfiprintf_r+0x8c>
 80080be:	9a03      	ldr	r2, [sp, #12]
 80080c0:	1d11      	adds	r1, r2, #4
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	9103      	str	r1, [sp, #12]
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	db01      	blt.n	80080ce <_vfiprintf_r+0x11e>
 80080ca:	9207      	str	r2, [sp, #28]
 80080cc:	e004      	b.n	80080d8 <_vfiprintf_r+0x128>
 80080ce:	4252      	negs	r2, r2
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	9207      	str	r2, [sp, #28]
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	f898 3000 	ldrb.w	r3, [r8]
 80080dc:	2b2e      	cmp	r3, #46	; 0x2e
 80080de:	d10e      	bne.n	80080fe <_vfiprintf_r+0x14e>
 80080e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d138      	bne.n	800815a <_vfiprintf_r+0x1aa>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	9203      	str	r2, [sp, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bfb8      	it	lt
 80080f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f8:	f108 0802 	add.w	r8, r8, #2
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	4d33      	ldr	r5, [pc, #204]	; (80081cc <_vfiprintf_r+0x21c>)
 8008100:	f898 1000 	ldrb.w	r1, [r8]
 8008104:	2203      	movs	r2, #3
 8008106:	4628      	mov	r0, r5
 8008108:	f7f8 f86a 	bl	80001e0 <memchr>
 800810c:	b140      	cbz	r0, 8008120 <_vfiprintf_r+0x170>
 800810e:	2340      	movs	r3, #64	; 0x40
 8008110:	1b40      	subs	r0, r0, r5
 8008112:	fa03 f000 	lsl.w	r0, r3, r0
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	4303      	orrs	r3, r0
 800811a:	f108 0801 	add.w	r8, r8, #1
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	f898 1000 	ldrb.w	r1, [r8]
 8008124:	482a      	ldr	r0, [pc, #168]	; (80081d0 <_vfiprintf_r+0x220>)
 8008126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800812a:	2206      	movs	r2, #6
 800812c:	f108 0701 	add.w	r7, r8, #1
 8008130:	f7f8 f856 	bl	80001e0 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d037      	beq.n	80081a8 <_vfiprintf_r+0x1f8>
 8008138:	4b26      	ldr	r3, [pc, #152]	; (80081d4 <_vfiprintf_r+0x224>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_vfiprintf_r+0x1d4>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	444b      	add	r3, r9
 800814c:	9309      	str	r3, [sp, #36]	; 0x24
 800814e:	e750      	b.n	8007ff2 <_vfiprintf_r+0x42>
 8008150:	fb05 3202 	mla	r2, r5, r2, r3
 8008154:	2001      	movs	r0, #1
 8008156:	4688      	mov	r8, r1
 8008158:	e78a      	b.n	8008070 <_vfiprintf_r+0xc0>
 800815a:	2300      	movs	r3, #0
 800815c:	f108 0801 	add.w	r8, r8, #1
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	4619      	mov	r1, r3
 8008164:	250a      	movs	r5, #10
 8008166:	4640      	mov	r0, r8
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	; 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_vfiprintf_r+0x1ca>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c3      	beq.n	80080fe <_vfiprintf_r+0x14e>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c1      	b.n	80080fe <_vfiprintf_r+0x14e>
 800817a:	fb05 2101 	mla	r1, r5, r1, r2
 800817e:	2301      	movs	r3, #1
 8008180:	4680      	mov	r8, r0
 8008182:	e7f0      	b.n	8008166 <_vfiprintf_r+0x1b6>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4622      	mov	r2, r4
 800818a:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <_vfiprintf_r+0x228>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4630      	mov	r0, r6
 8008190:	f3af 8000 	nop.w
 8008194:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008198:	4681      	mov	r9, r0
 800819a:	d1d5      	bne.n	8008148 <_vfiprintf_r+0x198>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	065b      	lsls	r3, r3, #25
 80081a0:	f53f af7e 	bmi.w	80080a0 <_vfiprintf_r+0xf0>
 80081a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a6:	e77d      	b.n	80080a4 <_vfiprintf_r+0xf4>
 80081a8:	ab03      	add	r3, sp, #12
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4622      	mov	r2, r4
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <_vfiprintf_r+0x228>)
 80081b0:	a904      	add	r1, sp, #16
 80081b2:	4630      	mov	r0, r6
 80081b4:	f000 f888 	bl	80082c8 <_printf_i>
 80081b8:	e7ec      	b.n	8008194 <_vfiprintf_r+0x1e4>
 80081ba:	bf00      	nop
 80081bc:	080087e8 	.word	0x080087e8
 80081c0:	08008828 	.word	0x08008828
 80081c4:	08008808 	.word	0x08008808
 80081c8:	080087c8 	.word	0x080087c8
 80081cc:	0800882e 	.word	0x0800882e
 80081d0:	08008832 	.word	0x08008832
 80081d4:	00000000 	.word	0x00000000
 80081d8:	08007f8b 	.word	0x08007f8b

080081dc <_printf_common>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	4691      	mov	r9, r2
 80081e2:	461f      	mov	r7, r3
 80081e4:	688a      	ldr	r2, [r1, #8]
 80081e6:	690b      	ldr	r3, [r1, #16]
 80081e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	bfb8      	it	lt
 80081f0:	4613      	movlt	r3, r2
 80081f2:	f8c9 3000 	str.w	r3, [r9]
 80081f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081fa:	4606      	mov	r6, r0
 80081fc:	460c      	mov	r4, r1
 80081fe:	b112      	cbz	r2, 8008206 <_printf_common+0x2a>
 8008200:	3301      	adds	r3, #1
 8008202:	f8c9 3000 	str.w	r3, [r9]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0699      	lsls	r1, r3, #26
 800820a:	bf42      	ittt	mi
 800820c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008210:	3302      	addmi	r3, #2
 8008212:	f8c9 3000 	strmi.w	r3, [r9]
 8008216:	6825      	ldr	r5, [r4, #0]
 8008218:	f015 0506 	ands.w	r5, r5, #6
 800821c:	d107      	bne.n	800822e <_printf_common+0x52>
 800821e:	f104 0a19 	add.w	sl, r4, #25
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	f8d9 2000 	ldr.w	r2, [r9]
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	42ab      	cmp	r3, r5
 800822c:	dc28      	bgt.n	8008280 <_printf_common+0xa4>
 800822e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	3300      	adds	r3, #0
 8008236:	bf18      	it	ne
 8008238:	2301      	movne	r3, #1
 800823a:	0692      	lsls	r2, r2, #26
 800823c:	d42d      	bmi.n	800829a <_printf_common+0xbe>
 800823e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008242:	4639      	mov	r1, r7
 8008244:	4630      	mov	r0, r6
 8008246:	47c0      	blx	r8
 8008248:	3001      	adds	r0, #1
 800824a:	d020      	beq.n	800828e <_printf_common+0xb2>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	68e5      	ldr	r5, [r4, #12]
 8008250:	f8d9 2000 	ldr.w	r2, [r9]
 8008254:	f003 0306 	and.w	r3, r3, #6
 8008258:	2b04      	cmp	r3, #4
 800825a:	bf08      	it	eq
 800825c:	1aad      	subeq	r5, r5, r2
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	6922      	ldr	r2, [r4, #16]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	341a      	adds	r4, #26
 8008278:	454d      	cmp	r5, r9
 800827a:	d11a      	bne.n	80082b2 <_printf_common+0xd6>
 800827c:	2000      	movs	r0, #0
 800827e:	e008      	b.n	8008292 <_printf_common+0xb6>
 8008280:	2301      	movs	r3, #1
 8008282:	4652      	mov	r2, sl
 8008284:	4639      	mov	r1, r7
 8008286:	4630      	mov	r0, r6
 8008288:	47c0      	blx	r8
 800828a:	3001      	adds	r0, #1
 800828c:	d103      	bne.n	8008296 <_printf_common+0xba>
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	3501      	adds	r5, #1
 8008298:	e7c3      	b.n	8008222 <_printf_common+0x46>
 800829a:	18e1      	adds	r1, r4, r3
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	2030      	movs	r0, #48	; 0x30
 80082a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082a4:	4422      	add	r2, r4
 80082a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ae:	3302      	adds	r3, #2
 80082b0:	e7c5      	b.n	800823e <_printf_common+0x62>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4622      	mov	r2, r4
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	47c0      	blx	r8
 80082bc:	3001      	adds	r0, #1
 80082be:	d0e6      	beq.n	800828e <_printf_common+0xb2>
 80082c0:	f109 0901 	add.w	r9, r9, #1
 80082c4:	e7d8      	b.n	8008278 <_printf_common+0x9c>
	...

080082c8 <_printf_i>:
 80082c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082d0:	460c      	mov	r4, r1
 80082d2:	7e09      	ldrb	r1, [r1, #24]
 80082d4:	b085      	sub	sp, #20
 80082d6:	296e      	cmp	r1, #110	; 0x6e
 80082d8:	4617      	mov	r7, r2
 80082da:	4606      	mov	r6, r0
 80082dc:	4698      	mov	r8, r3
 80082de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e0:	f000 80b3 	beq.w	800844a <_printf_i+0x182>
 80082e4:	d822      	bhi.n	800832c <_printf_i+0x64>
 80082e6:	2963      	cmp	r1, #99	; 0x63
 80082e8:	d036      	beq.n	8008358 <_printf_i+0x90>
 80082ea:	d80a      	bhi.n	8008302 <_printf_i+0x3a>
 80082ec:	2900      	cmp	r1, #0
 80082ee:	f000 80b9 	beq.w	8008464 <_printf_i+0x19c>
 80082f2:	2958      	cmp	r1, #88	; 0x58
 80082f4:	f000 8083 	beq.w	80083fe <_printf_i+0x136>
 80082f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008300:	e032      	b.n	8008368 <_printf_i+0xa0>
 8008302:	2964      	cmp	r1, #100	; 0x64
 8008304:	d001      	beq.n	800830a <_printf_i+0x42>
 8008306:	2969      	cmp	r1, #105	; 0x69
 8008308:	d1f6      	bne.n	80082f8 <_printf_i+0x30>
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	0605      	lsls	r5, r0, #24
 8008310:	f103 0104 	add.w	r1, r3, #4
 8008314:	d52a      	bpl.n	800836c <_printf_i+0xa4>
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6011      	str	r1, [r2, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	da03      	bge.n	8008326 <_printf_i+0x5e>
 800831e:	222d      	movs	r2, #45	; 0x2d
 8008320:	425b      	negs	r3, r3
 8008322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008326:	486f      	ldr	r0, [pc, #444]	; (80084e4 <_printf_i+0x21c>)
 8008328:	220a      	movs	r2, #10
 800832a:	e039      	b.n	80083a0 <_printf_i+0xd8>
 800832c:	2973      	cmp	r1, #115	; 0x73
 800832e:	f000 809d 	beq.w	800846c <_printf_i+0x1a4>
 8008332:	d808      	bhi.n	8008346 <_printf_i+0x7e>
 8008334:	296f      	cmp	r1, #111	; 0x6f
 8008336:	d020      	beq.n	800837a <_printf_i+0xb2>
 8008338:	2970      	cmp	r1, #112	; 0x70
 800833a:	d1dd      	bne.n	80082f8 <_printf_i+0x30>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	f043 0320 	orr.w	r3, r3, #32
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	e003      	b.n	800834e <_printf_i+0x86>
 8008346:	2975      	cmp	r1, #117	; 0x75
 8008348:	d017      	beq.n	800837a <_printf_i+0xb2>
 800834a:	2978      	cmp	r1, #120	; 0x78
 800834c:	d1d4      	bne.n	80082f8 <_printf_i+0x30>
 800834e:	2378      	movs	r3, #120	; 0x78
 8008350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008354:	4864      	ldr	r0, [pc, #400]	; (80084e8 <_printf_i+0x220>)
 8008356:	e055      	b.n	8008404 <_printf_i+0x13c>
 8008358:	6813      	ldr	r3, [r2, #0]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6011      	str	r1, [r2, #0]
 8008360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008368:	2301      	movs	r3, #1
 800836a:	e08c      	b.n	8008486 <_printf_i+0x1be>
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6011      	str	r1, [r2, #0]
 8008370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008374:	bf18      	it	ne
 8008376:	b21b      	sxthne	r3, r3
 8008378:	e7cf      	b.n	800831a <_printf_i+0x52>
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	6825      	ldr	r5, [r4, #0]
 800837e:	1d18      	adds	r0, r3, #4
 8008380:	6010      	str	r0, [r2, #0]
 8008382:	0628      	lsls	r0, r5, #24
 8008384:	d501      	bpl.n	800838a <_printf_i+0xc2>
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	e002      	b.n	8008390 <_printf_i+0xc8>
 800838a:	0668      	lsls	r0, r5, #25
 800838c:	d5fb      	bpl.n	8008386 <_printf_i+0xbe>
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	4854      	ldr	r0, [pc, #336]	; (80084e4 <_printf_i+0x21c>)
 8008392:	296f      	cmp	r1, #111	; 0x6f
 8008394:	bf14      	ite	ne
 8008396:	220a      	movne	r2, #10
 8008398:	2208      	moveq	r2, #8
 800839a:	2100      	movs	r1, #0
 800839c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083a0:	6865      	ldr	r5, [r4, #4]
 80083a2:	60a5      	str	r5, [r4, #8]
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	f2c0 8095 	blt.w	80084d4 <_printf_i+0x20c>
 80083aa:	6821      	ldr	r1, [r4, #0]
 80083ac:	f021 0104 	bic.w	r1, r1, #4
 80083b0:	6021      	str	r1, [r4, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d13d      	bne.n	8008432 <_printf_i+0x16a>
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	f040 808e 	bne.w	80084d8 <_printf_i+0x210>
 80083bc:	4665      	mov	r5, ip
 80083be:	2a08      	cmp	r2, #8
 80083c0:	d10b      	bne.n	80083da <_printf_i+0x112>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	07db      	lsls	r3, r3, #31
 80083c6:	d508      	bpl.n	80083da <_printf_i+0x112>
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	6862      	ldr	r2, [r4, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bfde      	ittt	le
 80083d0:	2330      	movle	r3, #48	; 0x30
 80083d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083da:	ebac 0305 	sub.w	r3, ip, r5
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	f8cd 8000 	str.w	r8, [sp]
 80083e4:	463b      	mov	r3, r7
 80083e6:	aa03      	add	r2, sp, #12
 80083e8:	4621      	mov	r1, r4
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff fef6 	bl	80081dc <_printf_common>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d14d      	bne.n	8008490 <_printf_i+0x1c8>
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	b005      	add	sp, #20
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	4839      	ldr	r0, [pc, #228]	; (80084e4 <_printf_i+0x21c>)
 8008400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	6821      	ldr	r1, [r4, #0]
 8008408:	1d1d      	adds	r5, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6015      	str	r5, [r2, #0]
 800840e:	060a      	lsls	r2, r1, #24
 8008410:	d50b      	bpl.n	800842a <_printf_i+0x162>
 8008412:	07ca      	lsls	r2, r1, #31
 8008414:	bf44      	itt	mi
 8008416:	f041 0120 	orrmi.w	r1, r1, #32
 800841a:	6021      	strmi	r1, [r4, #0]
 800841c:	b91b      	cbnz	r3, 8008426 <_printf_i+0x15e>
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	f022 0220 	bic.w	r2, r2, #32
 8008424:	6022      	str	r2, [r4, #0]
 8008426:	2210      	movs	r2, #16
 8008428:	e7b7      	b.n	800839a <_printf_i+0xd2>
 800842a:	064d      	lsls	r5, r1, #25
 800842c:	bf48      	it	mi
 800842e:	b29b      	uxthmi	r3, r3
 8008430:	e7ef      	b.n	8008412 <_printf_i+0x14a>
 8008432:	4665      	mov	r5, ip
 8008434:	fbb3 f1f2 	udiv	r1, r3, r2
 8008438:	fb02 3311 	mls	r3, r2, r1, r3
 800843c:	5cc3      	ldrb	r3, [r0, r3]
 800843e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008442:	460b      	mov	r3, r1
 8008444:	2900      	cmp	r1, #0
 8008446:	d1f5      	bne.n	8008434 <_printf_i+0x16c>
 8008448:	e7b9      	b.n	80083be <_printf_i+0xf6>
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	6825      	ldr	r5, [r4, #0]
 800844e:	6961      	ldr	r1, [r4, #20]
 8008450:	1d18      	adds	r0, r3, #4
 8008452:	6010      	str	r0, [r2, #0]
 8008454:	0628      	lsls	r0, r5, #24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	d501      	bpl.n	800845e <_printf_i+0x196>
 800845a:	6019      	str	r1, [r3, #0]
 800845c:	e002      	b.n	8008464 <_printf_i+0x19c>
 800845e:	066a      	lsls	r2, r5, #25
 8008460:	d5fb      	bpl.n	800845a <_printf_i+0x192>
 8008462:	8019      	strh	r1, [r3, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	4665      	mov	r5, ip
 800846a:	e7b9      	b.n	80083e0 <_printf_i+0x118>
 800846c:	6813      	ldr	r3, [r2, #0]
 800846e:	1d19      	adds	r1, r3, #4
 8008470:	6011      	str	r1, [r2, #0]
 8008472:	681d      	ldr	r5, [r3, #0]
 8008474:	6862      	ldr	r2, [r4, #4]
 8008476:	2100      	movs	r1, #0
 8008478:	4628      	mov	r0, r5
 800847a:	f7f7 feb1 	bl	80001e0 <memchr>
 800847e:	b108      	cbz	r0, 8008484 <_printf_i+0x1bc>
 8008480:	1b40      	subs	r0, r0, r5
 8008482:	6060      	str	r0, [r4, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	2300      	movs	r3, #0
 800848a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848e:	e7a7      	b.n	80083e0 <_printf_i+0x118>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	462a      	mov	r2, r5
 8008494:	4639      	mov	r1, r7
 8008496:	4630      	mov	r0, r6
 8008498:	47c0      	blx	r8
 800849a:	3001      	adds	r0, #1
 800849c:	d0aa      	beq.n	80083f4 <_printf_i+0x12c>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	079b      	lsls	r3, r3, #30
 80084a2:	d413      	bmi.n	80084cc <_printf_i+0x204>
 80084a4:	68e0      	ldr	r0, [r4, #12]
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	4298      	cmp	r0, r3
 80084aa:	bfb8      	it	lt
 80084ac:	4618      	movlt	r0, r3
 80084ae:	e7a3      	b.n	80083f8 <_printf_i+0x130>
 80084b0:	2301      	movs	r3, #1
 80084b2:	464a      	mov	r2, r9
 80084b4:	4639      	mov	r1, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	47c0      	blx	r8
 80084ba:	3001      	adds	r0, #1
 80084bc:	d09a      	beq.n	80083f4 <_printf_i+0x12c>
 80084be:	3501      	adds	r5, #1
 80084c0:	68e3      	ldr	r3, [r4, #12]
 80084c2:	9a03      	ldr	r2, [sp, #12]
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	42ab      	cmp	r3, r5
 80084c8:	dcf2      	bgt.n	80084b0 <_printf_i+0x1e8>
 80084ca:	e7eb      	b.n	80084a4 <_printf_i+0x1dc>
 80084cc:	2500      	movs	r5, #0
 80084ce:	f104 0919 	add.w	r9, r4, #25
 80084d2:	e7f5      	b.n	80084c0 <_printf_i+0x1f8>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1ac      	bne.n	8008432 <_printf_i+0x16a>
 80084d8:	7803      	ldrb	r3, [r0, #0]
 80084da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e2:	e76c      	b.n	80083be <_printf_i+0xf6>
 80084e4:	08008839 	.word	0x08008839
 80084e8:	0800884a 	.word	0x0800884a

080084ec <__sread>:
 80084ec:	b510      	push	{r4, lr}
 80084ee:	460c      	mov	r4, r1
 80084f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f4:	f000 f894 	bl	8008620 <_read_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	bfab      	itete	ge
 80084fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008500:	181b      	addge	r3, r3, r0
 8008502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008506:	bfac      	ite	ge
 8008508:	6563      	strge	r3, [r4, #84]	; 0x54
 800850a:	81a3      	strhlt	r3, [r4, #12]
 800850c:	bd10      	pop	{r4, pc}

0800850e <__swrite>:
 800850e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008512:	461f      	mov	r7, r3
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	05db      	lsls	r3, r3, #23
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	4616      	mov	r6, r2
 800851e:	d505      	bpl.n	800852c <__swrite+0x1e>
 8008520:	2302      	movs	r3, #2
 8008522:	2200      	movs	r2, #0
 8008524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008528:	f000 f868 	bl	80085fc <_lseek_r>
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	4628      	mov	r0, r5
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	f000 b817 	b.w	8008574 <_write_r>

08008546 <__sseek>:
 8008546:	b510      	push	{r4, lr}
 8008548:	460c      	mov	r4, r1
 800854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854e:	f000 f855 	bl	80085fc <_lseek_r>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	bf15      	itete	ne
 8008558:	6560      	strne	r0, [r4, #84]	; 0x54
 800855a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800855e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008562:	81a3      	strheq	r3, [r4, #12]
 8008564:	bf18      	it	ne
 8008566:	81a3      	strhne	r3, [r4, #12]
 8008568:	bd10      	pop	{r4, pc}

0800856a <__sclose>:
 800856a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856e:	f000 b813 	b.w	8008598 <_close_r>
	...

08008574 <_write_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4c07      	ldr	r4, [pc, #28]	; (8008594 <_write_r+0x20>)
 8008578:	4605      	mov	r5, r0
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	2200      	movs	r2, #0
 8008580:	6022      	str	r2, [r4, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f7f9 fa93 	bl	8001aae <_write>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_write_r+0x1e>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	b103      	cbz	r3, 8008592 <_write_r+0x1e>
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	20006d64 	.word	0x20006d64

08008598 <_close_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4c06      	ldr	r4, [pc, #24]	; (80085b4 <_close_r+0x1c>)
 800859c:	2300      	movs	r3, #0
 800859e:	4605      	mov	r5, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	f7f9 fa9f 	bl	8001ae6 <_close>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_close_r+0x1a>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_close_r+0x1a>
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20006d64 	.word	0x20006d64

080085b8 <_fstat_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4c07      	ldr	r4, [pc, #28]	; (80085d8 <_fstat_r+0x20>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4605      	mov	r5, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	f7f9 fa9a 	bl	8001afe <_fstat>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d102      	bne.n	80085d4 <_fstat_r+0x1c>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	b103      	cbz	r3, 80085d4 <_fstat_r+0x1c>
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	20006d64 	.word	0x20006d64

080085dc <_isatty_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4c06      	ldr	r4, [pc, #24]	; (80085f8 <_isatty_r+0x1c>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4605      	mov	r5, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	f7f9 fa99 	bl	8001b1e <_isatty>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_isatty_r+0x1a>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_isatty_r+0x1a>
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20006d64 	.word	0x20006d64

080085fc <_lseek_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4c07      	ldr	r4, [pc, #28]	; (800861c <_lseek_r+0x20>)
 8008600:	4605      	mov	r5, r0
 8008602:	4608      	mov	r0, r1
 8008604:	4611      	mov	r1, r2
 8008606:	2200      	movs	r2, #0
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	f7f9 fa92 	bl	8001b34 <_lseek>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_lseek_r+0x1e>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	b103      	cbz	r3, 800861a <_lseek_r+0x1e>
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20006d64 	.word	0x20006d64

08008620 <_read_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4c07      	ldr	r4, [pc, #28]	; (8008640 <_read_r+0x20>)
 8008624:	4605      	mov	r5, r0
 8008626:	4608      	mov	r0, r1
 8008628:	4611      	mov	r1, r2
 800862a:	2200      	movs	r2, #0
 800862c:	6022      	str	r2, [r4, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	f7f9 fa20 	bl	8001a74 <_read>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_read_r+0x1e>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	b103      	cbz	r3, 800863e <_read_r+0x1e>
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	20006d64 	.word	0x20006d64

08008644 <_init>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr

08008650 <_fini>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	bf00      	nop
 8008654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008656:	bc08      	pop	{r3}
 8008658:	469e      	mov	lr, r3
 800865a:	4770      	bx	lr
